
xeDieuKhien.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008460  08008460  00009460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800888c  0800888c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008894  08008894  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008894  08008894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008898  08008898  00009898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800889c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000338  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecec  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b5  00000000  00000000  00018ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0001b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aab  00000000  00000000  0001c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228f6  00000000  00000000  0001ce23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011601  00000000  00000000  0003f719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd3f3  00000000  00000000  00050d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e10d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e94  00000000  00000000  0011e150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00122fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008444 	.word	0x08008444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008444 	.word	0x08008444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b32      	ldr	r3, [pc, #200]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a31      	ldr	r2, [pc, #196]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a23      	ldr	r2, [pc, #140]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a1c      	ldr	r2, [pc, #112]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_GPIO_Init+0xe4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_STT_Pin|LED_MODE_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001020:	4816      	ldr	r0, [pc, #88]	@ (800107c <MX_GPIO_Init+0xe8>)
 8001022:	f001 f89f 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, motor_right_dir_Pin|motor_left_dir_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <MX_GPIO_Init+0xec>)
 800102e:	f001 f899 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STT_Pin LED_MODE_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_MODE_Pin;
 8001032:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	480c      	ldr	r0, [pc, #48]	@ (800107c <MX_GPIO_Init+0xe8>)
 800104c:	f000 feee 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_right_dir_Pin motor_left_dir_Pin */
  GPIO_InitStruct.Pin = motor_right_dir_Pin|motor_left_dir_Pin;
 8001050:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_GPIO_Init+0xec>)
 800106a:	f000 fedf 	bl	8001e2c <HAL_GPIO_Init>

}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40021000 	.word	0x40021000
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==huart6.Instance)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_UART_RxCpltCallback+0x2c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d102      	bne.n	800109e <HAL_UART_RxCpltCallback+0x1a>
  {
	  uartAppHandle(&my_debug);
 8001098:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <HAL_UART_RxCpltCallback+0x30>)
 800109a:	f000 fc0f 	bl	80018bc <uartAppHandle>
  }
  HAL_UART_Receive_IT(&huart6,&my_debug.char_data_rec,1);
 800109e:	2201      	movs	r2, #1
 80010a0:	4904      	ldr	r1, [pc, #16]	@ (80010b4 <HAL_UART_RxCpltCallback+0x30>)
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <HAL_UART_RxCpltCallback+0x2c>)
 80010a4:	f002 fc18 	bl	80038d8 <HAL_UART_Receive_IT>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000240 	.word	0x20000240
 80010b4:	20000288 	.word	0x20000288

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 fc7b 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f875 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f7ff ff65 	bl	8000f94 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010ca:	f000 fa1b 	bl	8001504 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80010ce:	f000 fb21 	bl	8001714 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  motor_init();
 80010d2:	f000 fbd1 	bl	8001878 <motor_init>
  HAL_UART_Receive_IT(&huart6,&my_debug.char_data_rec,1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	492e      	ldr	r1, [pc, #184]	@ (8001194 <main+0xdc>)
 80010da:	482f      	ldr	r0, [pc, #188]	@ (8001198 <main+0xe0>)
 80010dc:	f002 fbfc 	bl	80038d8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (HAL_GetTick() - lastToggleTime >= 300)
 80010e0:	f000 fcd0 	bl	8001a84 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <main+0xe4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80010f0:	d309      	bcc.n	8001106 <main+0x4e>
	{
		HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 80010f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f6:	482a      	ldr	r0, [pc, #168]	@ (80011a0 <main+0xe8>)
 80010f8:	f001 f84d 	bl	8002196 <HAL_GPIO_TogglePin>
		lastToggleTime = HAL_GetTick();
 80010fc:	f000 fcc2 	bl	8001a84 <HAL_GetTick>
 8001100:	4603      	mov	r3, r0
 8001102:	4a26      	ldr	r2, [pc, #152]	@ (800119c <main+0xe4>)
 8001104:	6013      	str	r3, [r2, #0]
	}

	if (my_debug.data_done_frame)
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <main+0xdc>)
 8001108:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800110c:	2b00      	cmp	r3, #0
 800110e:	d03c      	beq.n	800118a <main+0xd2>
		//blynkLed(1);
		//HAL_Delay(100);
		//esp32_print("stm32 data: %s\n\r",my_debug.arr_data_rec);


		int left_dir = 0, right_dir = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
		int left_duty = 0, right_duty = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]

		// Đảm bảo đã loại bỏ '@' và '#' trước khi sscanf
		if (sscanf(my_debug.arr_data_rec,"left(dir[%d],duty[%d])-right(dir[%d],duty[%d])",&left_dir, &left_duty, &right_dir, &right_duty) == 4)
 8001120:	1d39      	adds	r1, r7, #4
 8001122:	f107 020c 	add.w	r2, r7, #12
 8001126:	463b      	mov	r3, r7
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	460b      	mov	r3, r1
 8001132:	491c      	ldr	r1, [pc, #112]	@ (80011a4 <main+0xec>)
 8001134:	481c      	ldr	r0, [pc, #112]	@ (80011a8 <main+0xf0>)
 8001136:	f003 fdfd 	bl	8004d34 <siscanf>
 800113a:	4603      	mov	r3, r0
 800113c:	2b04      	cmp	r3, #4
 800113e:	d121      	bne.n	8001184 <main+0xcc>
		{
		    // ==== BÁNH TRÁI ====
			// dir = 0 → tiến, dir = 1 → lùi
			//HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin,(left_dir == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
			HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin,(left_dir == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001152:	4816      	ldr	r0, [pc, #88]	@ (80011ac <main+0xf4>)
 8001154:	f001 f806 	bl	8002164 <HAL_GPIO_WritePin>
		    // ==== BÁNH PHẢI ====
		    //HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin,(right_dir == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
			HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin,(right_dir == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800116a:	4810      	ldr	r0, [pc, #64]	@ (80011ac <main+0xf4>)
 800116c:	f000 fffa 	bl	8002164 <HAL_GPIO_WritePin>

		    TIM1_SetDuty_CH2(left_duty);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fb47 	bl	8001808 <TIM1_SetDuty_CH2>
		    TIM1_SetDuty_CH4(right_duty);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fb5e 	bl	8001840 <TIM1_SetDuty_CH4>
		{
			blynkLed(3);
			Backward();
		}
	    */
		uartAppClear(&my_debug);  // Xóa buffer sau khi xử lý
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <main+0xdc>)
 8001186:	f000 fbcd 	bl	8001924 <uartAppClear>
	}

	HAL_Delay(2);
 800118a:	2002      	movs	r0, #2
 800118c:	f000 fc86 	bl	8001a9c <HAL_Delay>
	if (HAL_GetTick() - lastToggleTime >= 300)
 8001190:	e7a6      	b.n	80010e0 <main+0x28>
 8001192:	bf00      	nop
 8001194:	20000288 	.word	0x20000288
 8001198:	20000240 	.word	0x20000240
 800119c:	200001f0 	.word	0x200001f0
 80011a0:	40021000 	.word	0x40021000
 80011a4:	08008460 	.word	0x08008460
 80011a8:	20000289 	.word	0x20000289
 80011ac:	40020000 	.word	0x40020000

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	@ 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	@ 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fe27 	bl	8004e12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b28      	ldr	r3, [pc, #160]	@ (800127c <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a27      	ldr	r2, [pc, #156]	@ (800127c <SystemClock_Config+0xcc>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b25      	ldr	r3, [pc, #148]	@ (800127c <SystemClock_Config+0xcc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <SystemClock_Config+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <SystemClock_Config+0xd0>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <SystemClock_Config+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001224:	23a8      	movs	r3, #168	@ 0xa8
 8001226:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f000 ffc9 	bl	80021cc <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001240:	f000 f820 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001250:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2105      	movs	r1, #5
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fa2a 	bl	80026bc <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800126e:	f000 f809 	bl	8001284 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	@ 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <HAL_MspInit+0x4c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_MspInit+0x4c>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 fb91 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <USART6_IRQHandler+0x10>)
 8001346:	f002 faed 	bl	8003924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000240 	.word	0x20000240

08001354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_kill>:

int _kill(int pid, int sig)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136e:	f003 fd9f 	bl	8004eb0 <__errno>
 8001372:	4603      	mov	r3, r0
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_exit>:

void _exit (int status)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001396:	bf00      	nop
 8001398:	e7fd      	b.n	8001396 <_exit+0x12>

0800139a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e00a      	b.n	80013c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ac:	f3af 8000 	nop.w
 80013b0:	4601      	mov	r1, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	b2ca      	uxtb	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf0      	blt.n	80013ac <_read+0x12>
  }

  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e009      	b.n	80013fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbf1      	blt.n	80013e6 <_write+0x12>
  }
  return len;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_close>:

int _close(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001434:	605a      	str	r2, [r3, #4]
  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_isatty>:

int _isatty(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f003 fd04 	bl	8004eb0 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	200001f4 	.word	0x200001f4
 80014dc:	20000510 	.word	0x20000510

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	@ 0x58
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2220      	movs	r2, #32
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fc68 	bl	8004e12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001544:	4a44      	ldr	r2, [pc, #272]	@ (8001658 <MX_TIM1_Init+0x154>)
 8001546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001548:	4b42      	ldr	r3, [pc, #264]	@ (8001654 <MX_TIM1_Init+0x150>)
 800154a:	2201      	movs	r2, #1
 800154c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8399;
 8001554:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001556:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800155a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <MX_TIM1_Init+0x150>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001562:	4b3c      	ldr	r3, [pc, #240]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <MX_TIM1_Init+0x150>)
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156e:	4839      	ldr	r0, [pc, #228]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001570:	f001 fa84 	bl	8002a7c <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800157a:	f7ff fe83 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001584:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001588:	4619      	mov	r1, r3
 800158a:	4832      	ldr	r0, [pc, #200]	@ (8001654 <MX_TIM1_Init+0x150>)
 800158c:	f001 fca8 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001596:	f7ff fe75 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800159a:	482e      	ldr	r0, [pc, #184]	@ (8001654 <MX_TIM1_Init+0x150>)
 800159c:	f001 fabd 	bl	8002b1a <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015a6:	f7ff fe6d 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015b6:	4619      	mov	r1, r3
 80015b8:	4826      	ldr	r0, [pc, #152]	@ (8001654 <MX_TIM1_Init+0x150>)
 80015ba:	f002 f86f 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015c4:	f7ff fe5e 	bl	8001284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2360      	movs	r3, #96	@ 0x60
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015d8:	2304      	movs	r3, #4
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e8:	2204      	movs	r2, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4819      	ldr	r0, [pc, #100]	@ (8001654 <MX_TIM1_Init+0x150>)
 80015ee:	f001 fbb5 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015f8:	f7ff fe44 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	220c      	movs	r2, #12
 8001602:	4619      	mov	r1, r3
 8001604:	4813      	ldr	r0, [pc, #76]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001606:	f001 fba9 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001610:	f7ff fe38 	bl	8001284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001638:	f002 f8ac 	bl	8003794 <HAL_TIMEx_ConfigBreakDeadTime>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001642:	f7ff fe1f 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001646:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MX_TIM1_Init+0x150>)
 8001648:	f000 f82a 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 800164c:	bf00      	nop
 800164e:	3758      	adds	r7, #88	@ 0x58
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200001f8 	.word	0x200001f8
 8001658:	40010000 	.word	0x40010000

0800165c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <HAL_TIM_Base_MspInit+0x3c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10d      	bne.n	800168a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_TIM_Base_MspInit+0x40>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a09      	ldr	r2, [pc, #36]	@ (800169c <HAL_TIM_Base_MspInit+0x40>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <HAL_TIM_Base_MspInit+0x40>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40010000 	.word	0x40010000
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <HAL_TIM_MspPostInit+0x68>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d11e      	bne.n	8001700 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_TIM_MspPostInit+0x6c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_TIM_MspPostInit+0x6c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_TIM_MspPostInit+0x6c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016de:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80016e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <HAL_TIM_MspPostInit+0x70>)
 80016fc:	f000 fb96 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40010000 	.word	0x40010000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <MX_USART6_UART_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_USART6_UART_Init+0x4c>)
 800174c:	f002 f874 	bl	8003838 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001756:	f7ff fd95 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000240 	.word	0x20000240
 8001764:	40011400 	.word	0x40011400

08001768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	@ 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_UART_MspInit+0x94>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d133      	bne.n	80017f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <HAL_UART_MspInit+0x98>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	4a1b      	ldr	r2, [pc, #108]	@ (8001800 <HAL_UART_MspInit+0x98>)
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	6453      	str	r3, [r2, #68]	@ 0x44
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_UART_MspInit+0x98>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_UART_MspInit+0x98>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <HAL_UART_MspInit+0x98>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_UART_MspInit+0x98>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23c0      	movs	r3, #192	@ 0xc0
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017d2:	2308      	movs	r3, #8
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4809      	ldr	r0, [pc, #36]	@ (8001804 <HAL_UART_MspInit+0x9c>)
 80017de:	f000 fb25 	bl	8001e2c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2047      	movs	r0, #71	@ 0x47
 80017e8:	f000 fa57 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017ec:	2047      	movs	r0, #71	@ 0x47
 80017ee:	f000 fa70 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40011400 	.word	0x40011400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800

08001808 <TIM1_SetDuty_CH2>:
 */

#include "motor.h"

void TIM1_SetDuty_CH2(uint8_t duty_percent)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	duty_percent=100-duty_percent;
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001818:	71fb      	strb	r3, [r7, #7]
    if (duty_percent > 100) duty_percent = 100;
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b64      	cmp	r3, #100	@ 0x64
 800181e:	d901      	bls.n	8001824 <TIM1_SetDuty_CH2+0x1c>
 8001820:	2364      	movs	r3, #100	@ 0x64
 8001822:	71fb      	strb	r3, [r7, #7]
    TIM1->CCR2 = (PWM_RESOLUTION * duty_percent) / 100;
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2254      	movs	r2, #84	@ 0x54
 8001828:	fb03 f202 	mul.w	r2, r3, r2
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <TIM1_SetDuty_CH2+0x34>)
 800182e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40010000 	.word	0x40010000

08001840 <TIM1_SetDuty_CH4>:

void TIM1_SetDuty_CH4(uint8_t duty_percent)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	duty_percent=100-duty_percent;
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001850:	71fb      	strb	r3, [r7, #7]
    if (duty_percent > 100) duty_percent = 100;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b64      	cmp	r3, #100	@ 0x64
 8001856:	d901      	bls.n	800185c <TIM1_SetDuty_CH4+0x1c>
 8001858:	2364      	movs	r3, #100	@ 0x64
 800185a:	71fb      	strb	r3, [r7, #7]
    TIM1->CCR4 = (PWM_RESOLUTION * duty_percent) / 100;
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2254      	movs	r2, #84	@ 0x54
 8001860:	fb03 f202 	mul.w	r2, r3, r2
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <TIM1_SetDuty_CH4+0x34>)
 8001866:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40010000 	.word	0x40010000

08001878 <motor_init>:


void motor_init()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  //tien
  HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, 0); //trái quay tiến
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001882:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <motor_init+0x3c>)
 8001884:	f000 fc6e 	bl	8002164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, 1); //phải quay tiến
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800188e:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <motor_init+0x3c>)
 8001890:	f000 fc68 	bl	8002164 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001894:	2104      	movs	r1, #4
 8001896:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <motor_init+0x40>)
 8001898:	f001 f998 	bl	8002bcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800189c:	210c      	movs	r1, #12
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <motor_init+0x40>)
 80018a0:	f001 f994 	bl	8002bcc <HAL_TIM_PWM_Start>

  // Set PWM duty
  TIM1_SetDuty_CH2(0);  //duty stop
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ffaf 	bl	8001808 <TIM1_SetDuty_CH2>
  TIM1_SetDuty_CH4(0);  //duty stop
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff ffc8 	bl	8001840 <TIM1_SetDuty_CH4>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40020000 	.word	0x40020000
 80018b8:	200001f8 	.word	0x200001f8

080018bc <uartAppHandle>:
	.arr_data_index=0,
	.en_get_char_data=false
};

void uartAppHandle(Uart_debug *myUart)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if(myUart->char_data_rec==APP_FRAME_STOP)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b23      	cmp	r3, #35	@ 0x23
 80018ca:	d107      	bne.n	80018dc <uartAppHandle+0x20>
	{
		myUart->en_get_char_data=false;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		myUart->data_done_frame=true;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
	}
	if(myUart->en_get_char_data)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d010      	beq.n	8001908 <uartAppHandle+0x4c>
	{
		myUart->arr_data_rec[myUart->arr_data_index]=myUart->char_data_rec;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 80018ec:	4619      	mov	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	440b      	add	r3, r1
 80018f6:	705a      	strb	r2, [r3, #1]
		myUart->arr_data_index++;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 80018fe:	3301      	adds	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
	}
	if(myUart->char_data_rec==APP_FRAME_START) myUart->en_get_char_data=true;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b40      	cmp	r3, #64	@ 0x40
 800190e:	d103      	bne.n	8001918 <uartAppHandle+0x5c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <uartAppClear>:

void uartAppClear(Uart_debug *myUart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	myUart->char_data_rec=0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	myUart->data_done_frame=false;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
	myUart->en_get_char_data=false;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	memset(myUart->arr_data_rec,0,sizeof(myUart->arr_data_rec));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fa60 	bl	8004e12 <memset>
	myUart->arr_data_index=0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800199c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001968:	f7ff fdba 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f003 fa93 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fb8f 	bl	80010b8 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019a8:	0800889c 	.word	0x0800889c
  ldr r2, =_sbss
 80019ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019b0:	2000050c 	.word	0x2000050c

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f94f 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fc50 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f967 	bl	8001cee <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f92f 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	200003bc 	.word	0x200003bc

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200003bc 	.word	0x200003bc

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff feb6 	bl	8001a84 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d008      	beq.n	8001d38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e052      	b.n	8001dde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0216 	bic.w	r2, r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_DMA_Abort+0x62>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e013      	b.n	8001db2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fe7b 	bl	8001a84 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d90c      	bls.n	8001db2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e015      	b.n	8001dde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e4      	bne.n	8001d8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	223f      	movs	r2, #63	@ 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e00c      	b.n	8001e1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2205      	movs	r2, #5
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e16b      	b.n	8002120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 815a 	bne.w	800211a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80b4 	beq.w	800211a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b60      	ldr	r3, [pc, #384]	@ (8002138 <HAL_GPIO_Init+0x30c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	4a5f      	ldr	r2, [pc, #380]	@ (8002138 <HAL_GPIO_Init+0x30c>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002138 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a5b      	ldr	r2, [pc, #364]	@ (800213c <HAL_GPIO_Init+0x310>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	@ (8002140 <HAL_GPIO_Init+0x314>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	@ (8002144 <HAL_GPIO_Init+0x318>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	@ (8002148 <HAL_GPIO_Init+0x31c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	@ (800214c <HAL_GPIO_Init+0x320>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4e      	ldr	r2, [pc, #312]	@ (8002150 <HAL_GPIO_Init+0x324>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4d      	ldr	r2, [pc, #308]	@ (8002154 <HAL_GPIO_Init+0x328>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4c      	ldr	r2, [pc, #304]	@ (8002158 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	@ (800215c <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x20a>
 8002032:	2307      	movs	r3, #7
 8002034:	e00e      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002036:	2308      	movs	r3, #8
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800203a:	2306      	movs	r3, #6
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x228>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x228>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4935      	ldr	r1, [pc, #212]	@ (800213c <HAL_GPIO_Init+0x310>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_GPIO_Init+0x334>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a32      	ldr	r2, [pc, #200]	@ (8002160 <HAL_GPIO_Init+0x334>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b30      	ldr	r3, [pc, #192]	@ (8002160 <HAL_GPIO_Init+0x334>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a27      	ldr	r2, [pc, #156]	@ (8002160 <HAL_GPIO_Init+0x334>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c6:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_GPIO_Init+0x334>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_GPIO_Init+0x334>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_GPIO_Init+0x334>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002114:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_GPIO_Init+0x334>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae90 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40013800 	.word	0x40013800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40021c00 	.word	0x40021c00
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a8:	887a      	ldrh	r2, [r7, #2]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4013      	ands	r3, r2
 80021ae:	041a      	lsls	r2, r3, #16
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	400b      	ands	r3, r1
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e267      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d075      	beq.n	80022d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ea:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d00c      	beq.n	8002210 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f6:	4b85      	ldr	r3, [pc, #532]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d112      	bne.n	8002228 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4b82      	ldr	r3, [pc, #520]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800220e:	d10b      	bne.n	8002228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	4b7e      	ldr	r3, [pc, #504]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d05b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x108>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d157      	bne.n	80022d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e242      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x74>
 8002232:	4b76      	ldr	r3, [pc, #472]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a75      	ldr	r2, [pc, #468]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0xb0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x98>
 800224a:	4b70      	ldr	r3, [pc, #448]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6f      	ldr	r2, [pc, #444]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b6d      	ldr	r3, [pc, #436]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6c      	ldr	r2, [pc, #432]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0xb0>
 8002264:	4b69      	ldr	r3, [pc, #420]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a68      	ldr	r2, [pc, #416]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b66      	ldr	r3, [pc, #408]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a65      	ldr	r2, [pc, #404]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fbfe 	bl	8001a84 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fbfa 	bl	8001a84 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e207      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b5b      	ldr	r3, [pc, #364]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xc0>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fbea 	bl	8001a84 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fbe6 	bl	8001a84 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	@ 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1f3      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	4b51      	ldr	r3, [pc, #324]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0xe8>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d063      	beq.n	80023aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022e2:	4b4a      	ldr	r3, [pc, #296]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b47      	ldr	r3, [pc, #284]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d11c      	bne.n	8002334 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b44      	ldr	r3, [pc, #272]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	4b41      	ldr	r3, [pc, #260]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x152>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e1c7      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b3b      	ldr	r3, [pc, #236]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4937      	ldr	r1, [pc, #220]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	e03a      	b.n	80023aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_RCC_OscConfig+0x244>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7ff fb9f 	bl	8001a84 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7ff fb9b 	bl	8001a84 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1a8      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4925      	ldr	r1, [pc, #148]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
 800237c:	e015      	b.n	80023aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <HAL_RCC_OscConfig+0x244>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff fb7e 	bl	8001a84 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fb7a 	bl	8001a84 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e187      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d036      	beq.n	8002424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_RCC_OscConfig+0x248>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff fb5e 	bl	8001a84 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fb5a 	bl	8001a84 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e167      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_RCC_OscConfig+0x240>)
 80023e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x200>
 80023ea:	e01b      	b.n	8002424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_RCC_OscConfig+0x248>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fb47 	bl	8001a84 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	e00e      	b.n	8002418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7ff fb43 	bl	8001a84 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d907      	bls.n	8002418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e150      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
 800240c:	40023800 	.word	0x40023800
 8002410:	42470000 	.word	0x42470000
 8002414:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b88      	ldr	r3, [pc, #544]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800241a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ea      	bne.n	80023fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8097 	beq.w	8002560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b81      	ldr	r3, [pc, #516]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b7d      	ldr	r3, [pc, #500]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a7c      	ldr	r2, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b7a      	ldr	r3, [pc, #488]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b77      	ldr	r3, [pc, #476]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b74      	ldr	r3, [pc, #464]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a73      	ldr	r2, [pc, #460]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7ff fb03 	bl	8001a84 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7ff faff 	bl	8001a84 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e10c      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b6a      	ldr	r3, [pc, #424]	@ (8002640 <HAL_RCC_OscConfig+0x474>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2ea>
 80024a8:	4b64      	ldr	r3, [pc, #400]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a63      	ldr	r2, [pc, #396]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x324>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x30c>
 80024be:	4b5f      	ldr	r3, [pc, #380]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	4a5e      	ldr	r2, [pc, #376]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ca:	4b5c      	ldr	r3, [pc, #368]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	4a5b      	ldr	r2, [pc, #364]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0x324>
 80024d8:	4b58      	ldr	r3, [pc, #352]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	4a57      	ldr	r2, [pc, #348]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e4:	4b55      	ldr	r3, [pc, #340]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e8:	4a54      	ldr	r2, [pc, #336]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80024ea:	f023 0304 	bic.w	r3, r3, #4
 80024ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff fac4 	bl	8001a84 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7ff fac0 	bl	8001a84 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0cb      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	4b49      	ldr	r3, [pc, #292]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ee      	beq.n	8002500 <HAL_RCC_OscConfig+0x334>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff faae 	bl	8001a84 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7ff faaa 	bl	8001a84 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0b5      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002542:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ee      	bne.n	800252c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b39      	ldr	r3, [pc, #228]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	4a38      	ldr	r2, [pc, #224]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a1 	beq.w	80026ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800256a:	4b34      	ldr	r3, [pc, #208]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d05c      	beq.n	8002630 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d141      	bne.n	8002602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b31      	ldr	r3, [pc, #196]	@ (8002644 <HAL_RCC_OscConfig+0x478>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fa7e 	bl	8001a84 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff fa7a 	bl	8001a84 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e087      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	491b      	ldr	r1, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x478>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fa53 	bl	8001a84 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff fa4f 	bl	8001a84 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e05c      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x416>
 8002600:	e054      	b.n	80026ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_RCC_OscConfig+0x478>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff fa3c 	bl	8001a84 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7ff fa38 	bl	8001a84 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e045      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_RCC_OscConfig+0x470>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x444>
 800262e:	e03d      	b.n	80026ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e038      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
 800263c:	40023800 	.word	0x40023800
 8002640:	40007000 	.word	0x40007000
 8002644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <HAL_RCC_OscConfig+0x4ec>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d028      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d121      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d11a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800267e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002680:	4293      	cmp	r3, r2
 8002682:	d111      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0cc      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b68      	ldr	r3, [pc, #416]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d90c      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b65      	ldr	r3, [pc, #404]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d044      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d119      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d003      	beq.n	800277a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3b      	ldr	r3, [pc, #236]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e067      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b37      	ldr	r3, [pc, #220]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4934      	ldr	r1, [pc, #208]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff f96a 	bl	8001a84 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7ff f966 	bl	8001a84 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e04f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d20c      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	@ (800287c <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8ca 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00
 8002878:	40023800 	.word	0x40023800
 800287c:	0800849c 	.word	0x0800849c
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800288c:	b090      	sub	sp, #64	@ 0x40
 800288e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d00d      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	f200 80a1 	bhi.w	80029f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x34>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ba:	e09b      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b53      	ldr	r3, [pc, #332]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80028be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028c0:	e09b      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028c6:	e098      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d028      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	2200      	movs	r2, #0
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028f0:	2100      	movs	r1, #0
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f4:	fb03 f201 	mul.w	r2, r3, r1
 80028f8:	2300      	movs	r3, #0
 80028fa:	fb00 f303 	mul.w	r3, r0, r3
 80028fe:	4413      	add	r3, r2
 8002900:	4a43      	ldr	r2, [pc, #268]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002902:	fba0 1202 	umull	r1, r2, r0, r2
 8002906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002908:	460a      	mov	r2, r1
 800290a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800290c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290e:	4413      	add	r3, r2
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002914:	2200      	movs	r2, #0
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	61fa      	str	r2, [r7, #28]
 800291a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002922:	f7fe f989 	bl	8000c38 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4613      	mov	r3, r2
 800292c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800292e:	e053      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002930:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	2200      	movs	r2, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	617a      	str	r2, [r7, #20]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002942:	f04f 0b00 	mov.w	fp, #0
 8002946:	4652      	mov	r2, sl
 8002948:	465b      	mov	r3, fp
 800294a:	f04f 0000 	mov.w	r0, #0
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	0159      	lsls	r1, r3, #5
 8002954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002958:	0150      	lsls	r0, r2, #5
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	ebb2 080a 	subs.w	r8, r2, sl
 8002962:	eb63 090b 	sbc.w	r9, r3, fp
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002976:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800297a:	ebb2 0408 	subs.w	r4, r2, r8
 800297e:	eb63 0509 	sbc.w	r5, r3, r9
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	00eb      	lsls	r3, r5, #3
 800298c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002990:	00e2      	lsls	r2, r4, #3
 8002992:	4614      	mov	r4, r2
 8002994:	461d      	mov	r5, r3
 8002996:	eb14 030a 	adds.w	r3, r4, sl
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	eb45 030b 	adc.w	r3, r5, fp
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c2:	2200      	movs	r2, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	60fa      	str	r2, [r7, #12]
 80029c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029cc:	f7fe f934 	bl	8000c38 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80029e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80029f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3740      	adds	r7, #64	@ 0x40
 8002a00:	46bd      	mov	sp, r7
 8002a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	017d7840 	.word	0x017d7840

08002a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	080084ac 	.word	0x080084ac

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a58:	f7ff ffdc 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0b5b      	lsrs	r3, r3, #13
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	080084ac 	.word	0x080084ac

08002a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e041      	b.n	8002b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe fdda 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 fad8 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e041      	b.n	8002bb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f839 	bl	8002bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f000 fa89 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_TIM_PWM_Start+0x24>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e022      	b.n	8002c36 <HAL_TIM_PWM_Start+0x6a>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d109      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x3e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e015      	b.n	8002c36 <HAL_TIM_PWM_Start+0x6a>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d109      	bne.n	8002c24 <HAL_TIM_PWM_Start+0x58>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e008      	b.n	8002c36 <HAL_TIM_PWM_Start+0x6a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07c      	b.n	8002d38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_PWM_Start+0x82>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c4c:	e013      	b.n	8002c76 <HAL_TIM_PWM_Start+0xaa>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x92>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c5c:	e00b      	b.n	8002c76 <HAL_TIM_PWM_Start+0xaa>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xa2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c6c:	e003      	b.n	8002c76 <HAL_TIM_PWM_Start+0xaa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	6839      	ldr	r1, [r7, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fce6 	bl	8003650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2d      	ldr	r2, [pc, #180]	@ (8002d40 <HAL_TIM_PWM_Start+0x174>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_PWM_Start+0xcc>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	@ (8002d44 <HAL_TIM_PWM_Start+0x178>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_TIM_PWM_Start+0xd0>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_TIM_PWM_Start+0xd2>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <HAL_TIM_PWM_Start+0x174>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc4:	d01d      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_TIM_PWM_Start+0x17c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_TIM_PWM_Start+0x180>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <HAL_TIM_PWM_Start+0x184>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <HAL_TIM_PWM_Start+0x178>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <HAL_TIM_PWM_Start+0x188>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x136>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a16      	ldr	r2, [pc, #88]	@ (8002d58 <HAL_TIM_PWM_Start+0x18c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d010      	beq.n	8002d36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d24:	e007      	b.n	8002d36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40010000 	.word	0x40010000
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40014000 	.word	0x40014000
 8002d58:	40001800 	.word	0x40001800

08002d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0ae      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	f200 809f 	bhi.w	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002dc5 	.word	0x08002dc5
 8002d94:	08002ec9 	.word	0x08002ec9
 8002d98:	08002ec9 	.word	0x08002ec9
 8002d9c:	08002ec9 	.word	0x08002ec9
 8002da0:	08002e05 	.word	0x08002e05
 8002da4:	08002ec9 	.word	0x08002ec9
 8002da8:	08002ec9 	.word	0x08002ec9
 8002dac:	08002ec9 	.word	0x08002ec9
 8002db0:	08002e47 	.word	0x08002e47
 8002db4:	08002ec9 	.word	0x08002ec9
 8002db8:	08002ec9 	.word	0x08002ec9
 8002dbc:	08002ec9 	.word	0x08002ec9
 8002dc0:	08002e87 	.word	0x08002e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f9f6 	bl	80031bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6999      	ldr	r1, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	619a      	str	r2, [r3, #24]
      break;
 8002e02:	e064      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fa46 	bl	800329c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	021a      	lsls	r2, r3, #8
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	619a      	str	r2, [r3, #24]
      break;
 8002e44:	e043      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa9b 	bl	8003388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0208 	orr.w	r2, r2, #8
 8002e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0204 	bic.w	r2, r2, #4
 8002e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	61da      	str	r2, [r3, #28]
      break;
 8002e84:	e023      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 faef 	bl	8003470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69d9      	ldr	r1, [r3, #28]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
      break;
 8002ec6:	e002      	b.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ecc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_ConfigClockSource+0x1c>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0b4      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x186>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f34:	d03e      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3a:	f200 8087 	bhi.w	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f42:	f000 8086 	beq.w	8003052 <HAL_TIM_ConfigClockSource+0x172>
 8002f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4a:	d87f      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	2b70      	cmp	r3, #112	@ 0x70
 8002f4e:	d01a      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0xa6>
 8002f50:	2b70      	cmp	r3, #112	@ 0x70
 8002f52:	d87b      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f54:	2b60      	cmp	r3, #96	@ 0x60
 8002f56:	d050      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x11a>
 8002f58:	2b60      	cmp	r3, #96	@ 0x60
 8002f5a:	d877      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b50      	cmp	r3, #80	@ 0x50
 8002f5e:	d03c      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xfa>
 8002f60:	2b50      	cmp	r3, #80	@ 0x50
 8002f62:	d873      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d058      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x13a>
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d86f      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b30      	cmp	r3, #48	@ 0x30
 8002f6e:	d064      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f70:	2b30      	cmp	r3, #48	@ 0x30
 8002f72:	d86b      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d060      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d867      	bhi.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05c      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d05a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x15a>
 8002f84:	e062      	b.n	800304c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f96:	f000 fb3b 	bl	8003610 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	609a      	str	r2, [r3, #8]
      break;
 8002fb2:	e04f      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fc4:	f000 fb24 	bl	8003610 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e03c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 fa98 	bl	800351c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2150      	movs	r1, #80	@ 0x50
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 faf1 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e02c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003006:	461a      	mov	r2, r3
 8003008:	f000 fab7 	bl	800357a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2160      	movs	r1, #96	@ 0x60
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fae1 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 8003018:	e01c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	461a      	mov	r2, r3
 8003028:	f000 fa78 	bl	800351c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2140      	movs	r1, #64	@ 0x40
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fad1 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 8003038:	e00c      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f000 fac8 	bl	80035da <TIM_ITRx_SetConfig>
      break;
 800304a:	e003      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e000      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a43      	ldr	r2, [pc, #268]	@ (8003190 <TIM_Base_SetConfig+0x120>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308e:	d00f      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a40      	ldr	r2, [pc, #256]	@ (8003194 <TIM_Base_SetConfig+0x124>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00b      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3f      	ldr	r2, [pc, #252]	@ (8003198 <TIM_Base_SetConfig+0x128>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3e      	ldr	r2, [pc, #248]	@ (800319c <TIM_Base_SetConfig+0x12c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3d      	ldr	r2, [pc, #244]	@ (80031a0 <TIM_Base_SetConfig+0x130>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d108      	bne.n	80030c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a32      	ldr	r2, [pc, #200]	@ (8003190 <TIM_Base_SetConfig+0x120>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d027      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003194 <TIM_Base_SetConfig+0x124>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d023      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003198 <TIM_Base_SetConfig+0x128>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2d      	ldr	r2, [pc, #180]	@ (800319c <TIM_Base_SetConfig+0x12c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2c      	ldr	r2, [pc, #176]	@ (80031a0 <TIM_Base_SetConfig+0x130>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d017      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2b      	ldr	r2, [pc, #172]	@ (80031a4 <TIM_Base_SetConfig+0x134>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <TIM_Base_SetConfig+0x138>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a29      	ldr	r2, [pc, #164]	@ (80031ac <TIM_Base_SetConfig+0x13c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a28      	ldr	r2, [pc, #160]	@ (80031b0 <TIM_Base_SetConfig+0x140>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a27      	ldr	r2, [pc, #156]	@ (80031b4 <TIM_Base_SetConfig+0x144>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a26      	ldr	r2, [pc, #152]	@ (80031b8 <TIM_Base_SetConfig+0x148>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a0e      	ldr	r2, [pc, #56]	@ (8003190 <TIM_Base_SetConfig+0x120>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0xf2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <TIM_Base_SetConfig+0x130>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d103      	bne.n	800316a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f043 0204 	orr.w	r2, r3, #4
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40010400 	.word	0x40010400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800
 80031b0:	40001800 	.word	0x40001800
 80031b4:	40001c00 	.word	0x40001c00
 80031b8:	40002000 	.word	0x40002000

080031bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 0201 	bic.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f023 0302 	bic.w	r3, r3, #2
 8003204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a20      	ldr	r2, [pc, #128]	@ (8003294 <TIM_OC1_SetConfig+0xd8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC1_SetConfig+0x64>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a1f      	ldr	r2, [pc, #124]	@ (8003298 <TIM_OC1_SetConfig+0xdc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10c      	bne.n	800323a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0308 	bic.w	r3, r3, #8
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <TIM_OC1_SetConfig+0xd8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d003      	beq.n	800324a <TIM_OC1_SetConfig+0x8e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <TIM_OC1_SetConfig+0xdc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d111      	bne.n	800326e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40010000 	.word	0x40010000
 8003298:	40010400 	.word	0x40010400

0800329c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 0210 	bic.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0320 	bic.w	r3, r3, #32
 80032e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <TIM_OC2_SetConfig+0xe4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_OC2_SetConfig+0x68>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <TIM_OC2_SetConfig+0xe8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800331e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <TIM_OC2_SetConfig+0xe4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_OC2_SetConfig+0x94>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a16      	ldr	r2, [pc, #88]	@ (8003384 <TIM_OC2_SetConfig+0xe8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d113      	bne.n	8003358 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000
 8003384:	40010400 	.word	0x40010400

08003388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a21      	ldr	r2, [pc, #132]	@ (8003468 <TIM_OC3_SetConfig+0xe0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_OC3_SetConfig+0x66>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a20      	ldr	r2, [pc, #128]	@ (800346c <TIM_OC3_SetConfig+0xe4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10d      	bne.n	800340a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a16      	ldr	r2, [pc, #88]	@ (8003468 <TIM_OC3_SetConfig+0xe0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_OC3_SetConfig+0x92>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a15      	ldr	r2, [pc, #84]	@ (800346c <TIM_OC3_SetConfig+0xe4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40010000 	.word	0x40010000
 800346c:	40010400 	.word	0x40010400

08003470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <TIM_OC4_SetConfig+0xa4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_OC4_SetConfig+0x68>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a11      	ldr	r2, [pc, #68]	@ (8003518 <TIM_OC4_SetConfig+0xa8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d109      	bne.n	80034ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	019b      	lsls	r3, r3, #6
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40010400 	.word	0x40010400

0800351c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 030a 	bic.w	r3, r3, #10
 8003558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357a:	b480      	push	{r7}
 800357c:	b087      	sub	sp, #28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f023 0210 	bic.w	r2, r3, #16
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f043 0307 	orr.w	r3, r3, #7
 80035fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800362a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	021a      	lsls	r2, r3, #8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	431a      	orrs	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2201      	movs	r2, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1a      	ldr	r2, [r3, #32]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	43db      	mvns	r3, r3
 8003672:	401a      	ands	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1a      	ldr	r2, [r3, #32]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e05a      	b.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003700:	d01d      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a17      	ldr	r2, [pc, #92]	@ (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a15      	ldr	r2, [pc, #84]	@ (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40010400 	.word	0x40010400
 800378c:	40014000 	.word	0x40014000
 8003790:	40001800 	.word	0x40001800

08003794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e03d      	b.n	800382c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e042      	b.n	80038d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd ff82 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800387a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fcef 	bl	8004260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d112      	bne.n	8003918 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_UART_Receive_IT+0x26>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00b      	b.n	800391a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	461a      	mov	r2, r3
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fad2 	bl	8003eb8 <UART_Start_Receive_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	e000      	b.n	800391a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b0ba      	sub	sp, #232	@ 0xe8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_UART_IRQHandler+0x66>
 8003976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fbae 	bl	80040e4 <UART_Receive_IT>
      return;
 8003988:	e273      	b.n	8003e72 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800398a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80de 	beq.w	8003b50 <HAL_UART_IRQHandler+0x22c>
 8003994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80d1 	beq.w	8003b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_UART_IRQHandler+0xae>
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xd2>
 80039de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xf6>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f043 0204 	orr.w	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <HAL_UART_IRQHandler+0x126>
 8003a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f043 0208 	orr.w	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 820a 	beq.w	8003e68 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_UART_IRQHandler+0x14e>
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb39 	bl	80040e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <HAL_UART_IRQHandler+0x17a>
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d04f      	beq.n	8003b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa44 	bl	8003f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aae:	2b40      	cmp	r3, #64	@ 0x40
 8003ab0:	d141      	bne.n	8003b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ade:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d9      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d013      	beq.n	8003b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	4a8a      	ldr	r2, [pc, #552]	@ (8003d34 <HAL_UART_IRQHandler+0x410>)
 8003b0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe f967 	bl	8001de6 <HAL_DMA_Abort_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e00e      	b.n	8003b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9ac 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e00a      	b.n	8003b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9a8 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e006      	b.n	8003b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9a4 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b4a:	e18d      	b.n	8003e68 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	bf00      	nop
    return;
 8003b4e:	e18b      	b.n	8003e68 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	f040 8167 	bne.w	8003e28 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8160 	beq.w	8003e28 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8159 	beq.w	8003e28 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b40      	cmp	r3, #64	@ 0x40
 8003b98:	f040 80ce 	bne.w	8003d38 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a9 	beq.w	8003d04 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	f080 80a2 	bcs.w	8003d04 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd2:	f000 8088 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1d9      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e1      	bne.n	8003c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e3      	bne.n	8003c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb6:	f023 0310 	bic.w	r3, r3, #16
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e3      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe f810 	bl	8001d06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f8cf 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003d02:	e0b3      	b.n	8003e6c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f040 80ad 	bne.w	8003e6c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1c:	f040 80a6 	bne.w	8003e6c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8b7 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
      return;
 8003d32:	e09b      	b.n	8003e6c <HAL_UART_IRQHandler+0x548>
 8003d34:	08003ff3 	.word	0x08003ff3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 808e 	beq.w	8003e70 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8089 	beq.w	8003e70 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	623b      	str	r3, [r7, #32]
   return(result);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e3      	bne.n	8003d96 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e00:	61fa      	str	r2, [r7, #28]
 8003e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f83d 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e26:	e023      	b.n	8003e70 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_UART_IRQHandler+0x524>
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8e7 	bl	8004014 <UART_Transmit_IT>
    return;
 8003e46:	e014      	b.n	8003e72 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <HAL_UART_IRQHandler+0x54e>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f927 	bl	80040b4 <UART_EndTransmit_IT>
    return;
 8003e66:	e004      	b.n	8003e72 <HAL_UART_IRQHandler+0x54e>
    return;
 8003e68:	bf00      	nop
 8003e6a:	e002      	b.n	8003e72 <HAL_UART_IRQHandler+0x54e>
      return;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <HAL_UART_IRQHandler+0x54e>
      return;
 8003e70:	bf00      	nop
  }
}
 8003e72:	37e8      	adds	r7, #232	@ 0xe8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2222      	movs	r2, #34	@ 0x22
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003efc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0220 	orr.w	r2, r2, #32
 8003f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b095      	sub	sp, #84	@ 0x54
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f54:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d119      	bne.n	8003fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0310 	bic.w	r3, r3, #16
 8003fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc4:	61ba      	str	r2, [r7, #24]
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fe6:	bf00      	nop
 8003fe8:	3754      	adds	r7, #84	@ 0x54
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff ff40 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b21      	cmp	r3, #33	@ 0x21
 8004026:	d13e      	bne.n	80040a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004030:	d114      	bne.n	800405c <UART_Transmit_IT+0x48>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d110      	bne.n	800405c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]
 800405a:	e008      	b.n	800406e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6211      	str	r1, [r2, #32]
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4619      	mov	r1, r3
 800407c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fecf 	bl	8003e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08c      	sub	sp, #48	@ 0x30
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b22      	cmp	r3, #34	@ 0x22
 80040fe:	f040 80aa 	bne.w	8004256 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410a:	d115      	bne.n	8004138 <UART_Receive_IT+0x54>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d111      	bne.n	8004138 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	b29a      	uxth	r2, r3
 8004128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28
 8004136:	e024      	b.n	8004182 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004146:	d007      	beq.n	8004158 <UART_Receive_IT+0x74>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <UART_Receive_IT+0x82>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e008      	b.n	8004178 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004172:	b2da      	uxtb	r2, r3
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004176:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29b      	uxth	r3, r3
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4619      	mov	r1, r3
 8004190:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004192:	2b00      	cmp	r3, #0
 8004194:	d15d      	bne.n	8004252 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0220 	bic.w	r2, r2, #32
 80041a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d135      	bne.n	8004248 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	613b      	str	r3, [r7, #16]
   return(result);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004202:	623a      	str	r2, [r7, #32]
 8004204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e5      	bne.n	80041e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b10      	cmp	r3, #16
 8004222:	d10a      	bne.n	800423a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fe2d 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
 8004246:	e002      	b.n	800424e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7fc ff1b 	bl	8001084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e002      	b.n	8004258 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3730      	adds	r7, #48	@ 0x30
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b0c0      	sub	sp, #256	@ 0x100
 8004266:	af00      	add	r7, sp, #0
 8004268:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	68d9      	ldr	r1, [r3, #12]
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	ea40 0301 	orr.w	r3, r0, r1
 8004288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	431a      	orrs	r2, r3
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042b8:	f021 010c 	bic.w	r1, r1, #12
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042c6:	430b      	orrs	r3, r1
 80042c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	6999      	ldr	r1, [r3, #24]
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	ea40 0301 	orr.w	r3, r0, r1
 80042e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b8f      	ldr	r3, [pc, #572]	@ (800452c <UART_SetConfig+0x2cc>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d005      	beq.n	8004300 <UART_SetConfig+0xa0>
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004530 <UART_SetConfig+0x2d0>)
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d104      	bne.n	800430a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fba8 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8004304:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004308:	e003      	b.n	8004312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430a:	f7fe fb8f 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 800430e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431c:	f040 810c 	bne.w	8004538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800432a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800432e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004332:	4622      	mov	r2, r4
 8004334:	462b      	mov	r3, r5
 8004336:	1891      	adds	r1, r2, r2
 8004338:	65b9      	str	r1, [r7, #88]	@ 0x58
 800433a:	415b      	adcs	r3, r3
 800433c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800433e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004342:	4621      	mov	r1, r4
 8004344:	eb12 0801 	adds.w	r8, r2, r1
 8004348:	4629      	mov	r1, r5
 800434a:	eb43 0901 	adc.w	r9, r3, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004362:	4690      	mov	r8, r2
 8004364:	4699      	mov	r9, r3
 8004366:	4623      	mov	r3, r4
 8004368:	eb18 0303 	adds.w	r3, r8, r3
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004370:	462b      	mov	r3, r5
 8004372:	eb49 0303 	adc.w	r3, r9, r3
 8004376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004386:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800438a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800438e:	460b      	mov	r3, r1
 8004390:	18db      	adds	r3, r3, r3
 8004392:	653b      	str	r3, [r7, #80]	@ 0x50
 8004394:	4613      	mov	r3, r2
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	657b      	str	r3, [r7, #84]	@ 0x54
 800439c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043a4:	f7fc fc48 	bl	8000c38 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4b61      	ldr	r3, [pc, #388]	@ (8004534 <UART_SetConfig+0x2d4>)
 80043ae:	fba3 2302 	umull	r2, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	011c      	lsls	r4, r3, #4
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043d0:	415b      	adcs	r3, r3
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043d8:	4641      	mov	r1, r8
 80043da:	eb12 0a01 	adds.w	sl, r2, r1
 80043de:	4649      	mov	r1, r9
 80043e0:	eb43 0b01 	adc.w	fp, r3, r1
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f8:	4692      	mov	sl, r2
 80043fa:	469b      	mov	fp, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004406:	464b      	mov	r3, r9
 8004408:	eb4b 0303 	adc.w	r3, fp, r3
 800440c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800441c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004424:	460b      	mov	r3, r1
 8004426:	18db      	adds	r3, r3, r3
 8004428:	643b      	str	r3, [r7, #64]	@ 0x40
 800442a:	4613      	mov	r3, r2
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	647b      	str	r3, [r7, #68]	@ 0x44
 8004432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800443a:	f7fc fbfd 	bl	8000c38 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b3b      	ldr	r3, [pc, #236]	@ (8004534 <UART_SetConfig+0x2d4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	@ 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800445a:	4b36      	ldr	r3, [pc, #216]	@ (8004534 <UART_SetConfig+0x2d4>)
 800445c:	fba3 2302 	umull	r2, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004468:	441c      	add	r4, r3
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	1891      	adds	r1, r2, r2
 8004482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004484:	415b      	adcs	r3, r3
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800448c:	4641      	mov	r1, r8
 800448e:	1851      	adds	r1, r2, r1
 8004490:	6339      	str	r1, [r7, #48]	@ 0x30
 8004492:	4649      	mov	r1, r9
 8004494:	414b      	adcs	r3, r1
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044a4:	4659      	mov	r1, fp
 80044a6:	00cb      	lsls	r3, r1, #3
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ae:	4651      	mov	r1, sl
 80044b0:	00ca      	lsls	r2, r1, #3
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	4642      	mov	r2, r8
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c0:	464b      	mov	r3, r9
 80044c2:	460a      	mov	r2, r1
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044e0:	460b      	mov	r3, r1
 80044e2:	18db      	adds	r3, r3, r3
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044e6:	4613      	mov	r3, r2
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044f6:	f7fc fb9f 	bl	8000c38 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <UART_SetConfig+0x2d4>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	@ 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	@ 0x32
 8004512:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <UART_SetConfig+0x2d4>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 0207 	and.w	r2, r3, #7
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4422      	add	r2, r4
 8004526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004528:	e106      	b.n	8004738 <UART_SetConfig+0x4d8>
 800452a:	bf00      	nop
 800452c:	40011000 	.word	0x40011000
 8004530:	40011400 	.word	0x40011400
 8004534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004542:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800454a:	4642      	mov	r2, r8
 800454c:	464b      	mov	r3, r9
 800454e:	1891      	adds	r1, r2, r2
 8004550:	6239      	str	r1, [r7, #32]
 8004552:	415b      	adcs	r3, r3
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
 8004556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455a:	4641      	mov	r1, r8
 800455c:	1854      	adds	r4, r2, r1
 800455e:	4649      	mov	r1, r9
 8004560:	eb43 0501 	adc.w	r5, r3, r1
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	00eb      	lsls	r3, r5, #3
 800456e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004572:	00e2      	lsls	r2, r4, #3
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	4643      	mov	r3, r8
 800457a:	18e3      	adds	r3, r4, r3
 800457c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004580:	464b      	mov	r3, r9
 8004582:	eb45 0303 	adc.w	r3, r5, r3
 8004586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045a6:	4629      	mov	r1, r5
 80045a8:	008b      	lsls	r3, r1, #2
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b0:	4621      	mov	r1, r4
 80045b2:	008a      	lsls	r2, r1, #2
 80045b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045b8:	f7fc fb3e 	bl	8000c38 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4b60      	ldr	r3, [pc, #384]	@ (8004744 <UART_SetConfig+0x4e4>)
 80045c2:	fba3 2302 	umull	r2, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	011c      	lsls	r4, r3, #4
 80045ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	1891      	adds	r1, r2, r2
 80045e2:	61b9      	str	r1, [r7, #24]
 80045e4:	415b      	adcs	r3, r3
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ec:	4641      	mov	r1, r8
 80045ee:	1851      	adds	r1, r2, r1
 80045f0:	6139      	str	r1, [r7, #16]
 80045f2:	4649      	mov	r1, r9
 80045f4:	414b      	adcs	r3, r1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004604:	4659      	mov	r1, fp
 8004606:	00cb      	lsls	r3, r1, #3
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460e:	4651      	mov	r1, sl
 8004610:	00ca      	lsls	r2, r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	4603      	mov	r3, r0
 8004618:	4642      	mov	r2, r8
 800461a:	189b      	adds	r3, r3, r2
 800461c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004644:	4649      	mov	r1, r9
 8004646:	008b      	lsls	r3, r1, #2
 8004648:	4641      	mov	r1, r8
 800464a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464e:	4641      	mov	r1, r8
 8004650:	008a      	lsls	r2, r1, #2
 8004652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004656:	f7fc faef 	bl	8000c38 <__aeabi_uldivmod>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4611      	mov	r1, r2
 8004660:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004662:	fba3 2301 	umull	r2, r3, r3, r1
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2264      	movs	r2, #100	@ 0x64
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	1acb      	subs	r3, r1, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	@ 0x32
 8004674:	4a33      	ldr	r2, [pc, #204]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004680:	441c      	add	r4, r3
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	673b      	str	r3, [r7, #112]	@ 0x70
 800468a:	677a      	str	r2, [r7, #116]	@ 0x74
 800468c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	1891      	adds	r1, r2, r2
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	415b      	adcs	r3, r3
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a0:	4641      	mov	r1, r8
 80046a2:	1851      	adds	r1, r2, r1
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	4649      	mov	r1, r9
 80046a8:	414b      	adcs	r3, r1
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046b8:	4659      	mov	r1, fp
 80046ba:	00cb      	lsls	r3, r1, #3
 80046bc:	4651      	mov	r1, sl
 80046be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c2:	4651      	mov	r1, sl
 80046c4:	00ca      	lsls	r2, r1, #3
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	4642      	mov	r2, r8
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046d2:	464b      	mov	r3, r9
 80046d4:	460a      	mov	r2, r1
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046f4:	4649      	mov	r1, r9
 80046f6:	008b      	lsls	r3, r1, #2
 80046f8:	4641      	mov	r1, r8
 80046fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fe:	4641      	mov	r1, r8
 8004700:	008a      	lsls	r2, r1, #2
 8004702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004706:	f7fc fa97 	bl	8000c38 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004710:	fba3 1302 	umull	r1, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	2164      	movs	r1, #100	@ 0x64
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	3332      	adds	r3, #50	@ 0x32
 8004722:	4a08      	ldr	r2, [pc, #32]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4422      	add	r2, r4
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004744:	51eb851f 	.word	0x51eb851f

08004748 <_scanf_float>:
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	b087      	sub	sp, #28
 800474e:	4617      	mov	r7, r2
 8004750:	9303      	str	r3, [sp, #12]
 8004752:	688b      	ldr	r3, [r1, #8]
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800475a:	bf81      	itttt	hi
 800475c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004760:	eb03 0b05 	addhi.w	fp, r3, r5
 8004764:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004768:	608b      	strhi	r3, [r1, #8]
 800476a:	680b      	ldr	r3, [r1, #0]
 800476c:	460a      	mov	r2, r1
 800476e:	f04f 0500 	mov.w	r5, #0
 8004772:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004776:	f842 3b1c 	str.w	r3, [r2], #28
 800477a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800477e:	4680      	mov	r8, r0
 8004780:	460c      	mov	r4, r1
 8004782:	bf98      	it	ls
 8004784:	f04f 0b00 	movls.w	fp, #0
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	4616      	mov	r6, r2
 800478c:	46aa      	mov	sl, r5
 800478e:	46a9      	mov	r9, r5
 8004790:	9502      	str	r5, [sp, #8]
 8004792:	68a2      	ldr	r2, [r4, #8]
 8004794:	b152      	cbz	r2, 80047ac <_scanf_float+0x64>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b4e      	cmp	r3, #78	@ 0x4e
 800479c:	d864      	bhi.n	8004868 <_scanf_float+0x120>
 800479e:	2b40      	cmp	r3, #64	@ 0x40
 80047a0:	d83c      	bhi.n	800481c <_scanf_float+0xd4>
 80047a2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80047a6:	b2c8      	uxtb	r0, r1
 80047a8:	280e      	cmp	r0, #14
 80047aa:	d93a      	bls.n	8004822 <_scanf_float+0xda>
 80047ac:	f1b9 0f00 	cmp.w	r9, #0
 80047b0:	d003      	beq.n	80047ba <_scanf_float+0x72>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047be:	f1ba 0f01 	cmp.w	sl, #1
 80047c2:	f200 8117 	bhi.w	80049f4 <_scanf_float+0x2ac>
 80047c6:	9b01      	ldr	r3, [sp, #4]
 80047c8:	429e      	cmp	r6, r3
 80047ca:	f200 8108 	bhi.w	80049de <_scanf_float+0x296>
 80047ce:	2001      	movs	r0, #1
 80047d0:	b007      	add	sp, #28
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80047da:	2a0d      	cmp	r2, #13
 80047dc:	d8e6      	bhi.n	80047ac <_scanf_float+0x64>
 80047de:	a101      	add	r1, pc, #4	@ (adr r1, 80047e4 <_scanf_float+0x9c>)
 80047e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047e4:	0800492b 	.word	0x0800492b
 80047e8:	080047ad 	.word	0x080047ad
 80047ec:	080047ad 	.word	0x080047ad
 80047f0:	080047ad 	.word	0x080047ad
 80047f4:	0800498b 	.word	0x0800498b
 80047f8:	08004963 	.word	0x08004963
 80047fc:	080047ad 	.word	0x080047ad
 8004800:	080047ad 	.word	0x080047ad
 8004804:	08004939 	.word	0x08004939
 8004808:	080047ad 	.word	0x080047ad
 800480c:	080047ad 	.word	0x080047ad
 8004810:	080047ad 	.word	0x080047ad
 8004814:	080047ad 	.word	0x080047ad
 8004818:	080048f1 	.word	0x080048f1
 800481c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004820:	e7db      	b.n	80047da <_scanf_float+0x92>
 8004822:	290e      	cmp	r1, #14
 8004824:	d8c2      	bhi.n	80047ac <_scanf_float+0x64>
 8004826:	a001      	add	r0, pc, #4	@ (adr r0, 800482c <_scanf_float+0xe4>)
 8004828:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800482c:	080048e1 	.word	0x080048e1
 8004830:	080047ad 	.word	0x080047ad
 8004834:	080048e1 	.word	0x080048e1
 8004838:	08004977 	.word	0x08004977
 800483c:	080047ad 	.word	0x080047ad
 8004840:	08004889 	.word	0x08004889
 8004844:	080048c7 	.word	0x080048c7
 8004848:	080048c7 	.word	0x080048c7
 800484c:	080048c7 	.word	0x080048c7
 8004850:	080048c7 	.word	0x080048c7
 8004854:	080048c7 	.word	0x080048c7
 8004858:	080048c7 	.word	0x080048c7
 800485c:	080048c7 	.word	0x080048c7
 8004860:	080048c7 	.word	0x080048c7
 8004864:	080048c7 	.word	0x080048c7
 8004868:	2b6e      	cmp	r3, #110	@ 0x6e
 800486a:	d809      	bhi.n	8004880 <_scanf_float+0x138>
 800486c:	2b60      	cmp	r3, #96	@ 0x60
 800486e:	d8b2      	bhi.n	80047d6 <_scanf_float+0x8e>
 8004870:	2b54      	cmp	r3, #84	@ 0x54
 8004872:	d07b      	beq.n	800496c <_scanf_float+0x224>
 8004874:	2b59      	cmp	r3, #89	@ 0x59
 8004876:	d199      	bne.n	80047ac <_scanf_float+0x64>
 8004878:	2d07      	cmp	r5, #7
 800487a:	d197      	bne.n	80047ac <_scanf_float+0x64>
 800487c:	2508      	movs	r5, #8
 800487e:	e02c      	b.n	80048da <_scanf_float+0x192>
 8004880:	2b74      	cmp	r3, #116	@ 0x74
 8004882:	d073      	beq.n	800496c <_scanf_float+0x224>
 8004884:	2b79      	cmp	r3, #121	@ 0x79
 8004886:	e7f6      	b.n	8004876 <_scanf_float+0x12e>
 8004888:	6821      	ldr	r1, [r4, #0]
 800488a:	05c8      	lsls	r0, r1, #23
 800488c:	d51b      	bpl.n	80048c6 <_scanf_float+0x17e>
 800488e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004892:	6021      	str	r1, [r4, #0]
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	f1bb 0f00 	cmp.w	fp, #0
 800489c:	d003      	beq.n	80048a6 <_scanf_float+0x15e>
 800489e:	3201      	adds	r2, #1
 80048a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80048a4:	60a2      	str	r2, [r4, #8]
 80048a6:	68a3      	ldr	r3, [r4, #8]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	60a3      	str	r3, [r4, #8]
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	3301      	adds	r3, #1
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	f340 8087 	ble.w	80049cc <_scanf_float+0x284>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	e765      	b.n	8004792 <_scanf_float+0x4a>
 80048c6:	eb1a 0105 	adds.w	r1, sl, r5
 80048ca:	f47f af6f 	bne.w	80047ac <_scanf_float+0x64>
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80048d4:	6022      	str	r2, [r4, #0]
 80048d6:	460d      	mov	r5, r1
 80048d8:	468a      	mov	sl, r1
 80048da:	f806 3b01 	strb.w	r3, [r6], #1
 80048de:	e7e2      	b.n	80048a6 <_scanf_float+0x15e>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	0610      	lsls	r0, r2, #24
 80048e4:	f57f af62 	bpl.w	80047ac <_scanf_float+0x64>
 80048e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	e7f4      	b.n	80048da <_scanf_float+0x192>
 80048f0:	f1ba 0f00 	cmp.w	sl, #0
 80048f4:	d10e      	bne.n	8004914 <_scanf_float+0x1cc>
 80048f6:	f1b9 0f00 	cmp.w	r9, #0
 80048fa:	d10e      	bne.n	800491a <_scanf_float+0x1d2>
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004902:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004906:	d108      	bne.n	800491a <_scanf_float+0x1d2>
 8004908:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800490c:	6022      	str	r2, [r4, #0]
 800490e:	f04f 0a01 	mov.w	sl, #1
 8004912:	e7e2      	b.n	80048da <_scanf_float+0x192>
 8004914:	f1ba 0f02 	cmp.w	sl, #2
 8004918:	d055      	beq.n	80049c6 <_scanf_float+0x27e>
 800491a:	2d01      	cmp	r5, #1
 800491c:	d002      	beq.n	8004924 <_scanf_float+0x1dc>
 800491e:	2d04      	cmp	r5, #4
 8004920:	f47f af44 	bne.w	80047ac <_scanf_float+0x64>
 8004924:	3501      	adds	r5, #1
 8004926:	b2ed      	uxtb	r5, r5
 8004928:	e7d7      	b.n	80048da <_scanf_float+0x192>
 800492a:	f1ba 0f01 	cmp.w	sl, #1
 800492e:	f47f af3d 	bne.w	80047ac <_scanf_float+0x64>
 8004932:	f04f 0a02 	mov.w	sl, #2
 8004936:	e7d0      	b.n	80048da <_scanf_float+0x192>
 8004938:	b97d      	cbnz	r5, 800495a <_scanf_float+0x212>
 800493a:	f1b9 0f00 	cmp.w	r9, #0
 800493e:	f47f af38 	bne.w	80047b2 <_scanf_float+0x6a>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004948:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800494c:	f040 8108 	bne.w	8004b60 <_scanf_float+0x418>
 8004950:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	2501      	movs	r5, #1
 8004958:	e7bf      	b.n	80048da <_scanf_float+0x192>
 800495a:	2d03      	cmp	r5, #3
 800495c:	d0e2      	beq.n	8004924 <_scanf_float+0x1dc>
 800495e:	2d05      	cmp	r5, #5
 8004960:	e7de      	b.n	8004920 <_scanf_float+0x1d8>
 8004962:	2d02      	cmp	r5, #2
 8004964:	f47f af22 	bne.w	80047ac <_scanf_float+0x64>
 8004968:	2503      	movs	r5, #3
 800496a:	e7b6      	b.n	80048da <_scanf_float+0x192>
 800496c:	2d06      	cmp	r5, #6
 800496e:	f47f af1d 	bne.w	80047ac <_scanf_float+0x64>
 8004972:	2507      	movs	r5, #7
 8004974:	e7b1      	b.n	80048da <_scanf_float+0x192>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	0591      	lsls	r1, r2, #22
 800497a:	f57f af17 	bpl.w	80047ac <_scanf_float+0x64>
 800497e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004982:	6022      	str	r2, [r4, #0]
 8004984:	f8cd 9008 	str.w	r9, [sp, #8]
 8004988:	e7a7      	b.n	80048da <_scanf_float+0x192>
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004990:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004994:	d006      	beq.n	80049a4 <_scanf_float+0x25c>
 8004996:	0550      	lsls	r0, r2, #21
 8004998:	f57f af08 	bpl.w	80047ac <_scanf_float+0x64>
 800499c:	f1b9 0f00 	cmp.w	r9, #0
 80049a0:	f000 80de 	beq.w	8004b60 <_scanf_float+0x418>
 80049a4:	0591      	lsls	r1, r2, #22
 80049a6:	bf58      	it	pl
 80049a8:	9902      	ldrpl	r1, [sp, #8]
 80049aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80049ae:	bf58      	it	pl
 80049b0:	eba9 0101 	subpl.w	r1, r9, r1
 80049b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80049b8:	bf58      	it	pl
 80049ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049be:	6022      	str	r2, [r4, #0]
 80049c0:	f04f 0900 	mov.w	r9, #0
 80049c4:	e789      	b.n	80048da <_scanf_float+0x192>
 80049c6:	f04f 0a03 	mov.w	sl, #3
 80049ca:	e786      	b.n	80048da <_scanf_float+0x192>
 80049cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80049d0:	4639      	mov	r1, r7
 80049d2:	4640      	mov	r0, r8
 80049d4:	4798      	blx	r3
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f aedb 	beq.w	8004792 <_scanf_float+0x4a>
 80049dc:	e6e6      	b.n	80047ac <_scanf_float+0x64>
 80049de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049e6:	463a      	mov	r2, r7
 80049e8:	4640      	mov	r0, r8
 80049ea:	4798      	blx	r3
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	e6e8      	b.n	80047c6 <_scanf_float+0x7e>
 80049f4:	1e6b      	subs	r3, r5, #1
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d824      	bhi.n	8004a44 <_scanf_float+0x2fc>
 80049fa:	2d02      	cmp	r5, #2
 80049fc:	d836      	bhi.n	8004a6c <_scanf_float+0x324>
 80049fe:	9b01      	ldr	r3, [sp, #4]
 8004a00:	429e      	cmp	r6, r3
 8004a02:	f67f aee4 	bls.w	80047ce <_scanf_float+0x86>
 8004a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a0e:	463a      	mov	r2, r7
 8004a10:	4640      	mov	r0, r8
 8004a12:	4798      	blx	r3
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	6123      	str	r3, [r4, #16]
 8004a1a:	e7f0      	b.n	80049fe <_scanf_float+0x2b6>
 8004a1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a20:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004a24:	463a      	mov	r2, r7
 8004a26:	4640      	mov	r0, r8
 8004a28:	4798      	blx	r3
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a34:	fa5f fa8a 	uxtb.w	sl, sl
 8004a38:	f1ba 0f02 	cmp.w	sl, #2
 8004a3c:	d1ee      	bne.n	8004a1c <_scanf_float+0x2d4>
 8004a3e:	3d03      	subs	r5, #3
 8004a40:	b2ed      	uxtb	r5, r5
 8004a42:	1b76      	subs	r6, r6, r5
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	05da      	lsls	r2, r3, #23
 8004a48:	d530      	bpl.n	8004aac <_scanf_float+0x364>
 8004a4a:	055b      	lsls	r3, r3, #21
 8004a4c:	d511      	bpl.n	8004a72 <_scanf_float+0x32a>
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	429e      	cmp	r6, r3
 8004a52:	f67f aebc 	bls.w	80047ce <_scanf_float+0x86>
 8004a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a5e:	463a      	mov	r2, r7
 8004a60:	4640      	mov	r0, r8
 8004a62:	4798      	blx	r3
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	e7f0      	b.n	8004a4e <_scanf_float+0x306>
 8004a6c:	46aa      	mov	sl, r5
 8004a6e:	46b3      	mov	fp, r6
 8004a70:	e7de      	b.n	8004a30 <_scanf_float+0x2e8>
 8004a72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	2965      	cmp	r1, #101	@ 0x65
 8004a7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	d00c      	beq.n	8004aa0 <_scanf_float+0x358>
 8004a86:	2945      	cmp	r1, #69	@ 0x45
 8004a88:	d00a      	beq.n	8004aa0 <_scanf_float+0x358>
 8004a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a8e:	463a      	mov	r2, r7
 8004a90:	4640      	mov	r0, r8
 8004a92:	4798      	blx	r3
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	1eb5      	subs	r5, r6, #2
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004aa4:	463a      	mov	r2, r7
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4798      	blx	r3
 8004aaa:	462e      	mov	r6, r5
 8004aac:	6822      	ldr	r2, [r4, #0]
 8004aae:	f012 0210 	ands.w	r2, r2, #16
 8004ab2:	d001      	beq.n	8004ab8 <_scanf_float+0x370>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e68b      	b.n	80047d0 <_scanf_float+0x88>
 8004ab8:	7032      	strb	r2, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac4:	d11c      	bne.n	8004b00 <_scanf_float+0x3b8>
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	454b      	cmp	r3, r9
 8004aca:	eba3 0209 	sub.w	r2, r3, r9
 8004ace:	d123      	bne.n	8004b18 <_scanf_float+0x3d0>
 8004ad0:	9901      	ldr	r1, [sp, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	f001 f91b 	bl	8005d10 <_strtod_r>
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	6821      	ldr	r1, [r4, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f011 0f02 	tst.w	r1, #2
 8004ae4:	ec57 6b10 	vmov	r6, r7, d0
 8004ae8:	f103 0204 	add.w	r2, r3, #4
 8004aec:	d01f      	beq.n	8004b2e <_scanf_float+0x3e6>
 8004aee:	9903      	ldr	r1, [sp, #12]
 8004af0:	600a      	str	r2, [r1, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	e9c3 6700 	strd	r6, r7, [r3]
 8004af8:	68e3      	ldr	r3, [r4, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60e3      	str	r3, [r4, #12]
 8004afe:	e7d9      	b.n	8004ab4 <_scanf_float+0x36c>
 8004b00:	9b04      	ldr	r3, [sp, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0e4      	beq.n	8004ad0 <_scanf_float+0x388>
 8004b06:	9905      	ldr	r1, [sp, #20]
 8004b08:	230a      	movs	r3, #10
 8004b0a:	3101      	adds	r1, #1
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	f001 f97f 	bl	8005e10 <_strtol_r>
 8004b12:	9b04      	ldr	r3, [sp, #16]
 8004b14:	9e05      	ldr	r6, [sp, #20]
 8004b16:	1ac2      	subs	r2, r0, r3
 8004b18:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004b1c:	429e      	cmp	r6, r3
 8004b1e:	bf28      	it	cs
 8004b20:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004b24:	4910      	ldr	r1, [pc, #64]	@ (8004b68 <_scanf_float+0x420>)
 8004b26:	4630      	mov	r0, r6
 8004b28:	f000 f8e4 	bl	8004cf4 <siprintf>
 8004b2c:	e7d0      	b.n	8004ad0 <_scanf_float+0x388>
 8004b2e:	f011 0f04 	tst.w	r1, #4
 8004b32:	9903      	ldr	r1, [sp, #12]
 8004b34:	600a      	str	r2, [r1, #0]
 8004b36:	d1dc      	bne.n	8004af2 <_scanf_float+0x3aa>
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4630      	mov	r0, r6
 8004b40:	4639      	mov	r1, r7
 8004b42:	f7fb fff3 	bl	8000b2c <__aeabi_dcmpun>
 8004b46:	b128      	cbz	r0, 8004b54 <_scanf_float+0x40c>
 8004b48:	4808      	ldr	r0, [pc, #32]	@ (8004b6c <_scanf_float+0x424>)
 8004b4a:	f000 f9df 	bl	8004f0c <nanf>
 8004b4e:	ed85 0a00 	vstr	s0, [r5]
 8004b52:	e7d1      	b.n	8004af8 <_scanf_float+0x3b0>
 8004b54:	4630      	mov	r0, r6
 8004b56:	4639      	mov	r1, r7
 8004b58:	f7fc f81e 	bl	8000b98 <__aeabi_d2f>
 8004b5c:	6028      	str	r0, [r5, #0]
 8004b5e:	e7cb      	b.n	8004af8 <_scanf_float+0x3b0>
 8004b60:	f04f 0900 	mov.w	r9, #0
 8004b64:	e629      	b.n	80047ba <_scanf_float+0x72>
 8004b66:	bf00      	nop
 8004b68:	080084b4 	.word	0x080084b4
 8004b6c:	0800888b 	.word	0x0800888b

08004b70 <std>:
 8004b70:	2300      	movs	r3, #0
 8004b72:	b510      	push	{r4, lr}
 8004b74:	4604      	mov	r4, r0
 8004b76:	e9c0 3300 	strd	r3, r3, [r0]
 8004b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b7e:	6083      	str	r3, [r0, #8]
 8004b80:	8181      	strh	r1, [r0, #12]
 8004b82:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b84:	81c2      	strh	r2, [r0, #14]
 8004b86:	6183      	str	r3, [r0, #24]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	305c      	adds	r0, #92	@ 0x5c
 8004b8e:	f000 f940 	bl	8004e12 <memset>
 8004b92:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <std+0x58>)
 8004b94:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <std+0x5c>)
 8004b98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <std+0x60>)
 8004b9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <std+0x64>)
 8004ba0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <std+0x68>)
 8004ba4:	6224      	str	r4, [r4, #32]
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d006      	beq.n	8004bb8 <std+0x48>
 8004baa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bae:	4294      	cmp	r4, r2
 8004bb0:	d002      	beq.n	8004bb8 <std+0x48>
 8004bb2:	33d0      	adds	r3, #208	@ 0xd0
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d105      	bne.n	8004bc4 <std+0x54>
 8004bb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f000 b9a0 	b.w	8004f04 <__retarget_lock_init_recursive>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08004d89 	.word	0x08004d89
 8004bcc:	08004daf 	.word	0x08004daf
 8004bd0:	08004de7 	.word	0x08004de7
 8004bd4:	08004e0b 	.word	0x08004e0b
 8004bd8:	200003c0 	.word	0x200003c0

08004bdc <stdio_exit_handler>:
 8004bdc:	4a02      	ldr	r2, [pc, #8]	@ (8004be8 <stdio_exit_handler+0xc>)
 8004bde:	4903      	ldr	r1, [pc, #12]	@ (8004bec <stdio_exit_handler+0x10>)
 8004be0:	4803      	ldr	r0, [pc, #12]	@ (8004bf0 <stdio_exit_handler+0x14>)
 8004be2:	f000 b869 	b.w	8004cb8 <_fwalk_sglue>
 8004be6:	bf00      	nop
 8004be8:	2000000c 	.word	0x2000000c
 8004bec:	08006da1 	.word	0x08006da1
 8004bf0:	2000001c 	.word	0x2000001c

08004bf4 <cleanup_stdio>:
 8004bf4:	6841      	ldr	r1, [r0, #4]
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <cleanup_stdio+0x34>)
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	d001      	beq.n	8004c04 <cleanup_stdio+0x10>
 8004c00:	f002 f8ce 	bl	8006da0 <_fflush_r>
 8004c04:	68a1      	ldr	r1, [r4, #8]
 8004c06:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <cleanup_stdio+0x38>)
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d002      	beq.n	8004c12 <cleanup_stdio+0x1e>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f002 f8c7 	bl	8006da0 <_fflush_r>
 8004c12:	68e1      	ldr	r1, [r4, #12]
 8004c14:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <cleanup_stdio+0x3c>)
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d004      	beq.n	8004c24 <cleanup_stdio+0x30>
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	f002 b8be 	b.w	8006da0 <_fflush_r>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	200003c0 	.word	0x200003c0
 8004c2c:	20000428 	.word	0x20000428
 8004c30:	20000490 	.word	0x20000490

08004c34 <global_stdio_init.part.0>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <global_stdio_init.part.0+0x30>)
 8004c38:	4c0b      	ldr	r4, [pc, #44]	@ (8004c68 <global_stdio_init.part.0+0x34>)
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c6c <global_stdio_init.part.0+0x38>)
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	2200      	movs	r2, #0
 8004c42:	2104      	movs	r1, #4
 8004c44:	f7ff ff94 	bl	8004b70 <std>
 8004c48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	2109      	movs	r1, #9
 8004c50:	f7ff ff8e 	bl	8004b70 <std>
 8004c54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c58:	2202      	movs	r2, #2
 8004c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5e:	2112      	movs	r1, #18
 8004c60:	f7ff bf86 	b.w	8004b70 <std>
 8004c64:	200004f8 	.word	0x200004f8
 8004c68:	200003c0 	.word	0x200003c0
 8004c6c:	08004bdd 	.word	0x08004bdd

08004c70 <__sfp_lock_acquire>:
 8004c70:	4801      	ldr	r0, [pc, #4]	@ (8004c78 <__sfp_lock_acquire+0x8>)
 8004c72:	f000 b948 	b.w	8004f06 <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	20000501 	.word	0x20000501

08004c7c <__sfp_lock_release>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__sfp_lock_release+0x8>)
 8004c7e:	f000 b943 	b.w	8004f08 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000501 	.word	0x20000501

08004c88 <__sinit>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	f7ff fff0 	bl	8004c70 <__sfp_lock_acquire>
 8004c90:	6a23      	ldr	r3, [r4, #32]
 8004c92:	b11b      	cbz	r3, 8004c9c <__sinit+0x14>
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f7ff bff0 	b.w	8004c7c <__sfp_lock_release>
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <__sinit+0x28>)
 8004c9e:	6223      	str	r3, [r4, #32]
 8004ca0:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <__sinit+0x2c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f5      	bne.n	8004c94 <__sinit+0xc>
 8004ca8:	f7ff ffc4 	bl	8004c34 <global_stdio_init.part.0>
 8004cac:	e7f2      	b.n	8004c94 <__sinit+0xc>
 8004cae:	bf00      	nop
 8004cb0:	08004bf5 	.word	0x08004bf5
 8004cb4:	200004f8 	.word	0x200004f8

08004cb8 <_fwalk_sglue>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	4688      	mov	r8, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8004ccc:	d505      	bpl.n	8004cda <_fwalk_sglue+0x22>
 8004cce:	6824      	ldr	r4, [r4, #0]
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	d1f7      	bne.n	8004cc4 <_fwalk_sglue+0xc>
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d907      	bls.n	8004cf0 <_fwalk_sglue+0x38>
 8004ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d003      	beq.n	8004cf0 <_fwalk_sglue+0x38>
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	4306      	orrs	r6, r0
 8004cf0:	3568      	adds	r5, #104	@ 0x68
 8004cf2:	e7e9      	b.n	8004cc8 <_fwalk_sglue+0x10>

08004cf4 <siprintf>:
 8004cf4:	b40e      	push	{r1, r2, r3}
 8004cf6:	b500      	push	{lr}
 8004cf8:	b09c      	sub	sp, #112	@ 0x70
 8004cfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cfc:	9002      	str	r0, [sp, #8]
 8004cfe:	9006      	str	r0, [sp, #24]
 8004d00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d04:	4809      	ldr	r0, [pc, #36]	@ (8004d2c <siprintf+0x38>)
 8004d06:	9107      	str	r1, [sp, #28]
 8004d08:	9104      	str	r1, [sp, #16]
 8004d0a:	4909      	ldr	r1, [pc, #36]	@ (8004d30 <siprintf+0x3c>)
 8004d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d10:	9105      	str	r1, [sp, #20]
 8004d12:	6800      	ldr	r0, [r0, #0]
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	a902      	add	r1, sp, #8
 8004d18:	f001 f8d8 	bl	8005ecc <_svfiprintf_r>
 8004d1c:	9b02      	ldr	r3, [sp, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	b01c      	add	sp, #112	@ 0x70
 8004d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d28:	b003      	add	sp, #12
 8004d2a:	4770      	bx	lr
 8004d2c:	20000018 	.word	0x20000018
 8004d30:	ffff0208 	.word	0xffff0208

08004d34 <siscanf>:
 8004d34:	b40e      	push	{r1, r2, r3}
 8004d36:	b530      	push	{r4, r5, lr}
 8004d38:	b09c      	sub	sp, #112	@ 0x70
 8004d3a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004d3c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004d40:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	f7fb fa40 	bl	80001d0 <strlen>
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <siscanf+0x4c>)
 8004d52:	9003      	str	r0, [sp, #12]
 8004d54:	9007      	str	r0, [sp, #28]
 8004d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d58:	480a      	ldr	r0, [pc, #40]	@ (8004d84 <siscanf+0x50>)
 8004d5a:	9401      	str	r4, [sp, #4]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d60:	9314      	str	r3, [sp, #80]	@ 0x50
 8004d62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	a902      	add	r1, sp, #8
 8004d70:	6800      	ldr	r0, [r0, #0]
 8004d72:	f001 f9ff 	bl	8006174 <__ssvfiscanf_r>
 8004d76:	b01c      	add	sp, #112	@ 0x70
 8004d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d7c:	b003      	add	sp, #12
 8004d7e:	4770      	bx	lr
 8004d80:	08004dab 	.word	0x08004dab
 8004d84:	20000018 	.word	0x20000018

08004d88 <__sread>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	f000 f86a 	bl	8004e68 <_read_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bfab      	itete	ge
 8004d98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d9c:	181b      	addge	r3, r3, r0
 8004d9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004da2:	bfac      	ite	ge
 8004da4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004da6:	81a3      	strhlt	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__seofread>:
 8004daa:	2000      	movs	r0, #0
 8004dac:	4770      	bx	lr

08004dae <__swrite>:
 8004dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	461f      	mov	r7, r3
 8004db4:	898b      	ldrh	r3, [r1, #12]
 8004db6:	05db      	lsls	r3, r3, #23
 8004db8:	4605      	mov	r5, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	d505      	bpl.n	8004dcc <__swrite+0x1e>
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f000 f83c 	bl	8004e44 <_lseek_r>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	463b      	mov	r3, r7
 8004ddc:	4628      	mov	r0, r5
 8004dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	f000 b853 	b.w	8004e8c <_write_r>

08004de6 <__sseek>:
 8004de6:	b510      	push	{r4, lr}
 8004de8:	460c      	mov	r4, r1
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 f829 	bl	8004e44 <_lseek_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	bf15      	itete	ne
 8004df8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e02:	81a3      	strheq	r3, [r4, #12]
 8004e04:	bf18      	it	ne
 8004e06:	81a3      	strhne	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__sclose>:
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 b809 	b.w	8004e24 <_close_r>

08004e12 <memset>:
 8004e12:	4402      	add	r2, r0
 8004e14:	4603      	mov	r3, r0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d100      	bne.n	8004e1c <memset+0xa>
 8004e1a:	4770      	bx	lr
 8004e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e20:	e7f9      	b.n	8004e16 <memset+0x4>
	...

08004e24 <_close_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d06      	ldr	r5, [pc, #24]	@ (8004e40 <_close_r+0x1c>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	f7fc faec 	bl	800140c <_close>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_close_r+0x1a>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_close_r+0x1a>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	200004fc 	.word	0x200004fc

08004e44 <_lseek_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	@ (8004e64 <_lseek_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fc fb01 	bl	800145a <_lseek>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_lseek_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_lseek_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200004fc 	.word	0x200004fc

08004e68 <_read_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d07      	ldr	r5, [pc, #28]	@ (8004e88 <_read_r+0x20>)
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4608      	mov	r0, r1
 8004e70:	4611      	mov	r1, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	602a      	str	r2, [r5, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7fc fa8f 	bl	800139a <_read>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_read_r+0x1e>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_read_r+0x1e>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	200004fc 	.word	0x200004fc

08004e8c <_write_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4d07      	ldr	r5, [pc, #28]	@ (8004eac <_write_r+0x20>)
 8004e90:	4604      	mov	r4, r0
 8004e92:	4608      	mov	r0, r1
 8004e94:	4611      	mov	r1, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	602a      	str	r2, [r5, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f7fc fa9a 	bl	80013d4 <_write>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_write_r+0x1e>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_write_r+0x1e>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	200004fc 	.word	0x200004fc

08004eb0 <__errno>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	@ (8004eb8 <__errno+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000018 	.word	0x20000018

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	@ (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f003 fab8 	bl	8008444 <_init>
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2600      	movs	r6, #0
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08008894 	.word	0x08008894
 8004ef8:	08008894 	.word	0x08008894
 8004efc:	08008894 	.word	0x08008894
 8004f00:	08008898 	.word	0x08008898

08004f04 <__retarget_lock_init_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <__retarget_lock_acquire_recursive>:
 8004f06:	4770      	bx	lr

08004f08 <__retarget_lock_release_recursive>:
 8004f08:	4770      	bx	lr
	...

08004f0c <nanf>:
 8004f0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004f14 <nanf+0x8>
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	7fc00000 	.word	0x7fc00000

08004f18 <_free_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d041      	beq.n	8004fa4 <_free_r+0x8c>
 8004f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f24:	1f0c      	subs	r4, r1, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfb8      	it	lt
 8004f2a:	18e4      	addlt	r4, r4, r3
 8004f2c:	f000 f8e0 	bl	80050f0 <__malloc_lock>
 8004f30:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa8 <_free_r+0x90>)
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	b933      	cbnz	r3, 8004f44 <_free_r+0x2c>
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	6014      	str	r4, [r2, #0]
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f40:	f000 b8dc 	b.w	80050fc <__malloc_unlock>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d908      	bls.n	8004f5a <_free_r+0x42>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	1821      	adds	r1, r4, r0
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf01      	itttt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	1809      	addeq	r1, r1, r0
 8004f56:	6021      	streq	r1, [r4, #0]
 8004f58:	e7ed      	b.n	8004f36 <_free_r+0x1e>
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b10b      	cbz	r3, 8004f64 <_free_r+0x4c>
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	d9fa      	bls.n	8004f5a <_free_r+0x42>
 8004f64:	6811      	ldr	r1, [r2, #0]
 8004f66:	1850      	adds	r0, r2, r1
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d10b      	bne.n	8004f84 <_free_r+0x6c>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	4401      	add	r1, r0
 8004f70:	1850      	adds	r0, r2, r1
 8004f72:	4283      	cmp	r3, r0
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	d1e0      	bne.n	8004f3a <_free_r+0x22>
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	6053      	str	r3, [r2, #4]
 8004f7e:	4408      	add	r0, r1
 8004f80:	6010      	str	r0, [r2, #0]
 8004f82:	e7da      	b.n	8004f3a <_free_r+0x22>
 8004f84:	d902      	bls.n	8004f8c <_free_r+0x74>
 8004f86:	230c      	movs	r3, #12
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	e7d6      	b.n	8004f3a <_free_r+0x22>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	1821      	adds	r1, r4, r0
 8004f90:	428b      	cmp	r3, r1
 8004f92:	bf04      	itt	eq
 8004f94:	6819      	ldreq	r1, [r3, #0]
 8004f96:	685b      	ldreq	r3, [r3, #4]
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	bf04      	itt	eq
 8004f9c:	1809      	addeq	r1, r1, r0
 8004f9e:	6021      	streq	r1, [r4, #0]
 8004fa0:	6054      	str	r4, [r2, #4]
 8004fa2:	e7ca      	b.n	8004f3a <_free_r+0x22>
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000508 	.word	0x20000508

08004fac <sbrk_aligned>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4e0f      	ldr	r6, [pc, #60]	@ (8004fec <sbrk_aligned+0x40>)
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	6831      	ldr	r1, [r6, #0]
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	b911      	cbnz	r1, 8004fbe <sbrk_aligned+0x12>
 8004fb8:	f002 f84e 	bl	8007058 <_sbrk_r>
 8004fbc:	6030      	str	r0, [r6, #0]
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f002 f849 	bl	8007058 <_sbrk_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d103      	bne.n	8004fd2 <sbrk_aligned+0x26>
 8004fca:	f04f 34ff 	mov.w	r4, #4294967295
 8004fce:	4620      	mov	r0, r4
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
 8004fd2:	1cc4      	adds	r4, r0, #3
 8004fd4:	f024 0403 	bic.w	r4, r4, #3
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d0f8      	beq.n	8004fce <sbrk_aligned+0x22>
 8004fdc:	1a21      	subs	r1, r4, r0
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f002 f83a 	bl	8007058 <_sbrk_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d1f2      	bne.n	8004fce <sbrk_aligned+0x22>
 8004fe8:	e7ef      	b.n	8004fca <sbrk_aligned+0x1e>
 8004fea:	bf00      	nop
 8004fec:	20000504 	.word	0x20000504

08004ff0 <_malloc_r>:
 8004ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff4:	1ccd      	adds	r5, r1, #3
 8004ff6:	f025 0503 	bic.w	r5, r5, #3
 8004ffa:	3508      	adds	r5, #8
 8004ffc:	2d0c      	cmp	r5, #12
 8004ffe:	bf38      	it	cc
 8005000:	250c      	movcc	r5, #12
 8005002:	2d00      	cmp	r5, #0
 8005004:	4606      	mov	r6, r0
 8005006:	db01      	blt.n	800500c <_malloc_r+0x1c>
 8005008:	42a9      	cmp	r1, r5
 800500a:	d904      	bls.n	8005016 <_malloc_r+0x26>
 800500c:	230c      	movs	r3, #12
 800500e:	6033      	str	r3, [r6, #0]
 8005010:	2000      	movs	r0, #0
 8005012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050ec <_malloc_r+0xfc>
 800501a:	f000 f869 	bl	80050f0 <__malloc_lock>
 800501e:	f8d8 3000 	ldr.w	r3, [r8]
 8005022:	461c      	mov	r4, r3
 8005024:	bb44      	cbnz	r4, 8005078 <_malloc_r+0x88>
 8005026:	4629      	mov	r1, r5
 8005028:	4630      	mov	r0, r6
 800502a:	f7ff ffbf 	bl	8004fac <sbrk_aligned>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	4604      	mov	r4, r0
 8005032:	d158      	bne.n	80050e6 <_malloc_r+0xf6>
 8005034:	f8d8 4000 	ldr.w	r4, [r8]
 8005038:	4627      	mov	r7, r4
 800503a:	2f00      	cmp	r7, #0
 800503c:	d143      	bne.n	80050c6 <_malloc_r+0xd6>
 800503e:	2c00      	cmp	r4, #0
 8005040:	d04b      	beq.n	80050da <_malloc_r+0xea>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	4639      	mov	r1, r7
 8005046:	4630      	mov	r0, r6
 8005048:	eb04 0903 	add.w	r9, r4, r3
 800504c:	f002 f804 	bl	8007058 <_sbrk_r>
 8005050:	4581      	cmp	r9, r0
 8005052:	d142      	bne.n	80050da <_malloc_r+0xea>
 8005054:	6821      	ldr	r1, [r4, #0]
 8005056:	1a6d      	subs	r5, r5, r1
 8005058:	4629      	mov	r1, r5
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff ffa6 	bl	8004fac <sbrk_aligned>
 8005060:	3001      	adds	r0, #1
 8005062:	d03a      	beq.n	80050da <_malloc_r+0xea>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	442b      	add	r3, r5
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	f8d8 3000 	ldr.w	r3, [r8]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	bb62      	cbnz	r2, 80050cc <_malloc_r+0xdc>
 8005072:	f8c8 7000 	str.w	r7, [r8]
 8005076:	e00f      	b.n	8005098 <_malloc_r+0xa8>
 8005078:	6822      	ldr	r2, [r4, #0]
 800507a:	1b52      	subs	r2, r2, r5
 800507c:	d420      	bmi.n	80050c0 <_malloc_r+0xd0>
 800507e:	2a0b      	cmp	r2, #11
 8005080:	d917      	bls.n	80050b2 <_malloc_r+0xc2>
 8005082:	1961      	adds	r1, r4, r5
 8005084:	42a3      	cmp	r3, r4
 8005086:	6025      	str	r5, [r4, #0]
 8005088:	bf18      	it	ne
 800508a:	6059      	strne	r1, [r3, #4]
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	bf08      	it	eq
 8005090:	f8c8 1000 	streq.w	r1, [r8]
 8005094:	5162      	str	r2, [r4, r5]
 8005096:	604b      	str	r3, [r1, #4]
 8005098:	4630      	mov	r0, r6
 800509a:	f000 f82f 	bl	80050fc <__malloc_unlock>
 800509e:	f104 000b 	add.w	r0, r4, #11
 80050a2:	1d23      	adds	r3, r4, #4
 80050a4:	f020 0007 	bic.w	r0, r0, #7
 80050a8:	1ac2      	subs	r2, r0, r3
 80050aa:	bf1c      	itt	ne
 80050ac:	1a1b      	subne	r3, r3, r0
 80050ae:	50a3      	strne	r3, [r4, r2]
 80050b0:	e7af      	b.n	8005012 <_malloc_r+0x22>
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	bf0c      	ite	eq
 80050b8:	f8c8 2000 	streq.w	r2, [r8]
 80050bc:	605a      	strne	r2, [r3, #4]
 80050be:	e7eb      	b.n	8005098 <_malloc_r+0xa8>
 80050c0:	4623      	mov	r3, r4
 80050c2:	6864      	ldr	r4, [r4, #4]
 80050c4:	e7ae      	b.n	8005024 <_malloc_r+0x34>
 80050c6:	463c      	mov	r4, r7
 80050c8:	687f      	ldr	r7, [r7, #4]
 80050ca:	e7b6      	b.n	800503a <_malloc_r+0x4a>
 80050cc:	461a      	mov	r2, r3
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d1fb      	bne.n	80050cc <_malloc_r+0xdc>
 80050d4:	2300      	movs	r3, #0
 80050d6:	6053      	str	r3, [r2, #4]
 80050d8:	e7de      	b.n	8005098 <_malloc_r+0xa8>
 80050da:	230c      	movs	r3, #12
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 f80c 	bl	80050fc <__malloc_unlock>
 80050e4:	e794      	b.n	8005010 <_malloc_r+0x20>
 80050e6:	6005      	str	r5, [r0, #0]
 80050e8:	e7d6      	b.n	8005098 <_malloc_r+0xa8>
 80050ea:	bf00      	nop
 80050ec:	20000508 	.word	0x20000508

080050f0 <__malloc_lock>:
 80050f0:	4801      	ldr	r0, [pc, #4]	@ (80050f8 <__malloc_lock+0x8>)
 80050f2:	f7ff bf08 	b.w	8004f06 <__retarget_lock_acquire_recursive>
 80050f6:	bf00      	nop
 80050f8:	20000500 	.word	0x20000500

080050fc <__malloc_unlock>:
 80050fc:	4801      	ldr	r0, [pc, #4]	@ (8005104 <__malloc_unlock+0x8>)
 80050fe:	f7ff bf03 	b.w	8004f08 <__retarget_lock_release_recursive>
 8005102:	bf00      	nop
 8005104:	20000500 	.word	0x20000500

08005108 <sulp>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4604      	mov	r4, r0
 800510c:	460d      	mov	r5, r1
 800510e:	ec45 4b10 	vmov	d0, r4, r5
 8005112:	4616      	mov	r6, r2
 8005114:	f002 fe88 	bl	8007e28 <__ulp>
 8005118:	ec51 0b10 	vmov	r0, r1, d0
 800511c:	b17e      	cbz	r6, 800513e <sulp+0x36>
 800511e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005122:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005126:	2b00      	cmp	r3, #0
 8005128:	dd09      	ble.n	800513e <sulp+0x36>
 800512a:	051b      	lsls	r3, r3, #20
 800512c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005130:	2400      	movs	r4, #0
 8005132:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	f7fb fa5d 	bl	80005f8 <__aeabi_dmul>
 800513e:	ec41 0b10 	vmov	d0, r0, r1
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	0000      	movs	r0, r0
	...

08005148 <_strtod_l>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	b09f      	sub	sp, #124	@ 0x7c
 800514e:	460c      	mov	r4, r1
 8005150:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005152:	2200      	movs	r2, #0
 8005154:	921a      	str	r2, [sp, #104]	@ 0x68
 8005156:	9005      	str	r0, [sp, #20]
 8005158:	f04f 0a00 	mov.w	sl, #0
 800515c:	f04f 0b00 	mov.w	fp, #0
 8005160:	460a      	mov	r2, r1
 8005162:	9219      	str	r2, [sp, #100]	@ 0x64
 8005164:	7811      	ldrb	r1, [r2, #0]
 8005166:	292b      	cmp	r1, #43	@ 0x2b
 8005168:	d04a      	beq.n	8005200 <_strtod_l+0xb8>
 800516a:	d838      	bhi.n	80051de <_strtod_l+0x96>
 800516c:	290d      	cmp	r1, #13
 800516e:	d832      	bhi.n	80051d6 <_strtod_l+0x8e>
 8005170:	2908      	cmp	r1, #8
 8005172:	d832      	bhi.n	80051da <_strtod_l+0x92>
 8005174:	2900      	cmp	r1, #0
 8005176:	d03b      	beq.n	80051f0 <_strtod_l+0xa8>
 8005178:	2200      	movs	r2, #0
 800517a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800517c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800517e:	782a      	ldrb	r2, [r5, #0]
 8005180:	2a30      	cmp	r2, #48	@ 0x30
 8005182:	f040 80b3 	bne.w	80052ec <_strtod_l+0x1a4>
 8005186:	786a      	ldrb	r2, [r5, #1]
 8005188:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800518c:	2a58      	cmp	r2, #88	@ 0x58
 800518e:	d16e      	bne.n	800526e <_strtod_l+0x126>
 8005190:	9302      	str	r3, [sp, #8]
 8005192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	ab1a      	add	r3, sp, #104	@ 0x68
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	4a8e      	ldr	r2, [pc, #568]	@ (80053d4 <_strtod_l+0x28c>)
 800519c:	9805      	ldr	r0, [sp, #20]
 800519e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80051a0:	a919      	add	r1, sp, #100	@ 0x64
 80051a2:	f001 ffe9 	bl	8007178 <__gethex>
 80051a6:	f010 060f 	ands.w	r6, r0, #15
 80051aa:	4604      	mov	r4, r0
 80051ac:	d005      	beq.n	80051ba <_strtod_l+0x72>
 80051ae:	2e06      	cmp	r6, #6
 80051b0:	d128      	bne.n	8005204 <_strtod_l+0xbc>
 80051b2:	3501      	adds	r5, #1
 80051b4:	2300      	movs	r3, #0
 80051b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80051b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 858e 	bne.w	8005cde <_strtod_l+0xb96>
 80051c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051c4:	b1cb      	cbz	r3, 80051fa <_strtod_l+0xb2>
 80051c6:	4652      	mov	r2, sl
 80051c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80051cc:	ec43 2b10 	vmov	d0, r2, r3
 80051d0:	b01f      	add	sp, #124	@ 0x7c
 80051d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d6:	2920      	cmp	r1, #32
 80051d8:	d1ce      	bne.n	8005178 <_strtod_l+0x30>
 80051da:	3201      	adds	r2, #1
 80051dc:	e7c1      	b.n	8005162 <_strtod_l+0x1a>
 80051de:	292d      	cmp	r1, #45	@ 0x2d
 80051e0:	d1ca      	bne.n	8005178 <_strtod_l+0x30>
 80051e2:	2101      	movs	r1, #1
 80051e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80051e6:	1c51      	adds	r1, r2, #1
 80051e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80051ea:	7852      	ldrb	r2, [r2, #1]
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d1c5      	bne.n	800517c <_strtod_l+0x34>
 80051f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f040 8570 	bne.w	8005cda <_strtod_l+0xb92>
 80051fa:	4652      	mov	r2, sl
 80051fc:	465b      	mov	r3, fp
 80051fe:	e7e5      	b.n	80051cc <_strtod_l+0x84>
 8005200:	2100      	movs	r1, #0
 8005202:	e7ef      	b.n	80051e4 <_strtod_l+0x9c>
 8005204:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005206:	b13a      	cbz	r2, 8005218 <_strtod_l+0xd0>
 8005208:	2135      	movs	r1, #53	@ 0x35
 800520a:	a81c      	add	r0, sp, #112	@ 0x70
 800520c:	f002 ff06 	bl	800801c <__copybits>
 8005210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005212:	9805      	ldr	r0, [sp, #20]
 8005214:	f002 fad4 	bl	80077c0 <_Bfree>
 8005218:	3e01      	subs	r6, #1
 800521a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800521c:	2e04      	cmp	r6, #4
 800521e:	d806      	bhi.n	800522e <_strtod_l+0xe6>
 8005220:	e8df f006 	tbb	[pc, r6]
 8005224:	201d0314 	.word	0x201d0314
 8005228:	14          	.byte	0x14
 8005229:	00          	.byte	0x00
 800522a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800522e:	05e1      	lsls	r1, r4, #23
 8005230:	bf48      	it	mi
 8005232:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800523a:	0d1b      	lsrs	r3, r3, #20
 800523c:	051b      	lsls	r3, r3, #20
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1bb      	bne.n	80051ba <_strtod_l+0x72>
 8005242:	f7ff fe35 	bl	8004eb0 <__errno>
 8005246:	2322      	movs	r3, #34	@ 0x22
 8005248:	6003      	str	r3, [r0, #0]
 800524a:	e7b6      	b.n	80051ba <_strtod_l+0x72>
 800524c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005250:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005254:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005258:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800525c:	e7e7      	b.n	800522e <_strtod_l+0xe6>
 800525e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80053dc <_strtod_l+0x294>
 8005262:	e7e4      	b.n	800522e <_strtod_l+0xe6>
 8005264:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005268:	f04f 3aff 	mov.w	sl, #4294967295
 800526c:	e7df      	b.n	800522e <_strtod_l+0xe6>
 800526e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	9219      	str	r2, [sp, #100]	@ 0x64
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b30      	cmp	r3, #48	@ 0x30
 8005278:	d0f9      	beq.n	800526e <_strtod_l+0x126>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d09d      	beq.n	80051ba <_strtod_l+0x72>
 800527e:	2301      	movs	r3, #1
 8005280:	9309      	str	r3, [sp, #36]	@ 0x24
 8005282:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005284:	930c      	str	r3, [sp, #48]	@ 0x30
 8005286:	2300      	movs	r3, #0
 8005288:	9308      	str	r3, [sp, #32]
 800528a:	930a      	str	r3, [sp, #40]	@ 0x28
 800528c:	461f      	mov	r7, r3
 800528e:	220a      	movs	r2, #10
 8005290:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005292:	7805      	ldrb	r5, [r0, #0]
 8005294:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005298:	b2d9      	uxtb	r1, r3
 800529a:	2909      	cmp	r1, #9
 800529c:	d928      	bls.n	80052f0 <_strtod_l+0x1a8>
 800529e:	494e      	ldr	r1, [pc, #312]	@ (80053d8 <_strtod_l+0x290>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	f001 fec7 	bl	8007034 <strncmp>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d032      	beq.n	8005310 <_strtod_l+0x1c8>
 80052aa:	2000      	movs	r0, #0
 80052ac:	462a      	mov	r2, r5
 80052ae:	4681      	mov	r9, r0
 80052b0:	463d      	mov	r5, r7
 80052b2:	4603      	mov	r3, r0
 80052b4:	2a65      	cmp	r2, #101	@ 0x65
 80052b6:	d001      	beq.n	80052bc <_strtod_l+0x174>
 80052b8:	2a45      	cmp	r2, #69	@ 0x45
 80052ba:	d114      	bne.n	80052e6 <_strtod_l+0x19e>
 80052bc:	b91d      	cbnz	r5, 80052c6 <_strtod_l+0x17e>
 80052be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052c0:	4302      	orrs	r2, r0
 80052c2:	d095      	beq.n	80051f0 <_strtod_l+0xa8>
 80052c4:	2500      	movs	r5, #0
 80052c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80052c8:	1c62      	adds	r2, r4, #1
 80052ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80052cc:	7862      	ldrb	r2, [r4, #1]
 80052ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80052d0:	d077      	beq.n	80053c2 <_strtod_l+0x27a>
 80052d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80052d4:	d07b      	beq.n	80053ce <_strtod_l+0x286>
 80052d6:	f04f 0c00 	mov.w	ip, #0
 80052da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80052de:	2909      	cmp	r1, #9
 80052e0:	f240 8082 	bls.w	80053e8 <_strtod_l+0x2a0>
 80052e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	e0a2      	b.n	8005432 <_strtod_l+0x2ea>
 80052ec:	2300      	movs	r3, #0
 80052ee:	e7c7      	b.n	8005280 <_strtod_l+0x138>
 80052f0:	2f08      	cmp	r7, #8
 80052f2:	bfd5      	itete	le
 80052f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80052f6:	9908      	ldrgt	r1, [sp, #32]
 80052f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80052fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005300:	f100 0001 	add.w	r0, r0, #1
 8005304:	bfd4      	ite	le
 8005306:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005308:	9308      	strgt	r3, [sp, #32]
 800530a:	3701      	adds	r7, #1
 800530c:	9019      	str	r0, [sp, #100]	@ 0x64
 800530e:	e7bf      	b.n	8005290 <_strtod_l+0x148>
 8005310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	9219      	str	r2, [sp, #100]	@ 0x64
 8005316:	785a      	ldrb	r2, [r3, #1]
 8005318:	b37f      	cbz	r7, 800537a <_strtod_l+0x232>
 800531a:	4681      	mov	r9, r0
 800531c:	463d      	mov	r5, r7
 800531e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005322:	2b09      	cmp	r3, #9
 8005324:	d912      	bls.n	800534c <_strtod_l+0x204>
 8005326:	2301      	movs	r3, #1
 8005328:	e7c4      	b.n	80052b4 <_strtod_l+0x16c>
 800532a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005330:	785a      	ldrb	r2, [r3, #1]
 8005332:	3001      	adds	r0, #1
 8005334:	2a30      	cmp	r2, #48	@ 0x30
 8005336:	d0f8      	beq.n	800532a <_strtod_l+0x1e2>
 8005338:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800533c:	2b08      	cmp	r3, #8
 800533e:	f200 84d3 	bhi.w	8005ce8 <_strtod_l+0xba0>
 8005342:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005344:	930c      	str	r3, [sp, #48]	@ 0x30
 8005346:	4681      	mov	r9, r0
 8005348:	2000      	movs	r0, #0
 800534a:	4605      	mov	r5, r0
 800534c:	3a30      	subs	r2, #48	@ 0x30
 800534e:	f100 0301 	add.w	r3, r0, #1
 8005352:	d02a      	beq.n	80053aa <_strtod_l+0x262>
 8005354:	4499      	add	r9, r3
 8005356:	eb00 0c05 	add.w	ip, r0, r5
 800535a:	462b      	mov	r3, r5
 800535c:	210a      	movs	r1, #10
 800535e:	4563      	cmp	r3, ip
 8005360:	d10d      	bne.n	800537e <_strtod_l+0x236>
 8005362:	1c69      	adds	r1, r5, #1
 8005364:	4401      	add	r1, r0
 8005366:	4428      	add	r0, r5
 8005368:	2808      	cmp	r0, #8
 800536a:	dc16      	bgt.n	800539a <_strtod_l+0x252>
 800536c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800536e:	230a      	movs	r3, #10
 8005370:	fb03 2300 	mla	r3, r3, r0, r2
 8005374:	930a      	str	r3, [sp, #40]	@ 0x28
 8005376:	2300      	movs	r3, #0
 8005378:	e018      	b.n	80053ac <_strtod_l+0x264>
 800537a:	4638      	mov	r0, r7
 800537c:	e7da      	b.n	8005334 <_strtod_l+0x1ec>
 800537e:	2b08      	cmp	r3, #8
 8005380:	f103 0301 	add.w	r3, r3, #1
 8005384:	dc03      	bgt.n	800538e <_strtod_l+0x246>
 8005386:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005388:	434e      	muls	r6, r1
 800538a:	960a      	str	r6, [sp, #40]	@ 0x28
 800538c:	e7e7      	b.n	800535e <_strtod_l+0x216>
 800538e:	2b10      	cmp	r3, #16
 8005390:	bfde      	ittt	le
 8005392:	9e08      	ldrle	r6, [sp, #32]
 8005394:	434e      	mulle	r6, r1
 8005396:	9608      	strle	r6, [sp, #32]
 8005398:	e7e1      	b.n	800535e <_strtod_l+0x216>
 800539a:	280f      	cmp	r0, #15
 800539c:	dceb      	bgt.n	8005376 <_strtod_l+0x22e>
 800539e:	9808      	ldr	r0, [sp, #32]
 80053a0:	230a      	movs	r3, #10
 80053a2:	fb03 2300 	mla	r3, r3, r0, r2
 80053a6:	9308      	str	r3, [sp, #32]
 80053a8:	e7e5      	b.n	8005376 <_strtod_l+0x22e>
 80053aa:	4629      	mov	r1, r5
 80053ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053ae:	1c50      	adds	r0, r2, #1
 80053b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80053b2:	7852      	ldrb	r2, [r2, #1]
 80053b4:	4618      	mov	r0, r3
 80053b6:	460d      	mov	r5, r1
 80053b8:	e7b1      	b.n	800531e <_strtod_l+0x1d6>
 80053ba:	f04f 0900 	mov.w	r9, #0
 80053be:	2301      	movs	r3, #1
 80053c0:	e77d      	b.n	80052be <_strtod_l+0x176>
 80053c2:	f04f 0c00 	mov.w	ip, #0
 80053c6:	1ca2      	adds	r2, r4, #2
 80053c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80053ca:	78a2      	ldrb	r2, [r4, #2]
 80053cc:	e785      	b.n	80052da <_strtod_l+0x192>
 80053ce:	f04f 0c01 	mov.w	ip, #1
 80053d2:	e7f8      	b.n	80053c6 <_strtod_l+0x27e>
 80053d4:	080084dc 	.word	0x080084dc
 80053d8:	080084b9 	.word	0x080084b9
 80053dc:	7ff00000 	.word	0x7ff00000
 80053e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053e2:	1c51      	adds	r1, r2, #1
 80053e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80053e6:	7852      	ldrb	r2, [r2, #1]
 80053e8:	2a30      	cmp	r2, #48	@ 0x30
 80053ea:	d0f9      	beq.n	80053e0 <_strtod_l+0x298>
 80053ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80053f0:	2908      	cmp	r1, #8
 80053f2:	f63f af78 	bhi.w	80052e6 <_strtod_l+0x19e>
 80053f6:	3a30      	subs	r2, #48	@ 0x30
 80053f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80053fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80053fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80053fe:	f04f 080a 	mov.w	r8, #10
 8005402:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005404:	1c56      	adds	r6, r2, #1
 8005406:	9619      	str	r6, [sp, #100]	@ 0x64
 8005408:	7852      	ldrb	r2, [r2, #1]
 800540a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800540e:	f1be 0f09 	cmp.w	lr, #9
 8005412:	d939      	bls.n	8005488 <_strtod_l+0x340>
 8005414:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005416:	1a76      	subs	r6, r6, r1
 8005418:	2e08      	cmp	r6, #8
 800541a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800541e:	dc03      	bgt.n	8005428 <_strtod_l+0x2e0>
 8005420:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005422:	4588      	cmp	r8, r1
 8005424:	bfa8      	it	ge
 8005426:	4688      	movge	r8, r1
 8005428:	f1bc 0f00 	cmp.w	ip, #0
 800542c:	d001      	beq.n	8005432 <_strtod_l+0x2ea>
 800542e:	f1c8 0800 	rsb	r8, r8, #0
 8005432:	2d00      	cmp	r5, #0
 8005434:	d14e      	bne.n	80054d4 <_strtod_l+0x38c>
 8005436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005438:	4308      	orrs	r0, r1
 800543a:	f47f aebe 	bne.w	80051ba <_strtod_l+0x72>
 800543e:	2b00      	cmp	r3, #0
 8005440:	f47f aed6 	bne.w	80051f0 <_strtod_l+0xa8>
 8005444:	2a69      	cmp	r2, #105	@ 0x69
 8005446:	d028      	beq.n	800549a <_strtod_l+0x352>
 8005448:	dc25      	bgt.n	8005496 <_strtod_l+0x34e>
 800544a:	2a49      	cmp	r2, #73	@ 0x49
 800544c:	d025      	beq.n	800549a <_strtod_l+0x352>
 800544e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005450:	f47f aece 	bne.w	80051f0 <_strtod_l+0xa8>
 8005454:	499b      	ldr	r1, [pc, #620]	@ (80056c4 <_strtod_l+0x57c>)
 8005456:	a819      	add	r0, sp, #100	@ 0x64
 8005458:	f002 f8b0 	bl	80075bc <__match>
 800545c:	2800      	cmp	r0, #0
 800545e:	f43f aec7 	beq.w	80051f0 <_strtod_l+0xa8>
 8005462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b28      	cmp	r3, #40	@ 0x28
 8005468:	d12e      	bne.n	80054c8 <_strtod_l+0x380>
 800546a:	4997      	ldr	r1, [pc, #604]	@ (80056c8 <_strtod_l+0x580>)
 800546c:	aa1c      	add	r2, sp, #112	@ 0x70
 800546e:	a819      	add	r0, sp, #100	@ 0x64
 8005470:	f002 f8b8 	bl	80075e4 <__hexnan>
 8005474:	2805      	cmp	r0, #5
 8005476:	d127      	bne.n	80054c8 <_strtod_l+0x380>
 8005478:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800547a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800547e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005482:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005486:	e698      	b.n	80051ba <_strtod_l+0x72>
 8005488:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800548a:	fb08 2101 	mla	r1, r8, r1, r2
 800548e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005492:	920e      	str	r2, [sp, #56]	@ 0x38
 8005494:	e7b5      	b.n	8005402 <_strtod_l+0x2ba>
 8005496:	2a6e      	cmp	r2, #110	@ 0x6e
 8005498:	e7da      	b.n	8005450 <_strtod_l+0x308>
 800549a:	498c      	ldr	r1, [pc, #560]	@ (80056cc <_strtod_l+0x584>)
 800549c:	a819      	add	r0, sp, #100	@ 0x64
 800549e:	f002 f88d 	bl	80075bc <__match>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	f43f aea4 	beq.w	80051f0 <_strtod_l+0xa8>
 80054a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054aa:	4989      	ldr	r1, [pc, #548]	@ (80056d0 <_strtod_l+0x588>)
 80054ac:	3b01      	subs	r3, #1
 80054ae:	a819      	add	r0, sp, #100	@ 0x64
 80054b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80054b2:	f002 f883 	bl	80075bc <__match>
 80054b6:	b910      	cbnz	r0, 80054be <_strtod_l+0x376>
 80054b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054ba:	3301      	adds	r3, #1
 80054bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80054be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80056e0 <_strtod_l+0x598>
 80054c2:	f04f 0a00 	mov.w	sl, #0
 80054c6:	e678      	b.n	80051ba <_strtod_l+0x72>
 80054c8:	4882      	ldr	r0, [pc, #520]	@ (80056d4 <_strtod_l+0x58c>)
 80054ca:	f001 fde5 	bl	8007098 <nan>
 80054ce:	ec5b ab10 	vmov	sl, fp, d0
 80054d2:	e672      	b.n	80051ba <_strtod_l+0x72>
 80054d4:	eba8 0309 	sub.w	r3, r8, r9
 80054d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80054da:	9309      	str	r3, [sp, #36]	@ 0x24
 80054dc:	2f00      	cmp	r7, #0
 80054de:	bf08      	it	eq
 80054e0:	462f      	moveq	r7, r5
 80054e2:	2d10      	cmp	r5, #16
 80054e4:	462c      	mov	r4, r5
 80054e6:	bfa8      	it	ge
 80054e8:	2410      	movge	r4, #16
 80054ea:	f7fb f80b 	bl	8000504 <__aeabi_ui2d>
 80054ee:	2d09      	cmp	r5, #9
 80054f0:	4682      	mov	sl, r0
 80054f2:	468b      	mov	fp, r1
 80054f4:	dc13      	bgt.n	800551e <_strtod_l+0x3d6>
 80054f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f43f ae5e 	beq.w	80051ba <_strtod_l+0x72>
 80054fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005500:	dd78      	ble.n	80055f4 <_strtod_l+0x4ac>
 8005502:	2b16      	cmp	r3, #22
 8005504:	dc5f      	bgt.n	80055c6 <_strtod_l+0x47e>
 8005506:	4974      	ldr	r1, [pc, #464]	@ (80056d8 <_strtod_l+0x590>)
 8005508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800550c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005510:	4652      	mov	r2, sl
 8005512:	465b      	mov	r3, fp
 8005514:	f7fb f870 	bl	80005f8 <__aeabi_dmul>
 8005518:	4682      	mov	sl, r0
 800551a:	468b      	mov	fp, r1
 800551c:	e64d      	b.n	80051ba <_strtod_l+0x72>
 800551e:	4b6e      	ldr	r3, [pc, #440]	@ (80056d8 <_strtod_l+0x590>)
 8005520:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005524:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005528:	f7fb f866 	bl	80005f8 <__aeabi_dmul>
 800552c:	4682      	mov	sl, r0
 800552e:	9808      	ldr	r0, [sp, #32]
 8005530:	468b      	mov	fp, r1
 8005532:	f7fa ffe7 	bl	8000504 <__aeabi_ui2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4650      	mov	r0, sl
 800553c:	4659      	mov	r1, fp
 800553e:	f7fa fea5 	bl	800028c <__adddf3>
 8005542:	2d0f      	cmp	r5, #15
 8005544:	4682      	mov	sl, r0
 8005546:	468b      	mov	fp, r1
 8005548:	ddd5      	ble.n	80054f6 <_strtod_l+0x3ae>
 800554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800554c:	1b2c      	subs	r4, r5, r4
 800554e:	441c      	add	r4, r3
 8005550:	2c00      	cmp	r4, #0
 8005552:	f340 8096 	ble.w	8005682 <_strtod_l+0x53a>
 8005556:	f014 030f 	ands.w	r3, r4, #15
 800555a:	d00a      	beq.n	8005572 <_strtod_l+0x42a>
 800555c:	495e      	ldr	r1, [pc, #376]	@ (80056d8 <_strtod_l+0x590>)
 800555e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005562:	4652      	mov	r2, sl
 8005564:	465b      	mov	r3, fp
 8005566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800556a:	f7fb f845 	bl	80005f8 <__aeabi_dmul>
 800556e:	4682      	mov	sl, r0
 8005570:	468b      	mov	fp, r1
 8005572:	f034 040f 	bics.w	r4, r4, #15
 8005576:	d073      	beq.n	8005660 <_strtod_l+0x518>
 8005578:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800557c:	dd48      	ble.n	8005610 <_strtod_l+0x4c8>
 800557e:	2400      	movs	r4, #0
 8005580:	46a0      	mov	r8, r4
 8005582:	940a      	str	r4, [sp, #40]	@ 0x28
 8005584:	46a1      	mov	r9, r4
 8005586:	9a05      	ldr	r2, [sp, #20]
 8005588:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80056e0 <_strtod_l+0x598>
 800558c:	2322      	movs	r3, #34	@ 0x22
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	f04f 0a00 	mov.w	sl, #0
 8005594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	f43f ae0f 	beq.w	80051ba <_strtod_l+0x72>
 800559c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800559e:	9805      	ldr	r0, [sp, #20]
 80055a0:	f002 f90e 	bl	80077c0 <_Bfree>
 80055a4:	9805      	ldr	r0, [sp, #20]
 80055a6:	4649      	mov	r1, r9
 80055a8:	f002 f90a 	bl	80077c0 <_Bfree>
 80055ac:	9805      	ldr	r0, [sp, #20]
 80055ae:	4641      	mov	r1, r8
 80055b0:	f002 f906 	bl	80077c0 <_Bfree>
 80055b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055b6:	9805      	ldr	r0, [sp, #20]
 80055b8:	f002 f902 	bl	80077c0 <_Bfree>
 80055bc:	9805      	ldr	r0, [sp, #20]
 80055be:	4621      	mov	r1, r4
 80055c0:	f002 f8fe 	bl	80077c0 <_Bfree>
 80055c4:	e5f9      	b.n	80051ba <_strtod_l+0x72>
 80055c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80055cc:	4293      	cmp	r3, r2
 80055ce:	dbbc      	blt.n	800554a <_strtod_l+0x402>
 80055d0:	4c41      	ldr	r4, [pc, #260]	@ (80056d8 <_strtod_l+0x590>)
 80055d2:	f1c5 050f 	rsb	r5, r5, #15
 80055d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80055da:	4652      	mov	r2, sl
 80055dc:	465b      	mov	r3, fp
 80055de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e2:	f7fb f809 	bl	80005f8 <__aeabi_dmul>
 80055e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e8:	1b5d      	subs	r5, r3, r5
 80055ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80055ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80055f2:	e78f      	b.n	8005514 <_strtod_l+0x3cc>
 80055f4:	3316      	adds	r3, #22
 80055f6:	dba8      	blt.n	800554a <_strtod_l+0x402>
 80055f8:	4b37      	ldr	r3, [pc, #220]	@ (80056d8 <_strtod_l+0x590>)
 80055fa:	eba9 0808 	sub.w	r8, r9, r8
 80055fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005602:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005606:	4650      	mov	r0, sl
 8005608:	4659      	mov	r1, fp
 800560a:	f7fb f91f 	bl	800084c <__aeabi_ddiv>
 800560e:	e783      	b.n	8005518 <_strtod_l+0x3d0>
 8005610:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <_strtod_l+0x594>)
 8005612:	9308      	str	r3, [sp, #32]
 8005614:	2300      	movs	r3, #0
 8005616:	1124      	asrs	r4, r4, #4
 8005618:	4650      	mov	r0, sl
 800561a:	4659      	mov	r1, fp
 800561c:	461e      	mov	r6, r3
 800561e:	2c01      	cmp	r4, #1
 8005620:	dc21      	bgt.n	8005666 <_strtod_l+0x51e>
 8005622:	b10b      	cbz	r3, 8005628 <_strtod_l+0x4e0>
 8005624:	4682      	mov	sl, r0
 8005626:	468b      	mov	fp, r1
 8005628:	492c      	ldr	r1, [pc, #176]	@ (80056dc <_strtod_l+0x594>)
 800562a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800562e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005632:	4652      	mov	r2, sl
 8005634:	465b      	mov	r3, fp
 8005636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800563a:	f7fa ffdd 	bl	80005f8 <__aeabi_dmul>
 800563e:	4b28      	ldr	r3, [pc, #160]	@ (80056e0 <_strtod_l+0x598>)
 8005640:	460a      	mov	r2, r1
 8005642:	400b      	ands	r3, r1
 8005644:	4927      	ldr	r1, [pc, #156]	@ (80056e4 <_strtod_l+0x59c>)
 8005646:	428b      	cmp	r3, r1
 8005648:	4682      	mov	sl, r0
 800564a:	d898      	bhi.n	800557e <_strtod_l+0x436>
 800564c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005650:	428b      	cmp	r3, r1
 8005652:	bf86      	itte	hi
 8005654:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80056e8 <_strtod_l+0x5a0>
 8005658:	f04f 3aff 	movhi.w	sl, #4294967295
 800565c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005660:	2300      	movs	r3, #0
 8005662:	9308      	str	r3, [sp, #32]
 8005664:	e07a      	b.n	800575c <_strtod_l+0x614>
 8005666:	07e2      	lsls	r2, r4, #31
 8005668:	d505      	bpl.n	8005676 <_strtod_l+0x52e>
 800566a:	9b08      	ldr	r3, [sp, #32]
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f7fa ffc2 	bl	80005f8 <__aeabi_dmul>
 8005674:	2301      	movs	r3, #1
 8005676:	9a08      	ldr	r2, [sp, #32]
 8005678:	3208      	adds	r2, #8
 800567a:	3601      	adds	r6, #1
 800567c:	1064      	asrs	r4, r4, #1
 800567e:	9208      	str	r2, [sp, #32]
 8005680:	e7cd      	b.n	800561e <_strtod_l+0x4d6>
 8005682:	d0ed      	beq.n	8005660 <_strtod_l+0x518>
 8005684:	4264      	negs	r4, r4
 8005686:	f014 020f 	ands.w	r2, r4, #15
 800568a:	d00a      	beq.n	80056a2 <_strtod_l+0x55a>
 800568c:	4b12      	ldr	r3, [pc, #72]	@ (80056d8 <_strtod_l+0x590>)
 800568e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005692:	4650      	mov	r0, sl
 8005694:	4659      	mov	r1, fp
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fb f8d7 	bl	800084c <__aeabi_ddiv>
 800569e:	4682      	mov	sl, r0
 80056a0:	468b      	mov	fp, r1
 80056a2:	1124      	asrs	r4, r4, #4
 80056a4:	d0dc      	beq.n	8005660 <_strtod_l+0x518>
 80056a6:	2c1f      	cmp	r4, #31
 80056a8:	dd20      	ble.n	80056ec <_strtod_l+0x5a4>
 80056aa:	2400      	movs	r4, #0
 80056ac:	46a0      	mov	r8, r4
 80056ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80056b0:	46a1      	mov	r9, r4
 80056b2:	9a05      	ldr	r2, [sp, #20]
 80056b4:	2322      	movs	r3, #34	@ 0x22
 80056b6:	f04f 0a00 	mov.w	sl, #0
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e768      	b.n	8005594 <_strtod_l+0x44c>
 80056c2:	bf00      	nop
 80056c4:	080084c4 	.word	0x080084c4
 80056c8:	080084c8 	.word	0x080084c8
 80056cc:	080084bb 	.word	0x080084bb
 80056d0:	080084be 	.word	0x080084be
 80056d4:	0800888b 	.word	0x0800888b
 80056d8:	08008788 	.word	0x08008788
 80056dc:	08008760 	.word	0x08008760
 80056e0:	7ff00000 	.word	0x7ff00000
 80056e4:	7ca00000 	.word	0x7ca00000
 80056e8:	7fefffff 	.word	0x7fefffff
 80056ec:	f014 0310 	ands.w	r3, r4, #16
 80056f0:	bf18      	it	ne
 80056f2:	236a      	movne	r3, #106	@ 0x6a
 80056f4:	4ea9      	ldr	r6, [pc, #676]	@ (800599c <_strtod_l+0x854>)
 80056f6:	9308      	str	r3, [sp, #32]
 80056f8:	4650      	mov	r0, sl
 80056fa:	4659      	mov	r1, fp
 80056fc:	2300      	movs	r3, #0
 80056fe:	07e2      	lsls	r2, r4, #31
 8005700:	d504      	bpl.n	800570c <_strtod_l+0x5c4>
 8005702:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005706:	f7fa ff77 	bl	80005f8 <__aeabi_dmul>
 800570a:	2301      	movs	r3, #1
 800570c:	1064      	asrs	r4, r4, #1
 800570e:	f106 0608 	add.w	r6, r6, #8
 8005712:	d1f4      	bne.n	80056fe <_strtod_l+0x5b6>
 8005714:	b10b      	cbz	r3, 800571a <_strtod_l+0x5d2>
 8005716:	4682      	mov	sl, r0
 8005718:	468b      	mov	fp, r1
 800571a:	9b08      	ldr	r3, [sp, #32]
 800571c:	b1b3      	cbz	r3, 800574c <_strtod_l+0x604>
 800571e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005722:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005726:	2b00      	cmp	r3, #0
 8005728:	4659      	mov	r1, fp
 800572a:	dd0f      	ble.n	800574c <_strtod_l+0x604>
 800572c:	2b1f      	cmp	r3, #31
 800572e:	dd55      	ble.n	80057dc <_strtod_l+0x694>
 8005730:	2b34      	cmp	r3, #52	@ 0x34
 8005732:	bfde      	ittt	le
 8005734:	f04f 33ff 	movle.w	r3, #4294967295
 8005738:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800573c:	4093      	lslle	r3, r2
 800573e:	f04f 0a00 	mov.w	sl, #0
 8005742:	bfcc      	ite	gt
 8005744:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005748:	ea03 0b01 	andle.w	fp, r3, r1
 800574c:	2200      	movs	r2, #0
 800574e:	2300      	movs	r3, #0
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	f7fb f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005758:	2800      	cmp	r0, #0
 800575a:	d1a6      	bne.n	80056aa <_strtod_l+0x562>
 800575c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005762:	9805      	ldr	r0, [sp, #20]
 8005764:	462b      	mov	r3, r5
 8005766:	463a      	mov	r2, r7
 8005768:	f002 f892 	bl	8007890 <__s2b>
 800576c:	900a      	str	r0, [sp, #40]	@ 0x28
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f af05 	beq.w	800557e <_strtod_l+0x436>
 8005774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005776:	2a00      	cmp	r2, #0
 8005778:	eba9 0308 	sub.w	r3, r9, r8
 800577c:	bfa8      	it	ge
 800577e:	2300      	movge	r3, #0
 8005780:	9312      	str	r3, [sp, #72]	@ 0x48
 8005782:	2400      	movs	r4, #0
 8005784:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005788:	9316      	str	r3, [sp, #88]	@ 0x58
 800578a:	46a0      	mov	r8, r4
 800578c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800578e:	9805      	ldr	r0, [sp, #20]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	f001 ffd5 	bl	8007740 <_Balloc>
 8005796:	4681      	mov	r9, r0
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f aef4 	beq.w	8005586 <_strtod_l+0x43e>
 800579e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	3202      	adds	r2, #2
 80057a4:	f103 010c 	add.w	r1, r3, #12
 80057a8:	0092      	lsls	r2, r2, #2
 80057aa:	300c      	adds	r0, #12
 80057ac:	f001 fc64 	bl	8007078 <memcpy>
 80057b0:	ec4b ab10 	vmov	d0, sl, fp
 80057b4:	9805      	ldr	r0, [sp, #20]
 80057b6:	aa1c      	add	r2, sp, #112	@ 0x70
 80057b8:	a91b      	add	r1, sp, #108	@ 0x6c
 80057ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80057be:	f002 fba3 	bl	8007f08 <__d2b>
 80057c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f43f aede 	beq.w	8005586 <_strtod_l+0x43e>
 80057ca:	9805      	ldr	r0, [sp, #20]
 80057cc:	2101      	movs	r1, #1
 80057ce:	f002 f8f5 	bl	80079bc <__i2b>
 80057d2:	4680      	mov	r8, r0
 80057d4:	b948      	cbnz	r0, 80057ea <_strtod_l+0x6a2>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	e6d4      	b.n	8005586 <_strtod_l+0x43e>
 80057dc:	f04f 32ff 	mov.w	r2, #4294967295
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	ea03 0a0a 	and.w	sl, r3, sl
 80057e8:	e7b0      	b.n	800574c <_strtod_l+0x604>
 80057ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80057ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	bfab      	itete	ge
 80057f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80057f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80057f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80057f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80057fa:	bfac      	ite	ge
 80057fc:	18ef      	addge	r7, r5, r3
 80057fe:	1b5e      	sublt	r6, r3, r5
 8005800:	9b08      	ldr	r3, [sp, #32]
 8005802:	1aed      	subs	r5, r5, r3
 8005804:	4415      	add	r5, r2
 8005806:	4b66      	ldr	r3, [pc, #408]	@ (80059a0 <_strtod_l+0x858>)
 8005808:	3d01      	subs	r5, #1
 800580a:	429d      	cmp	r5, r3
 800580c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005810:	da50      	bge.n	80058b4 <_strtod_l+0x76c>
 8005812:	1b5b      	subs	r3, r3, r5
 8005814:	2b1f      	cmp	r3, #31
 8005816:	eba2 0203 	sub.w	r2, r2, r3
 800581a:	f04f 0101 	mov.w	r1, #1
 800581e:	dc3d      	bgt.n	800589c <_strtod_l+0x754>
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005826:	2300      	movs	r3, #0
 8005828:	9310      	str	r3, [sp, #64]	@ 0x40
 800582a:	18bd      	adds	r5, r7, r2
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	42af      	cmp	r7, r5
 8005830:	4416      	add	r6, r2
 8005832:	441e      	add	r6, r3
 8005834:	463b      	mov	r3, r7
 8005836:	bfa8      	it	ge
 8005838:	462b      	movge	r3, r5
 800583a:	42b3      	cmp	r3, r6
 800583c:	bfa8      	it	ge
 800583e:	4633      	movge	r3, r6
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfc2      	ittt	gt
 8005844:	1aed      	subgt	r5, r5, r3
 8005846:	1af6      	subgt	r6, r6, r3
 8005848:	1aff      	subgt	r7, r7, r3
 800584a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800584c:	2b00      	cmp	r3, #0
 800584e:	dd16      	ble.n	800587e <_strtod_l+0x736>
 8005850:	4641      	mov	r1, r8
 8005852:	9805      	ldr	r0, [sp, #20]
 8005854:	461a      	mov	r2, r3
 8005856:	f002 f971 	bl	8007b3c <__pow5mult>
 800585a:	4680      	mov	r8, r0
 800585c:	2800      	cmp	r0, #0
 800585e:	d0ba      	beq.n	80057d6 <_strtod_l+0x68e>
 8005860:	4601      	mov	r1, r0
 8005862:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005864:	9805      	ldr	r0, [sp, #20]
 8005866:	f002 f8bf 	bl	80079e8 <__multiply>
 800586a:	900e      	str	r0, [sp, #56]	@ 0x38
 800586c:	2800      	cmp	r0, #0
 800586e:	f43f ae8a 	beq.w	8005586 <_strtod_l+0x43e>
 8005872:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005874:	9805      	ldr	r0, [sp, #20]
 8005876:	f001 ffa3 	bl	80077c0 <_Bfree>
 800587a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800587c:	931a      	str	r3, [sp, #104]	@ 0x68
 800587e:	2d00      	cmp	r5, #0
 8005880:	dc1d      	bgt.n	80058be <_strtod_l+0x776>
 8005882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	dd23      	ble.n	80058d0 <_strtod_l+0x788>
 8005888:	4649      	mov	r1, r9
 800588a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800588c:	9805      	ldr	r0, [sp, #20]
 800588e:	f002 f955 	bl	8007b3c <__pow5mult>
 8005892:	4681      	mov	r9, r0
 8005894:	b9e0      	cbnz	r0, 80058d0 <_strtod_l+0x788>
 8005896:	f04f 0900 	mov.w	r9, #0
 800589a:	e674      	b.n	8005586 <_strtod_l+0x43e>
 800589c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80058a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80058a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80058a8:	35e2      	adds	r5, #226	@ 0xe2
 80058aa:	fa01 f305 	lsl.w	r3, r1, r5
 80058ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80058b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80058b2:	e7ba      	b.n	800582a <_strtod_l+0x6e2>
 80058b4:	2300      	movs	r3, #0
 80058b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80058b8:	2301      	movs	r3, #1
 80058ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058bc:	e7b5      	b.n	800582a <_strtod_l+0x6e2>
 80058be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058c0:	9805      	ldr	r0, [sp, #20]
 80058c2:	462a      	mov	r2, r5
 80058c4:	f002 f994 	bl	8007bf0 <__lshift>
 80058c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1d9      	bne.n	8005882 <_strtod_l+0x73a>
 80058ce:	e65a      	b.n	8005586 <_strtod_l+0x43e>
 80058d0:	2e00      	cmp	r6, #0
 80058d2:	dd07      	ble.n	80058e4 <_strtod_l+0x79c>
 80058d4:	4649      	mov	r1, r9
 80058d6:	9805      	ldr	r0, [sp, #20]
 80058d8:	4632      	mov	r2, r6
 80058da:	f002 f989 	bl	8007bf0 <__lshift>
 80058de:	4681      	mov	r9, r0
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0d8      	beq.n	8005896 <_strtod_l+0x74e>
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	dd08      	ble.n	80058fa <_strtod_l+0x7b2>
 80058e8:	4641      	mov	r1, r8
 80058ea:	9805      	ldr	r0, [sp, #20]
 80058ec:	463a      	mov	r2, r7
 80058ee:	f002 f97f 	bl	8007bf0 <__lshift>
 80058f2:	4680      	mov	r8, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f43f ae46 	beq.w	8005586 <_strtod_l+0x43e>
 80058fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058fc:	9805      	ldr	r0, [sp, #20]
 80058fe:	464a      	mov	r2, r9
 8005900:	f002 f9fe 	bl	8007d00 <__mdiff>
 8005904:	4604      	mov	r4, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	f43f ae3d 	beq.w	8005586 <_strtod_l+0x43e>
 800590c:	68c3      	ldr	r3, [r0, #12]
 800590e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005910:	2300      	movs	r3, #0
 8005912:	60c3      	str	r3, [r0, #12]
 8005914:	4641      	mov	r1, r8
 8005916:	f002 f9d7 	bl	8007cc8 <__mcmp>
 800591a:	2800      	cmp	r0, #0
 800591c:	da46      	bge.n	80059ac <_strtod_l+0x864>
 800591e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005920:	ea53 030a 	orrs.w	r3, r3, sl
 8005924:	d16c      	bne.n	8005a00 <_strtod_l+0x8b8>
 8005926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800592a:	2b00      	cmp	r3, #0
 800592c:	d168      	bne.n	8005a00 <_strtod_l+0x8b8>
 800592e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005932:	0d1b      	lsrs	r3, r3, #20
 8005934:	051b      	lsls	r3, r3, #20
 8005936:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800593a:	d961      	bls.n	8005a00 <_strtod_l+0x8b8>
 800593c:	6963      	ldr	r3, [r4, #20]
 800593e:	b913      	cbnz	r3, 8005946 <_strtod_l+0x7fe>
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	2b01      	cmp	r3, #1
 8005944:	dd5c      	ble.n	8005a00 <_strtod_l+0x8b8>
 8005946:	4621      	mov	r1, r4
 8005948:	2201      	movs	r2, #1
 800594a:	9805      	ldr	r0, [sp, #20]
 800594c:	f002 f950 	bl	8007bf0 <__lshift>
 8005950:	4641      	mov	r1, r8
 8005952:	4604      	mov	r4, r0
 8005954:	f002 f9b8 	bl	8007cc8 <__mcmp>
 8005958:	2800      	cmp	r0, #0
 800595a:	dd51      	ble.n	8005a00 <_strtod_l+0x8b8>
 800595c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005960:	9a08      	ldr	r2, [sp, #32]
 8005962:	0d1b      	lsrs	r3, r3, #20
 8005964:	051b      	lsls	r3, r3, #20
 8005966:	2a00      	cmp	r2, #0
 8005968:	d06b      	beq.n	8005a42 <_strtod_l+0x8fa>
 800596a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800596e:	d868      	bhi.n	8005a42 <_strtod_l+0x8fa>
 8005970:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005974:	f67f ae9d 	bls.w	80056b2 <_strtod_l+0x56a>
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <_strtod_l+0x85c>)
 800597a:	4650      	mov	r0, sl
 800597c:	4659      	mov	r1, fp
 800597e:	2200      	movs	r2, #0
 8005980:	f7fa fe3a 	bl	80005f8 <__aeabi_dmul>
 8005984:	4b08      	ldr	r3, [pc, #32]	@ (80059a8 <_strtod_l+0x860>)
 8005986:	400b      	ands	r3, r1
 8005988:	4682      	mov	sl, r0
 800598a:	468b      	mov	fp, r1
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f ae05 	bne.w	800559c <_strtod_l+0x454>
 8005992:	9a05      	ldr	r2, [sp, #20]
 8005994:	2322      	movs	r3, #34	@ 0x22
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e600      	b.n	800559c <_strtod_l+0x454>
 800599a:	bf00      	nop
 800599c:	080084f0 	.word	0x080084f0
 80059a0:	fffffc02 	.word	0xfffffc02
 80059a4:	39500000 	.word	0x39500000
 80059a8:	7ff00000 	.word	0x7ff00000
 80059ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80059b0:	d165      	bne.n	8005a7e <_strtod_l+0x936>
 80059b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80059b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b8:	b35a      	cbz	r2, 8005a12 <_strtod_l+0x8ca>
 80059ba:	4a9f      	ldr	r2, [pc, #636]	@ (8005c38 <_strtod_l+0xaf0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d12b      	bne.n	8005a18 <_strtod_l+0x8d0>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	4651      	mov	r1, sl
 80059c4:	b303      	cbz	r3, 8005a08 <_strtod_l+0x8c0>
 80059c6:	4b9d      	ldr	r3, [pc, #628]	@ (8005c3c <_strtod_l+0xaf4>)
 80059c8:	465a      	mov	r2, fp
 80059ca:	4013      	ands	r3, r2
 80059cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	d81b      	bhi.n	8005a0e <_strtod_l+0x8c6>
 80059d6:	0d1b      	lsrs	r3, r3, #20
 80059d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	4299      	cmp	r1, r3
 80059e2:	d119      	bne.n	8005a18 <_strtod_l+0x8d0>
 80059e4:	4b96      	ldr	r3, [pc, #600]	@ (8005c40 <_strtod_l+0xaf8>)
 80059e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d102      	bne.n	80059f2 <_strtod_l+0x8aa>
 80059ec:	3101      	adds	r1, #1
 80059ee:	f43f adca 	beq.w	8005586 <_strtod_l+0x43e>
 80059f2:	4b92      	ldr	r3, [pc, #584]	@ (8005c3c <_strtod_l+0xaf4>)
 80059f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059f6:	401a      	ands	r2, r3
 80059f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80059fc:	f04f 0a00 	mov.w	sl, #0
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1b8      	bne.n	8005978 <_strtod_l+0x830>
 8005a06:	e5c9      	b.n	800559c <_strtod_l+0x454>
 8005a08:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0c:	e7e8      	b.n	80059e0 <_strtod_l+0x898>
 8005a0e:	4613      	mov	r3, r2
 8005a10:	e7e6      	b.n	80059e0 <_strtod_l+0x898>
 8005a12:	ea53 030a 	orrs.w	r3, r3, sl
 8005a16:	d0a1      	beq.n	800595c <_strtod_l+0x814>
 8005a18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a1a:	b1db      	cbz	r3, 8005a54 <_strtod_l+0x90c>
 8005a1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a1e:	4213      	tst	r3, r2
 8005a20:	d0ee      	beq.n	8005a00 <_strtod_l+0x8b8>
 8005a22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	4650      	mov	r0, sl
 8005a28:	4659      	mov	r1, fp
 8005a2a:	b1bb      	cbz	r3, 8005a5c <_strtod_l+0x914>
 8005a2c:	f7ff fb6c 	bl	8005108 <sulp>
 8005a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a34:	ec53 2b10 	vmov	r2, r3, d0
 8005a38:	f7fa fc28 	bl	800028c <__adddf3>
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	468b      	mov	fp, r1
 8005a40:	e7de      	b.n	8005a00 <_strtod_l+0x8b8>
 8005a42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005a46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a4e:	f04f 3aff 	mov.w	sl, #4294967295
 8005a52:	e7d5      	b.n	8005a00 <_strtod_l+0x8b8>
 8005a54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005a56:	ea13 0f0a 	tst.w	r3, sl
 8005a5a:	e7e1      	b.n	8005a20 <_strtod_l+0x8d8>
 8005a5c:	f7ff fb54 	bl	8005108 <sulp>
 8005a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a64:	ec53 2b10 	vmov	r2, r3, d0
 8005a68:	f7fa fc0e 	bl	8000288 <__aeabi_dsub>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4682      	mov	sl, r0
 8005a72:	468b      	mov	fp, r1
 8005a74:	f7fb f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d0c1      	beq.n	8005a00 <_strtod_l+0x8b8>
 8005a7c:	e619      	b.n	80056b2 <_strtod_l+0x56a>
 8005a7e:	4641      	mov	r1, r8
 8005a80:	4620      	mov	r0, r4
 8005a82:	f002 fa99 	bl	8007fb8 <__ratio>
 8005a86:	ec57 6b10 	vmov	r6, r7, d0
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005a90:	4630      	mov	r0, r6
 8005a92:	4639      	mov	r1, r7
 8005a94:	f7fb f82c 	bl	8000af0 <__aeabi_dcmple>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d06f      	beq.n	8005b7c <_strtod_l+0xa34>
 8005a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d17a      	bne.n	8005b98 <_strtod_l+0xa50>
 8005aa2:	f1ba 0f00 	cmp.w	sl, #0
 8005aa6:	d158      	bne.n	8005b5a <_strtod_l+0xa12>
 8005aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d15a      	bne.n	8005b68 <_strtod_l+0xa20>
 8005ab2:	4b64      	ldr	r3, [pc, #400]	@ (8005c44 <_strtod_l+0xafc>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	4639      	mov	r1, r7
 8005aba:	f7fb f80f 	bl	8000adc <__aeabi_dcmplt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d159      	bne.n	8005b76 <_strtod_l+0xa2e>
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	4b60      	ldr	r3, [pc, #384]	@ (8005c48 <_strtod_l+0xb00>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f7fa fd95 	bl	80005f8 <__aeabi_dmul>
 8005ace:	4606      	mov	r6, r0
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005ad6:	9606      	str	r6, [sp, #24]
 8005ad8:	9307      	str	r3, [sp, #28]
 8005ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ade:	4d57      	ldr	r5, [pc, #348]	@ (8005c3c <_strtod_l+0xaf4>)
 8005ae0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ae6:	401d      	ands	r5, r3
 8005ae8:	4b58      	ldr	r3, [pc, #352]	@ (8005c4c <_strtod_l+0xb04>)
 8005aea:	429d      	cmp	r5, r3
 8005aec:	f040 80b2 	bne.w	8005c54 <_strtod_l+0xb0c>
 8005af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005af2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005af6:	ec4b ab10 	vmov	d0, sl, fp
 8005afa:	f002 f995 	bl	8007e28 <__ulp>
 8005afe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b02:	ec51 0b10 	vmov	r0, r1, d0
 8005b06:	f7fa fd77 	bl	80005f8 <__aeabi_dmul>
 8005b0a:	4652      	mov	r2, sl
 8005b0c:	465b      	mov	r3, fp
 8005b0e:	f7fa fbbd 	bl	800028c <__adddf3>
 8005b12:	460b      	mov	r3, r1
 8005b14:	4949      	ldr	r1, [pc, #292]	@ (8005c3c <_strtod_l+0xaf4>)
 8005b16:	4a4e      	ldr	r2, [pc, #312]	@ (8005c50 <_strtod_l+0xb08>)
 8005b18:	4019      	ands	r1, r3
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	d942      	bls.n	8005ba6 <_strtod_l+0xa5e>
 8005b20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b22:	4b47      	ldr	r3, [pc, #284]	@ (8005c40 <_strtod_l+0xaf8>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d103      	bne.n	8005b30 <_strtod_l+0x9e8>
 8005b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f43f ad2b 	beq.w	8005586 <_strtod_l+0x43e>
 8005b30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005c40 <_strtod_l+0xaf8>
 8005b34:	f04f 3aff 	mov.w	sl, #4294967295
 8005b38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b3a:	9805      	ldr	r0, [sp, #20]
 8005b3c:	f001 fe40 	bl	80077c0 <_Bfree>
 8005b40:	9805      	ldr	r0, [sp, #20]
 8005b42:	4649      	mov	r1, r9
 8005b44:	f001 fe3c 	bl	80077c0 <_Bfree>
 8005b48:	9805      	ldr	r0, [sp, #20]
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	f001 fe38 	bl	80077c0 <_Bfree>
 8005b50:	9805      	ldr	r0, [sp, #20]
 8005b52:	4621      	mov	r1, r4
 8005b54:	f001 fe34 	bl	80077c0 <_Bfree>
 8005b58:	e618      	b.n	800578c <_strtod_l+0x644>
 8005b5a:	f1ba 0f01 	cmp.w	sl, #1
 8005b5e:	d103      	bne.n	8005b68 <_strtod_l+0xa20>
 8005b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f43f ada5 	beq.w	80056b2 <_strtod_l+0x56a>
 8005b68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005c18 <_strtod_l+0xad0>
 8005b6c:	4f35      	ldr	r7, [pc, #212]	@ (8005c44 <_strtod_l+0xafc>)
 8005b6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005b72:	2600      	movs	r6, #0
 8005b74:	e7b1      	b.n	8005ada <_strtod_l+0x992>
 8005b76:	4f34      	ldr	r7, [pc, #208]	@ (8005c48 <_strtod_l+0xb00>)
 8005b78:	2600      	movs	r6, #0
 8005b7a:	e7aa      	b.n	8005ad2 <_strtod_l+0x98a>
 8005b7c:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <_strtod_l+0xb00>)
 8005b7e:	4630      	mov	r0, r6
 8005b80:	4639      	mov	r1, r7
 8005b82:	2200      	movs	r2, #0
 8005b84:	f7fa fd38 	bl	80005f8 <__aeabi_dmul>
 8005b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460f      	mov	r7, r1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d09f      	beq.n	8005ad2 <_strtod_l+0x98a>
 8005b92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005b96:	e7a0      	b.n	8005ada <_strtod_l+0x992>
 8005b98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005c20 <_strtod_l+0xad8>
 8005b9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ba0:	ec57 6b17 	vmov	r6, r7, d7
 8005ba4:	e799      	b.n	8005ada <_strtod_l+0x992>
 8005ba6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005baa:	9b08      	ldr	r3, [sp, #32]
 8005bac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1c1      	bne.n	8005b38 <_strtod_l+0x9f0>
 8005bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005bb8:	0d1b      	lsrs	r3, r3, #20
 8005bba:	051b      	lsls	r3, r3, #20
 8005bbc:	429d      	cmp	r5, r3
 8005bbe:	d1bb      	bne.n	8005b38 <_strtod_l+0x9f0>
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fb f850 	bl	8000c68 <__aeabi_d2lz>
 8005bc8:	f7fa fce8 	bl	800059c <__aeabi_l2d>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa fb58 	bl	8000288 <__aeabi_dsub>
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4602      	mov	r2, r0
 8005bdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005be0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005be6:	ea46 060a 	orr.w	r6, r6, sl
 8005bea:	431e      	orrs	r6, r3
 8005bec:	d06f      	beq.n	8005cce <_strtod_l+0xb86>
 8005bee:	a30e      	add	r3, pc, #56	@ (adr r3, 8005c28 <_strtod_l+0xae0>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa ff72 	bl	8000adc <__aeabi_dcmplt>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f47f accf 	bne.w	800559c <_strtod_l+0x454>
 8005bfe:	a30c      	add	r3, pc, #48	@ (adr r3, 8005c30 <_strtod_l+0xae8>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c08:	f7fa ff86 	bl	8000b18 <__aeabi_dcmpgt>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d093      	beq.n	8005b38 <_strtod_l+0x9f0>
 8005c10:	e4c4      	b.n	800559c <_strtod_l+0x454>
 8005c12:	bf00      	nop
 8005c14:	f3af 8000 	nop.w
 8005c18:	00000000 	.word	0x00000000
 8005c1c:	bff00000 	.word	0xbff00000
 8005c20:	00000000 	.word	0x00000000
 8005c24:	3ff00000 	.word	0x3ff00000
 8005c28:	94a03595 	.word	0x94a03595
 8005c2c:	3fdfffff 	.word	0x3fdfffff
 8005c30:	35afe535 	.word	0x35afe535
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	000fffff 	.word	0x000fffff
 8005c3c:	7ff00000 	.word	0x7ff00000
 8005c40:	7fefffff 	.word	0x7fefffff
 8005c44:	3ff00000 	.word	0x3ff00000
 8005c48:	3fe00000 	.word	0x3fe00000
 8005c4c:	7fe00000 	.word	0x7fe00000
 8005c50:	7c9fffff 	.word	0x7c9fffff
 8005c54:	9b08      	ldr	r3, [sp, #32]
 8005c56:	b323      	cbz	r3, 8005ca2 <_strtod_l+0xb5a>
 8005c58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005c5c:	d821      	bhi.n	8005ca2 <_strtod_l+0xb5a>
 8005c5e:	a328      	add	r3, pc, #160	@ (adr r3, 8005d00 <_strtod_l+0xbb8>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	4630      	mov	r0, r6
 8005c66:	4639      	mov	r1, r7
 8005c68:	f7fa ff42 	bl	8000af0 <__aeabi_dcmple>
 8005c6c:	b1a0      	cbz	r0, 8005c98 <_strtod_l+0xb50>
 8005c6e:	4639      	mov	r1, r7
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7fa ff71 	bl	8000b58 <__aeabi_d2uiz>
 8005c76:	2801      	cmp	r0, #1
 8005c78:	bf38      	it	cc
 8005c7a:	2001      	movcc	r0, #1
 8005c7c:	f7fa fc42 	bl	8000504 <__aeabi_ui2d>
 8005c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c82:	4606      	mov	r6, r0
 8005c84:	460f      	mov	r7, r1
 8005c86:	b9fb      	cbnz	r3, 8005cc8 <_strtod_l+0xb80>
 8005c88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c8c:	9014      	str	r0, [sp, #80]	@ 0x50
 8005c8e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005c94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005c98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005c9e:	1b5b      	subs	r3, r3, r5
 8005ca0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005ca2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005ca6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005caa:	f002 f8bd 	bl	8007e28 <__ulp>
 8005cae:	4650      	mov	r0, sl
 8005cb0:	ec53 2b10 	vmov	r2, r3, d0
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	f7fa fc9f 	bl	80005f8 <__aeabi_dmul>
 8005cba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cbe:	f7fa fae5 	bl	800028c <__adddf3>
 8005cc2:	4682      	mov	sl, r0
 8005cc4:	468b      	mov	fp, r1
 8005cc6:	e770      	b.n	8005baa <_strtod_l+0xa62>
 8005cc8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005ccc:	e7e0      	b.n	8005c90 <_strtod_l+0xb48>
 8005cce:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d08 <_strtod_l+0xbc0>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa ff02 	bl	8000adc <__aeabi_dcmplt>
 8005cd8:	e798      	b.n	8005c0c <_strtod_l+0xac4>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cde:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	f7ff ba6d 	b.w	80051c2 <_strtod_l+0x7a>
 8005ce8:	2a65      	cmp	r2, #101	@ 0x65
 8005cea:	f43f ab66 	beq.w	80053ba <_strtod_l+0x272>
 8005cee:	2a45      	cmp	r2, #69	@ 0x45
 8005cf0:	f43f ab63 	beq.w	80053ba <_strtod_l+0x272>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f7ff bb9e 	b.w	8005436 <_strtod_l+0x2ee>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	ffc00000 	.word	0xffc00000
 8005d04:	41dfffff 	.word	0x41dfffff
 8005d08:	94a03595 	.word	0x94a03595
 8005d0c:	3fcfffff 	.word	0x3fcfffff

08005d10 <_strtod_r>:
 8005d10:	4b01      	ldr	r3, [pc, #4]	@ (8005d18 <_strtod_r+0x8>)
 8005d12:	f7ff ba19 	b.w	8005148 <_strtod_l>
 8005d16:	bf00      	nop
 8005d18:	20000068 	.word	0x20000068

08005d1c <_strtol_l.constprop.0>:
 8005d1c:	2b24      	cmp	r3, #36	@ 0x24
 8005d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d22:	4686      	mov	lr, r0
 8005d24:	4690      	mov	r8, r2
 8005d26:	d801      	bhi.n	8005d2c <_strtol_l.constprop.0+0x10>
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d106      	bne.n	8005d3a <_strtol_l.constprop.0+0x1e>
 8005d2c:	f7ff f8c0 	bl	8004eb0 <__errno>
 8005d30:	2316      	movs	r3, #22
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	2000      	movs	r0, #0
 8005d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3a:	4834      	ldr	r0, [pc, #208]	@ (8005e0c <_strtol_l.constprop.0+0xf0>)
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	462a      	mov	r2, r5
 8005d40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d44:	5d06      	ldrb	r6, [r0, r4]
 8005d46:	f016 0608 	ands.w	r6, r6, #8
 8005d4a:	d1f8      	bne.n	8005d3e <_strtol_l.constprop.0+0x22>
 8005d4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d4e:	d12d      	bne.n	8005dac <_strtol_l.constprop.0+0x90>
 8005d50:	782c      	ldrb	r4, [r5, #0]
 8005d52:	2601      	movs	r6, #1
 8005d54:	1c95      	adds	r5, r2, #2
 8005d56:	f033 0210 	bics.w	r2, r3, #16
 8005d5a:	d109      	bne.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005d5c:	2c30      	cmp	r4, #48	@ 0x30
 8005d5e:	d12a      	bne.n	8005db6 <_strtol_l.constprop.0+0x9a>
 8005d60:	782a      	ldrb	r2, [r5, #0]
 8005d62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d66:	2a58      	cmp	r2, #88	@ 0x58
 8005d68:	d125      	bne.n	8005db6 <_strtol_l.constprop.0+0x9a>
 8005d6a:	786c      	ldrb	r4, [r5, #1]
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	3502      	adds	r5, #2
 8005d70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005d74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d78:	2200      	movs	r2, #0
 8005d7a:	fbbc f9f3 	udiv	r9, ip, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005d88:	2f09      	cmp	r7, #9
 8005d8a:	d81b      	bhi.n	8005dc4 <_strtol_l.constprop.0+0xa8>
 8005d8c:	463c      	mov	r4, r7
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	dd27      	ble.n	8005de2 <_strtol_l.constprop.0+0xc6>
 8005d92:	1c57      	adds	r7, r2, #1
 8005d94:	d007      	beq.n	8005da6 <_strtol_l.constprop.0+0x8a>
 8005d96:	4581      	cmp	r9, r0
 8005d98:	d320      	bcc.n	8005ddc <_strtol_l.constprop.0+0xc0>
 8005d9a:	d101      	bne.n	8005da0 <_strtol_l.constprop.0+0x84>
 8005d9c:	45a2      	cmp	sl, r4
 8005d9e:	db1d      	blt.n	8005ddc <_strtol_l.constprop.0+0xc0>
 8005da0:	fb00 4003 	mla	r0, r0, r3, r4
 8005da4:	2201      	movs	r2, #1
 8005da6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005daa:	e7eb      	b.n	8005d84 <_strtol_l.constprop.0+0x68>
 8005dac:	2c2b      	cmp	r4, #43	@ 0x2b
 8005dae:	bf04      	itt	eq
 8005db0:	782c      	ldrbeq	r4, [r5, #0]
 8005db2:	1c95      	addeq	r5, r2, #2
 8005db4:	e7cf      	b.n	8005d56 <_strtol_l.constprop.0+0x3a>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1da      	bne.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005dba:	2c30      	cmp	r4, #48	@ 0x30
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2308      	moveq	r3, #8
 8005dc0:	230a      	movne	r3, #10
 8005dc2:	e7d5      	b.n	8005d70 <_strtol_l.constprop.0+0x54>
 8005dc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005dc8:	2f19      	cmp	r7, #25
 8005dca:	d801      	bhi.n	8005dd0 <_strtol_l.constprop.0+0xb4>
 8005dcc:	3c37      	subs	r4, #55	@ 0x37
 8005dce:	e7de      	b.n	8005d8e <_strtol_l.constprop.0+0x72>
 8005dd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005dd4:	2f19      	cmp	r7, #25
 8005dd6:	d804      	bhi.n	8005de2 <_strtol_l.constprop.0+0xc6>
 8005dd8:	3c57      	subs	r4, #87	@ 0x57
 8005dda:	e7d8      	b.n	8005d8e <_strtol_l.constprop.0+0x72>
 8005ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8005de0:	e7e1      	b.n	8005da6 <_strtol_l.constprop.0+0x8a>
 8005de2:	1c53      	adds	r3, r2, #1
 8005de4:	d108      	bne.n	8005df8 <_strtol_l.constprop.0+0xdc>
 8005de6:	2322      	movs	r3, #34	@ 0x22
 8005de8:	f8ce 3000 	str.w	r3, [lr]
 8005dec:	4660      	mov	r0, ip
 8005dee:	f1b8 0f00 	cmp.w	r8, #0
 8005df2:	d0a0      	beq.n	8005d36 <_strtol_l.constprop.0+0x1a>
 8005df4:	1e69      	subs	r1, r5, #1
 8005df6:	e006      	b.n	8005e06 <_strtol_l.constprop.0+0xea>
 8005df8:	b106      	cbz	r6, 8005dfc <_strtol_l.constprop.0+0xe0>
 8005dfa:	4240      	negs	r0, r0
 8005dfc:	f1b8 0f00 	cmp.w	r8, #0
 8005e00:	d099      	beq.n	8005d36 <_strtol_l.constprop.0+0x1a>
 8005e02:	2a00      	cmp	r2, #0
 8005e04:	d1f6      	bne.n	8005df4 <_strtol_l.constprop.0+0xd8>
 8005e06:	f8c8 1000 	str.w	r1, [r8]
 8005e0a:	e794      	b.n	8005d36 <_strtol_l.constprop.0+0x1a>
 8005e0c:	08008519 	.word	0x08008519

08005e10 <_strtol_r>:
 8005e10:	f7ff bf84 	b.w	8005d1c <_strtol_l.constprop.0>

08005e14 <__ssputs_r>:
 8005e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	688e      	ldr	r6, [r1, #8]
 8005e1a:	461f      	mov	r7, r3
 8005e1c:	42be      	cmp	r6, r7
 8005e1e:	680b      	ldr	r3, [r1, #0]
 8005e20:	4682      	mov	sl, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4690      	mov	r8, r2
 8005e26:	d82d      	bhi.n	8005e84 <__ssputs_r+0x70>
 8005e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e30:	d026      	beq.n	8005e80 <__ssputs_r+0x6c>
 8005e32:	6965      	ldr	r5, [r4, #20]
 8005e34:	6909      	ldr	r1, [r1, #16]
 8005e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e3a:	eba3 0901 	sub.w	r9, r3, r1
 8005e3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e42:	1c7b      	adds	r3, r7, #1
 8005e44:	444b      	add	r3, r9
 8005e46:	106d      	asrs	r5, r5, #1
 8005e48:	429d      	cmp	r5, r3
 8005e4a:	bf38      	it	cc
 8005e4c:	461d      	movcc	r5, r3
 8005e4e:	0553      	lsls	r3, r2, #21
 8005e50:	d527      	bpl.n	8005ea2 <__ssputs_r+0x8e>
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7ff f8cc 	bl	8004ff0 <_malloc_r>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	b360      	cbz	r0, 8005eb6 <__ssputs_r+0xa2>
 8005e5c:	6921      	ldr	r1, [r4, #16]
 8005e5e:	464a      	mov	r2, r9
 8005e60:	f001 f90a 	bl	8007078 <memcpy>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	6126      	str	r6, [r4, #16]
 8005e72:	6165      	str	r5, [r4, #20]
 8005e74:	444e      	add	r6, r9
 8005e76:	eba5 0509 	sub.w	r5, r5, r9
 8005e7a:	6026      	str	r6, [r4, #0]
 8005e7c:	60a5      	str	r5, [r4, #8]
 8005e7e:	463e      	mov	r6, r7
 8005e80:	42be      	cmp	r6, r7
 8005e82:	d900      	bls.n	8005e86 <__ssputs_r+0x72>
 8005e84:	463e      	mov	r6, r7
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	f001 f8b8 	bl	8007000 <memmove>
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	1b9b      	subs	r3, r3, r6
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	4433      	add	r3, r6
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	f002 f8fe 	bl	80080a4 <_realloc_r>
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d1e0      	bne.n	8005e70 <__ssputs_r+0x5c>
 8005eae:	6921      	ldr	r1, [r4, #16]
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	f7ff f831 	bl	8004f18 <_free_r>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	f8ca 3000 	str.w	r3, [sl]
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e7e9      	b.n	8005e9e <__ssputs_r+0x8a>
	...

08005ecc <_svfiprintf_r>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	4698      	mov	r8, r3
 8005ed2:	898b      	ldrh	r3, [r1, #12]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	b09d      	sub	sp, #116	@ 0x74
 8005ed8:	4607      	mov	r7, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	4614      	mov	r4, r2
 8005ede:	d510      	bpl.n	8005f02 <_svfiprintf_r+0x36>
 8005ee0:	690b      	ldr	r3, [r1, #16]
 8005ee2:	b973      	cbnz	r3, 8005f02 <_svfiprintf_r+0x36>
 8005ee4:	2140      	movs	r1, #64	@ 0x40
 8005ee6:	f7ff f883 	bl	8004ff0 <_malloc_r>
 8005eea:	6028      	str	r0, [r5, #0]
 8005eec:	6128      	str	r0, [r5, #16]
 8005eee:	b930      	cbnz	r0, 8005efe <_svfiprintf_r+0x32>
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	b01d      	add	sp, #116	@ 0x74
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	2340      	movs	r3, #64	@ 0x40
 8005f00:	616b      	str	r3, [r5, #20]
 8005f02:	2300      	movs	r3, #0
 8005f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f06:	2320      	movs	r3, #32
 8005f08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f10:	2330      	movs	r3, #48	@ 0x30
 8005f12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80060b0 <_svfiprintf_r+0x1e4>
 8005f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f1a:	f04f 0901 	mov.w	r9, #1
 8005f1e:	4623      	mov	r3, r4
 8005f20:	469a      	mov	sl, r3
 8005f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f26:	b10a      	cbz	r2, 8005f2c <_svfiprintf_r+0x60>
 8005f28:	2a25      	cmp	r2, #37	@ 0x25
 8005f2a:	d1f9      	bne.n	8005f20 <_svfiprintf_r+0x54>
 8005f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f30:	d00b      	beq.n	8005f4a <_svfiprintf_r+0x7e>
 8005f32:	465b      	mov	r3, fp
 8005f34:	4622      	mov	r2, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f7ff ff6b 	bl	8005e14 <__ssputs_r>
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f000 80a7 	beq.w	8006092 <_svfiprintf_r+0x1c6>
 8005f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f46:	445a      	add	r2, fp
 8005f48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 809f 	beq.w	8006092 <_svfiprintf_r+0x1c6>
 8005f54:	2300      	movs	r3, #0
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f5e:	f10a 0a01 	add.w	sl, sl, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	9307      	str	r3, [sp, #28]
 8005f66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f6c:	4654      	mov	r4, sl
 8005f6e:	2205      	movs	r2, #5
 8005f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f74:	484e      	ldr	r0, [pc, #312]	@ (80060b0 <_svfiprintf_r+0x1e4>)
 8005f76:	f7fa f933 	bl	80001e0 <memchr>
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	b9d8      	cbnz	r0, 8005fb6 <_svfiprintf_r+0xea>
 8005f7e:	06d0      	lsls	r0, r2, #27
 8005f80:	bf44      	itt	mi
 8005f82:	2320      	movmi	r3, #32
 8005f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f88:	0711      	lsls	r1, r2, #28
 8005f8a:	bf44      	itt	mi
 8005f8c:	232b      	movmi	r3, #43	@ 0x2b
 8005f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f92:	f89a 3000 	ldrb.w	r3, [sl]
 8005f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f98:	d015      	beq.n	8005fc6 <_svfiprintf_r+0xfa>
 8005f9a:	9a07      	ldr	r2, [sp, #28]
 8005f9c:	4654      	mov	r4, sl
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f04f 0c0a 	mov.w	ip, #10
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005faa:	3b30      	subs	r3, #48	@ 0x30
 8005fac:	2b09      	cmp	r3, #9
 8005fae:	d94b      	bls.n	8006048 <_svfiprintf_r+0x17c>
 8005fb0:	b1b0      	cbz	r0, 8005fe0 <_svfiprintf_r+0x114>
 8005fb2:	9207      	str	r2, [sp, #28]
 8005fb4:	e014      	b.n	8005fe0 <_svfiprintf_r+0x114>
 8005fb6:	eba0 0308 	sub.w	r3, r0, r8
 8005fba:	fa09 f303 	lsl.w	r3, r9, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	46a2      	mov	sl, r4
 8005fc4:	e7d2      	b.n	8005f6c <_svfiprintf_r+0xa0>
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	1d19      	adds	r1, r3, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	9103      	str	r1, [sp, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bfbb      	ittet	lt
 8005fd2:	425b      	neglt	r3, r3
 8005fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fd8:	9307      	strge	r3, [sp, #28]
 8005fda:	9307      	strlt	r3, [sp, #28]
 8005fdc:	bfb8      	it	lt
 8005fde:	9204      	strlt	r2, [sp, #16]
 8005fe0:	7823      	ldrb	r3, [r4, #0]
 8005fe2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fe4:	d10a      	bne.n	8005ffc <_svfiprintf_r+0x130>
 8005fe6:	7863      	ldrb	r3, [r4, #1]
 8005fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fea:	d132      	bne.n	8006052 <_svfiprintf_r+0x186>
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	9203      	str	r2, [sp, #12]
 8005ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ff8:	3402      	adds	r4, #2
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80060c0 <_svfiprintf_r+0x1f4>
 8006000:	7821      	ldrb	r1, [r4, #0]
 8006002:	2203      	movs	r2, #3
 8006004:	4650      	mov	r0, sl
 8006006:	f7fa f8eb 	bl	80001e0 <memchr>
 800600a:	b138      	cbz	r0, 800601c <_svfiprintf_r+0x150>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	eba0 000a 	sub.w	r0, r0, sl
 8006012:	2240      	movs	r2, #64	@ 0x40
 8006014:	4082      	lsls	r2, r0
 8006016:	4313      	orrs	r3, r2
 8006018:	3401      	adds	r4, #1
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006020:	4824      	ldr	r0, [pc, #144]	@ (80060b4 <_svfiprintf_r+0x1e8>)
 8006022:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006026:	2206      	movs	r2, #6
 8006028:	f7fa f8da 	bl	80001e0 <memchr>
 800602c:	2800      	cmp	r0, #0
 800602e:	d036      	beq.n	800609e <_svfiprintf_r+0x1d2>
 8006030:	4b21      	ldr	r3, [pc, #132]	@ (80060b8 <_svfiprintf_r+0x1ec>)
 8006032:	bb1b      	cbnz	r3, 800607c <_svfiprintf_r+0x1b0>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	3307      	adds	r3, #7
 8006038:	f023 0307 	bic.w	r3, r3, #7
 800603c:	3308      	adds	r3, #8
 800603e:	9303      	str	r3, [sp, #12]
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	4433      	add	r3, r6
 8006044:	9309      	str	r3, [sp, #36]	@ 0x24
 8006046:	e76a      	b.n	8005f1e <_svfiprintf_r+0x52>
 8006048:	fb0c 3202 	mla	r2, ip, r2, r3
 800604c:	460c      	mov	r4, r1
 800604e:	2001      	movs	r0, #1
 8006050:	e7a8      	b.n	8005fa4 <_svfiprintf_r+0xd8>
 8006052:	2300      	movs	r3, #0
 8006054:	3401      	adds	r4, #1
 8006056:	9305      	str	r3, [sp, #20]
 8006058:	4619      	mov	r1, r3
 800605a:	f04f 0c0a 	mov.w	ip, #10
 800605e:	4620      	mov	r0, r4
 8006060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006064:	3a30      	subs	r2, #48	@ 0x30
 8006066:	2a09      	cmp	r2, #9
 8006068:	d903      	bls.n	8006072 <_svfiprintf_r+0x1a6>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0c6      	beq.n	8005ffc <_svfiprintf_r+0x130>
 800606e:	9105      	str	r1, [sp, #20]
 8006070:	e7c4      	b.n	8005ffc <_svfiprintf_r+0x130>
 8006072:	fb0c 2101 	mla	r1, ip, r1, r2
 8006076:	4604      	mov	r4, r0
 8006078:	2301      	movs	r3, #1
 800607a:	e7f0      	b.n	800605e <_svfiprintf_r+0x192>
 800607c:	ab03      	add	r3, sp, #12
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	462a      	mov	r2, r5
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <_svfiprintf_r+0x1f0>)
 8006084:	a904      	add	r1, sp, #16
 8006086:	4638      	mov	r0, r7
 8006088:	f3af 8000 	nop.w
 800608c:	1c42      	adds	r2, r0, #1
 800608e:	4606      	mov	r6, r0
 8006090:	d1d6      	bne.n	8006040 <_svfiprintf_r+0x174>
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	065b      	lsls	r3, r3, #25
 8006096:	f53f af2d 	bmi.w	8005ef4 <_svfiprintf_r+0x28>
 800609a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800609c:	e72c      	b.n	8005ef8 <_svfiprintf_r+0x2c>
 800609e:	ab03      	add	r3, sp, #12
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	462a      	mov	r2, r5
 80060a4:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <_svfiprintf_r+0x1f0>)
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	4638      	mov	r0, r7
 80060aa:	f000 fb87 	bl	80067bc <_printf_i>
 80060ae:	e7ed      	b.n	800608c <_svfiprintf_r+0x1c0>
 80060b0:	08008619 	.word	0x08008619
 80060b4:	08008623 	.word	0x08008623
 80060b8:	00000000 	.word	0x00000000
 80060bc:	08005e15 	.word	0x08005e15
 80060c0:	0800861f 	.word	0x0800861f

080060c4 <_sungetc_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	1c4b      	adds	r3, r1, #1
 80060c8:	4614      	mov	r4, r2
 80060ca:	d103      	bne.n	80060d4 <_sungetc_r+0x10>
 80060cc:	f04f 35ff 	mov.w	r5, #4294967295
 80060d0:	4628      	mov	r0, r5
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	8993      	ldrh	r3, [r2, #12]
 80060d6:	f023 0320 	bic.w	r3, r3, #32
 80060da:	8193      	strh	r3, [r2, #12]
 80060dc:	6853      	ldr	r3, [r2, #4]
 80060de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060e0:	b2cd      	uxtb	r5, r1
 80060e2:	b18a      	cbz	r2, 8006108 <_sungetc_r+0x44>
 80060e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80060e6:	429a      	cmp	r2, r3
 80060e8:	dd08      	ble.n	80060fc <_sungetc_r+0x38>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	6022      	str	r2, [r4, #0]
 80060f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	3301      	adds	r3, #1
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	e7e9      	b.n	80060d0 <_sungetc_r+0xc>
 80060fc:	4621      	mov	r1, r4
 80060fe:	f000 feb0 	bl	8006e62 <__submore>
 8006102:	2800      	cmp	r0, #0
 8006104:	d0f1      	beq.n	80060ea <_sungetc_r+0x26>
 8006106:	e7e1      	b.n	80060cc <_sungetc_r+0x8>
 8006108:	6921      	ldr	r1, [r4, #16]
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	b141      	cbz	r1, 8006120 <_sungetc_r+0x5c>
 800610e:	4291      	cmp	r1, r2
 8006110:	d206      	bcs.n	8006120 <_sungetc_r+0x5c>
 8006112:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006116:	42a9      	cmp	r1, r5
 8006118:	d102      	bne.n	8006120 <_sungetc_r+0x5c>
 800611a:	3a01      	subs	r2, #1
 800611c:	6022      	str	r2, [r4, #0]
 800611e:	e7ea      	b.n	80060f6 <_sungetc_r+0x32>
 8006120:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006124:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006128:	6363      	str	r3, [r4, #52]	@ 0x34
 800612a:	2303      	movs	r3, #3
 800612c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800612e:	4623      	mov	r3, r4
 8006130:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	2301      	movs	r3, #1
 8006138:	e7de      	b.n	80060f8 <_sungetc_r+0x34>

0800613a <__ssrefill_r>:
 800613a:	b510      	push	{r4, lr}
 800613c:	460c      	mov	r4, r1
 800613e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006140:	b169      	cbz	r1, 800615e <__ssrefill_r+0x24>
 8006142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006146:	4299      	cmp	r1, r3
 8006148:	d001      	beq.n	800614e <__ssrefill_r+0x14>
 800614a:	f7fe fee5 	bl	8004f18 <_free_r>
 800614e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	2000      	movs	r0, #0
 8006154:	6360      	str	r0, [r4, #52]	@ 0x34
 8006156:	b113      	cbz	r3, 800615e <__ssrefill_r+0x24>
 8006158:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	bd10      	pop	{r4, pc}
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f043 0320 	orr.w	r3, r3, #32
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	f04f 30ff 	mov.w	r0, #4294967295
 8006172:	e7f3      	b.n	800615c <__ssrefill_r+0x22>

08006174 <__ssvfiscanf_r>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	460c      	mov	r4, r1
 800617a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800617e:	2100      	movs	r1, #0
 8006180:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006184:	49a5      	ldr	r1, [pc, #660]	@ (800641c <__ssvfiscanf_r+0x2a8>)
 8006186:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006188:	f10d 0804 	add.w	r8, sp, #4
 800618c:	49a4      	ldr	r1, [pc, #656]	@ (8006420 <__ssvfiscanf_r+0x2ac>)
 800618e:	4fa5      	ldr	r7, [pc, #660]	@ (8006424 <__ssvfiscanf_r+0x2b0>)
 8006190:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006194:	4606      	mov	r6, r0
 8006196:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	7813      	ldrb	r3, [r2, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8158 	beq.w	8006452 <__ssvfiscanf_r+0x2de>
 80061a2:	5cf9      	ldrb	r1, [r7, r3]
 80061a4:	f011 0108 	ands.w	r1, r1, #8
 80061a8:	f102 0501 	add.w	r5, r2, #1
 80061ac:	d019      	beq.n	80061e2 <__ssvfiscanf_r+0x6e>
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dd0f      	ble.n	80061d4 <__ssvfiscanf_r+0x60>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	5cba      	ldrb	r2, [r7, r2]
 80061ba:	0712      	lsls	r2, r2, #28
 80061bc:	d401      	bmi.n	80061c2 <__ssvfiscanf_r+0x4e>
 80061be:	462a      	mov	r2, r5
 80061c0:	e7eb      	b.n	800619a <__ssvfiscanf_r+0x26>
 80061c2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80061c4:	3201      	adds	r2, #1
 80061c6:	9245      	str	r2, [sp, #276]	@ 0x114
 80061c8:	6862      	ldr	r2, [r4, #4]
 80061ca:	3301      	adds	r3, #1
 80061cc:	3a01      	subs	r2, #1
 80061ce:	6062      	str	r2, [r4, #4]
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	e7ec      	b.n	80061ae <__ssvfiscanf_r+0x3a>
 80061d4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80061d6:	4621      	mov	r1, r4
 80061d8:	4630      	mov	r0, r6
 80061da:	4798      	blx	r3
 80061dc:	2800      	cmp	r0, #0
 80061de:	d0e9      	beq.n	80061b4 <__ssvfiscanf_r+0x40>
 80061e0:	e7ed      	b.n	80061be <__ssvfiscanf_r+0x4a>
 80061e2:	2b25      	cmp	r3, #37	@ 0x25
 80061e4:	d012      	beq.n	800620c <__ssvfiscanf_r+0x98>
 80061e6:	4699      	mov	r9, r3
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f340 8093 	ble.w	8006316 <__ssvfiscanf_r+0x1a2>
 80061f0:	6822      	ldr	r2, [r4, #0]
 80061f2:	7813      	ldrb	r3, [r2, #0]
 80061f4:	454b      	cmp	r3, r9
 80061f6:	f040 812c 	bne.w	8006452 <__ssvfiscanf_r+0x2de>
 80061fa:	6863      	ldr	r3, [r4, #4]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	6063      	str	r3, [r4, #4]
 8006200:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006202:	3201      	adds	r2, #1
 8006204:	3301      	adds	r3, #1
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	9345      	str	r3, [sp, #276]	@ 0x114
 800620a:	e7d8      	b.n	80061be <__ssvfiscanf_r+0x4a>
 800620c:	9141      	str	r1, [sp, #260]	@ 0x104
 800620e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006210:	7853      	ldrb	r3, [r2, #1]
 8006212:	2b2a      	cmp	r3, #42	@ 0x2a
 8006214:	bf02      	ittt	eq
 8006216:	2310      	moveq	r3, #16
 8006218:	1c95      	addeq	r5, r2, #2
 800621a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800621c:	220a      	movs	r2, #10
 800621e:	46a9      	mov	r9, r5
 8006220:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006224:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006228:	2b09      	cmp	r3, #9
 800622a:	d91e      	bls.n	800626a <__ssvfiscanf_r+0xf6>
 800622c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006428 <__ssvfiscanf_r+0x2b4>
 8006230:	2203      	movs	r2, #3
 8006232:	4650      	mov	r0, sl
 8006234:	f7f9 ffd4 	bl	80001e0 <memchr>
 8006238:	b138      	cbz	r0, 800624a <__ssvfiscanf_r+0xd6>
 800623a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800623c:	eba0 000a 	sub.w	r0, r0, sl
 8006240:	2301      	movs	r3, #1
 8006242:	4083      	lsls	r3, r0
 8006244:	4313      	orrs	r3, r2
 8006246:	9341      	str	r3, [sp, #260]	@ 0x104
 8006248:	464d      	mov	r5, r9
 800624a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800624e:	2b78      	cmp	r3, #120	@ 0x78
 8006250:	d806      	bhi.n	8006260 <__ssvfiscanf_r+0xec>
 8006252:	2b57      	cmp	r3, #87	@ 0x57
 8006254:	d810      	bhi.n	8006278 <__ssvfiscanf_r+0x104>
 8006256:	2b25      	cmp	r3, #37	@ 0x25
 8006258:	d0c5      	beq.n	80061e6 <__ssvfiscanf_r+0x72>
 800625a:	d857      	bhi.n	800630c <__ssvfiscanf_r+0x198>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d065      	beq.n	800632c <__ssvfiscanf_r+0x1b8>
 8006260:	2303      	movs	r3, #3
 8006262:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006264:	230a      	movs	r3, #10
 8006266:	9342      	str	r3, [sp, #264]	@ 0x108
 8006268:	e078      	b.n	800635c <__ssvfiscanf_r+0x1e8>
 800626a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800626c:	fb02 1103 	mla	r1, r2, r3, r1
 8006270:	3930      	subs	r1, #48	@ 0x30
 8006272:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006274:	464d      	mov	r5, r9
 8006276:	e7d2      	b.n	800621e <__ssvfiscanf_r+0xaa>
 8006278:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800627c:	2a20      	cmp	r2, #32
 800627e:	d8ef      	bhi.n	8006260 <__ssvfiscanf_r+0xec>
 8006280:	a101      	add	r1, pc, #4	@ (adr r1, 8006288 <__ssvfiscanf_r+0x114>)
 8006282:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006286:	bf00      	nop
 8006288:	0800633b 	.word	0x0800633b
 800628c:	08006261 	.word	0x08006261
 8006290:	08006261 	.word	0x08006261
 8006294:	08006395 	.word	0x08006395
 8006298:	08006261 	.word	0x08006261
 800629c:	08006261 	.word	0x08006261
 80062a0:	08006261 	.word	0x08006261
 80062a4:	08006261 	.word	0x08006261
 80062a8:	08006261 	.word	0x08006261
 80062ac:	08006261 	.word	0x08006261
 80062b0:	08006261 	.word	0x08006261
 80062b4:	080063ab 	.word	0x080063ab
 80062b8:	08006391 	.word	0x08006391
 80062bc:	08006313 	.word	0x08006313
 80062c0:	08006313 	.word	0x08006313
 80062c4:	08006313 	.word	0x08006313
 80062c8:	08006261 	.word	0x08006261
 80062cc:	0800634d 	.word	0x0800634d
 80062d0:	08006261 	.word	0x08006261
 80062d4:	08006261 	.word	0x08006261
 80062d8:	08006261 	.word	0x08006261
 80062dc:	08006261 	.word	0x08006261
 80062e0:	080063bb 	.word	0x080063bb
 80062e4:	08006355 	.word	0x08006355
 80062e8:	08006333 	.word	0x08006333
 80062ec:	08006261 	.word	0x08006261
 80062f0:	08006261 	.word	0x08006261
 80062f4:	080063b7 	.word	0x080063b7
 80062f8:	08006261 	.word	0x08006261
 80062fc:	08006391 	.word	0x08006391
 8006300:	08006261 	.word	0x08006261
 8006304:	08006261 	.word	0x08006261
 8006308:	0800633b 	.word	0x0800633b
 800630c:	3b45      	subs	r3, #69	@ 0x45
 800630e:	2b02      	cmp	r3, #2
 8006310:	d8a6      	bhi.n	8006260 <__ssvfiscanf_r+0xec>
 8006312:	2305      	movs	r3, #5
 8006314:	e021      	b.n	800635a <__ssvfiscanf_r+0x1e6>
 8006316:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006318:	4621      	mov	r1, r4
 800631a:	4630      	mov	r0, r6
 800631c:	4798      	blx	r3
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f af66 	beq.w	80061f0 <__ssvfiscanf_r+0x7c>
 8006324:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006326:	2800      	cmp	r0, #0
 8006328:	f040 808b 	bne.w	8006442 <__ssvfiscanf_r+0x2ce>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e08b      	b.n	800644a <__ssvfiscanf_r+0x2d6>
 8006332:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006334:	f042 0220 	orr.w	r2, r2, #32
 8006338:	9241      	str	r2, [sp, #260]	@ 0x104
 800633a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800633c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006340:	9241      	str	r2, [sp, #260]	@ 0x104
 8006342:	2210      	movs	r2, #16
 8006344:	2b6e      	cmp	r3, #110	@ 0x6e
 8006346:	9242      	str	r2, [sp, #264]	@ 0x108
 8006348:	d902      	bls.n	8006350 <__ssvfiscanf_r+0x1dc>
 800634a:	e005      	b.n	8006358 <__ssvfiscanf_r+0x1e4>
 800634c:	2300      	movs	r3, #0
 800634e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006350:	2303      	movs	r3, #3
 8006352:	e002      	b.n	800635a <__ssvfiscanf_r+0x1e6>
 8006354:	2308      	movs	r3, #8
 8006356:	9342      	str	r3, [sp, #264]	@ 0x108
 8006358:	2304      	movs	r3, #4
 800635a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd39      	ble.n	80063d6 <__ssvfiscanf_r+0x262>
 8006362:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006364:	0659      	lsls	r1, r3, #25
 8006366:	d404      	bmi.n	8006372 <__ssvfiscanf_r+0x1fe>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	5cba      	ldrb	r2, [r7, r2]
 800636e:	0712      	lsls	r2, r2, #28
 8006370:	d438      	bmi.n	80063e4 <__ssvfiscanf_r+0x270>
 8006372:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006374:	2b02      	cmp	r3, #2
 8006376:	dc47      	bgt.n	8006408 <__ssvfiscanf_r+0x294>
 8006378:	466b      	mov	r3, sp
 800637a:	4622      	mov	r2, r4
 800637c:	a941      	add	r1, sp, #260	@ 0x104
 800637e:	4630      	mov	r0, r6
 8006380:	f000 fb3c 	bl	80069fc <_scanf_chars>
 8006384:	2801      	cmp	r0, #1
 8006386:	d064      	beq.n	8006452 <__ssvfiscanf_r+0x2de>
 8006388:	2802      	cmp	r0, #2
 800638a:	f47f af18 	bne.w	80061be <__ssvfiscanf_r+0x4a>
 800638e:	e7c9      	b.n	8006324 <__ssvfiscanf_r+0x1b0>
 8006390:	220a      	movs	r2, #10
 8006392:	e7d7      	b.n	8006344 <__ssvfiscanf_r+0x1d0>
 8006394:	4629      	mov	r1, r5
 8006396:	4640      	mov	r0, r8
 8006398:	f000 fd2a 	bl	8006df0 <__sccl>
 800639c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800639e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80063a4:	4605      	mov	r5, r0
 80063a6:	2301      	movs	r3, #1
 80063a8:	e7d7      	b.n	800635a <__ssvfiscanf_r+0x1e6>
 80063aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80063ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b0:	9341      	str	r3, [sp, #260]	@ 0x104
 80063b2:	2300      	movs	r3, #0
 80063b4:	e7d1      	b.n	800635a <__ssvfiscanf_r+0x1e6>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e7cf      	b.n	800635a <__ssvfiscanf_r+0x1e6>
 80063ba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80063bc:	06c3      	lsls	r3, r0, #27
 80063be:	f53f aefe 	bmi.w	80061be <__ssvfiscanf_r+0x4a>
 80063c2:	9b00      	ldr	r3, [sp, #0]
 80063c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80063c6:	1d19      	adds	r1, r3, #4
 80063c8:	9100      	str	r1, [sp, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	07c0      	lsls	r0, r0, #31
 80063ce:	bf4c      	ite	mi
 80063d0:	801a      	strhmi	r2, [r3, #0]
 80063d2:	601a      	strpl	r2, [r3, #0]
 80063d4:	e6f3      	b.n	80061be <__ssvfiscanf_r+0x4a>
 80063d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80063d8:	4621      	mov	r1, r4
 80063da:	4630      	mov	r0, r6
 80063dc:	4798      	blx	r3
 80063de:	2800      	cmp	r0, #0
 80063e0:	d0bf      	beq.n	8006362 <__ssvfiscanf_r+0x1ee>
 80063e2:	e79f      	b.n	8006324 <__ssvfiscanf_r+0x1b0>
 80063e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80063e6:	3201      	adds	r2, #1
 80063e8:	9245      	str	r2, [sp, #276]	@ 0x114
 80063ea:	6862      	ldr	r2, [r4, #4]
 80063ec:	3a01      	subs	r2, #1
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	6062      	str	r2, [r4, #4]
 80063f2:	dd02      	ble.n	80063fa <__ssvfiscanf_r+0x286>
 80063f4:	3301      	adds	r3, #1
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	e7b6      	b.n	8006368 <__ssvfiscanf_r+0x1f4>
 80063fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80063fc:	4621      	mov	r1, r4
 80063fe:	4630      	mov	r0, r6
 8006400:	4798      	blx	r3
 8006402:	2800      	cmp	r0, #0
 8006404:	d0b0      	beq.n	8006368 <__ssvfiscanf_r+0x1f4>
 8006406:	e78d      	b.n	8006324 <__ssvfiscanf_r+0x1b0>
 8006408:	2b04      	cmp	r3, #4
 800640a:	dc0f      	bgt.n	800642c <__ssvfiscanf_r+0x2b8>
 800640c:	466b      	mov	r3, sp
 800640e:	4622      	mov	r2, r4
 8006410:	a941      	add	r1, sp, #260	@ 0x104
 8006412:	4630      	mov	r0, r6
 8006414:	f000 fb4c 	bl	8006ab0 <_scanf_i>
 8006418:	e7b4      	b.n	8006384 <__ssvfiscanf_r+0x210>
 800641a:	bf00      	nop
 800641c:	080060c5 	.word	0x080060c5
 8006420:	0800613b 	.word	0x0800613b
 8006424:	08008519 	.word	0x08008519
 8006428:	0800861f 	.word	0x0800861f
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <__ssvfiscanf_r+0x2e4>)
 800642e:	2b00      	cmp	r3, #0
 8006430:	f43f aec5 	beq.w	80061be <__ssvfiscanf_r+0x4a>
 8006434:	466b      	mov	r3, sp
 8006436:	4622      	mov	r2, r4
 8006438:	a941      	add	r1, sp, #260	@ 0x104
 800643a:	4630      	mov	r0, r6
 800643c:	f7fe f984 	bl	8004748 <_scanf_float>
 8006440:	e7a0      	b.n	8006384 <__ssvfiscanf_r+0x210>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	065b      	lsls	r3, r3, #25
 8006446:	f53f af71 	bmi.w	800632c <__ssvfiscanf_r+0x1b8>
 800644a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800644e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006452:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006454:	e7f9      	b.n	800644a <__ssvfiscanf_r+0x2d6>
 8006456:	bf00      	nop
 8006458:	08004749 	.word	0x08004749

0800645c <__sfputc_r>:
 800645c:	6893      	ldr	r3, [r2, #8]
 800645e:	3b01      	subs	r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	b410      	push	{r4}
 8006464:	6093      	str	r3, [r2, #8]
 8006466:	da08      	bge.n	800647a <__sfputc_r+0x1e>
 8006468:	6994      	ldr	r4, [r2, #24]
 800646a:	42a3      	cmp	r3, r4
 800646c:	db01      	blt.n	8006472 <__sfputc_r+0x16>
 800646e:	290a      	cmp	r1, #10
 8006470:	d103      	bne.n	800647a <__sfputc_r+0x1e>
 8006472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006476:	f000 bd2e 	b.w	8006ed6 <__swbuf_r>
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	1c58      	adds	r0, r3, #1
 800647e:	6010      	str	r0, [r2, #0]
 8006480:	7019      	strb	r1, [r3, #0]
 8006482:	4608      	mov	r0, r1
 8006484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006488:	4770      	bx	lr

0800648a <__sfputs_r>:
 800648a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648c:	4606      	mov	r6, r0
 800648e:	460f      	mov	r7, r1
 8006490:	4614      	mov	r4, r2
 8006492:	18d5      	adds	r5, r2, r3
 8006494:	42ac      	cmp	r4, r5
 8006496:	d101      	bne.n	800649c <__sfputs_r+0x12>
 8006498:	2000      	movs	r0, #0
 800649a:	e007      	b.n	80064ac <__sfputs_r+0x22>
 800649c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a0:	463a      	mov	r2, r7
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ffda 	bl	800645c <__sfputc_r>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d1f3      	bne.n	8006494 <__sfputs_r+0xa>
 80064ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b0 <_vfiprintf_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	460d      	mov	r5, r1
 80064b6:	b09d      	sub	sp, #116	@ 0x74
 80064b8:	4614      	mov	r4, r2
 80064ba:	4698      	mov	r8, r3
 80064bc:	4606      	mov	r6, r0
 80064be:	b118      	cbz	r0, 80064c8 <_vfiprintf_r+0x18>
 80064c0:	6a03      	ldr	r3, [r0, #32]
 80064c2:	b90b      	cbnz	r3, 80064c8 <_vfiprintf_r+0x18>
 80064c4:	f7fe fbe0 	bl	8004c88 <__sinit>
 80064c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	d405      	bmi.n	80064da <_vfiprintf_r+0x2a>
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	059a      	lsls	r2, r3, #22
 80064d2:	d402      	bmi.n	80064da <_vfiprintf_r+0x2a>
 80064d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064d6:	f7fe fd16 	bl	8004f06 <__retarget_lock_acquire_recursive>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	071b      	lsls	r3, r3, #28
 80064de:	d501      	bpl.n	80064e4 <_vfiprintf_r+0x34>
 80064e0:	692b      	ldr	r3, [r5, #16]
 80064e2:	b99b      	cbnz	r3, 800650c <_vfiprintf_r+0x5c>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 fd34 	bl	8006f54 <__swsetup_r>
 80064ec:	b170      	cbz	r0, 800650c <_vfiprintf_r+0x5c>
 80064ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f0:	07dc      	lsls	r4, r3, #31
 80064f2:	d504      	bpl.n	80064fe <_vfiprintf_r+0x4e>
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	b01d      	add	sp, #116	@ 0x74
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	0598      	lsls	r0, r3, #22
 8006502:	d4f7      	bmi.n	80064f4 <_vfiprintf_r+0x44>
 8006504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006506:	f7fe fcff 	bl	8004f08 <__retarget_lock_release_recursive>
 800650a:	e7f3      	b.n	80064f4 <_vfiprintf_r+0x44>
 800650c:	2300      	movs	r3, #0
 800650e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006510:	2320      	movs	r3, #32
 8006512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006516:	f8cd 800c 	str.w	r8, [sp, #12]
 800651a:	2330      	movs	r3, #48	@ 0x30
 800651c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066cc <_vfiprintf_r+0x21c>
 8006520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006524:	f04f 0901 	mov.w	r9, #1
 8006528:	4623      	mov	r3, r4
 800652a:	469a      	mov	sl, r3
 800652c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006530:	b10a      	cbz	r2, 8006536 <_vfiprintf_r+0x86>
 8006532:	2a25      	cmp	r2, #37	@ 0x25
 8006534:	d1f9      	bne.n	800652a <_vfiprintf_r+0x7a>
 8006536:	ebba 0b04 	subs.w	fp, sl, r4
 800653a:	d00b      	beq.n	8006554 <_vfiprintf_r+0xa4>
 800653c:	465b      	mov	r3, fp
 800653e:	4622      	mov	r2, r4
 8006540:	4629      	mov	r1, r5
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff ffa1 	bl	800648a <__sfputs_r>
 8006548:	3001      	adds	r0, #1
 800654a:	f000 80a7 	beq.w	800669c <_vfiprintf_r+0x1ec>
 800654e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006550:	445a      	add	r2, fp
 8006552:	9209      	str	r2, [sp, #36]	@ 0x24
 8006554:	f89a 3000 	ldrb.w	r3, [sl]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809f 	beq.w	800669c <_vfiprintf_r+0x1ec>
 800655e:	2300      	movs	r3, #0
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006574:	931a      	str	r3, [sp, #104]	@ 0x68
 8006576:	4654      	mov	r4, sl
 8006578:	2205      	movs	r2, #5
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4853      	ldr	r0, [pc, #332]	@ (80066cc <_vfiprintf_r+0x21c>)
 8006580:	f7f9 fe2e 	bl	80001e0 <memchr>
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	b9d8      	cbnz	r0, 80065c0 <_vfiprintf_r+0x110>
 8006588:	06d1      	lsls	r1, r2, #27
 800658a:	bf44      	itt	mi
 800658c:	2320      	movmi	r3, #32
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006592:	0713      	lsls	r3, r2, #28
 8006594:	bf44      	itt	mi
 8006596:	232b      	movmi	r3, #43	@ 0x2b
 8006598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800659c:	f89a 3000 	ldrb.w	r3, [sl]
 80065a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a2:	d015      	beq.n	80065d0 <_vfiprintf_r+0x120>
 80065a4:	9a07      	ldr	r2, [sp, #28]
 80065a6:	4654      	mov	r4, sl
 80065a8:	2000      	movs	r0, #0
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	4621      	mov	r1, r4
 80065b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b4:	3b30      	subs	r3, #48	@ 0x30
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d94b      	bls.n	8006652 <_vfiprintf_r+0x1a2>
 80065ba:	b1b0      	cbz	r0, 80065ea <_vfiprintf_r+0x13a>
 80065bc:	9207      	str	r2, [sp, #28]
 80065be:	e014      	b.n	80065ea <_vfiprintf_r+0x13a>
 80065c0:	eba0 0308 	sub.w	r3, r0, r8
 80065c4:	fa09 f303 	lsl.w	r3, r9, r3
 80065c8:	4313      	orrs	r3, r2
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	46a2      	mov	sl, r4
 80065ce:	e7d2      	b.n	8006576 <_vfiprintf_r+0xc6>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d19      	adds	r1, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfbb      	ittet	lt
 80065dc:	425b      	neglt	r3, r3
 80065de:	f042 0202 	orrlt.w	r2, r2, #2
 80065e2:	9307      	strge	r3, [sp, #28]
 80065e4:	9307      	strlt	r3, [sp, #28]
 80065e6:	bfb8      	it	lt
 80065e8:	9204      	strlt	r2, [sp, #16]
 80065ea:	7823      	ldrb	r3, [r4, #0]
 80065ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ee:	d10a      	bne.n	8006606 <_vfiprintf_r+0x156>
 80065f0:	7863      	ldrb	r3, [r4, #1]
 80065f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f4:	d132      	bne.n	800665c <_vfiprintf_r+0x1ac>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9203      	str	r2, [sp, #12]
 80065fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006602:	3402      	adds	r4, #2
 8006604:	9305      	str	r3, [sp, #20]
 8006606:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066dc <_vfiprintf_r+0x22c>
 800660a:	7821      	ldrb	r1, [r4, #0]
 800660c:	2203      	movs	r2, #3
 800660e:	4650      	mov	r0, sl
 8006610:	f7f9 fde6 	bl	80001e0 <memchr>
 8006614:	b138      	cbz	r0, 8006626 <_vfiprintf_r+0x176>
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	eba0 000a 	sub.w	r0, r0, sl
 800661c:	2240      	movs	r2, #64	@ 0x40
 800661e:	4082      	lsls	r2, r0
 8006620:	4313      	orrs	r3, r2
 8006622:	3401      	adds	r4, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662a:	4829      	ldr	r0, [pc, #164]	@ (80066d0 <_vfiprintf_r+0x220>)
 800662c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006630:	2206      	movs	r2, #6
 8006632:	f7f9 fdd5 	bl	80001e0 <memchr>
 8006636:	2800      	cmp	r0, #0
 8006638:	d03f      	beq.n	80066ba <_vfiprintf_r+0x20a>
 800663a:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <_vfiprintf_r+0x224>)
 800663c:	bb1b      	cbnz	r3, 8006686 <_vfiprintf_r+0x1d6>
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	3307      	adds	r3, #7
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	3308      	adds	r3, #8
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664c:	443b      	add	r3, r7
 800664e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006650:	e76a      	b.n	8006528 <_vfiprintf_r+0x78>
 8006652:	fb0c 3202 	mla	r2, ip, r2, r3
 8006656:	460c      	mov	r4, r1
 8006658:	2001      	movs	r0, #1
 800665a:	e7a8      	b.n	80065ae <_vfiprintf_r+0xfe>
 800665c:	2300      	movs	r3, #0
 800665e:	3401      	adds	r4, #1
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	4619      	mov	r1, r3
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4620      	mov	r0, r4
 800666a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666e:	3a30      	subs	r2, #48	@ 0x30
 8006670:	2a09      	cmp	r2, #9
 8006672:	d903      	bls.n	800667c <_vfiprintf_r+0x1cc>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0c6      	beq.n	8006606 <_vfiprintf_r+0x156>
 8006678:	9105      	str	r1, [sp, #20]
 800667a:	e7c4      	b.n	8006606 <_vfiprintf_r+0x156>
 800667c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006680:	4604      	mov	r4, r0
 8006682:	2301      	movs	r3, #1
 8006684:	e7f0      	b.n	8006668 <_vfiprintf_r+0x1b8>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <_vfiprintf_r+0x228>)
 800668e:	a904      	add	r1, sp, #16
 8006690:	4630      	mov	r0, r6
 8006692:	f3af 8000 	nop.w
 8006696:	4607      	mov	r7, r0
 8006698:	1c78      	adds	r0, r7, #1
 800669a:	d1d6      	bne.n	800664a <_vfiprintf_r+0x19a>
 800669c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_vfiprintf_r+0x1fe>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	059a      	lsls	r2, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_vfiprintf_r+0x1fe>
 80066a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066aa:	f7fe fc2d 	bl	8004f08 <__retarget_lock_release_recursive>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	065b      	lsls	r3, r3, #25
 80066b2:	f53f af1f 	bmi.w	80064f4 <_vfiprintf_r+0x44>
 80066b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066b8:	e71e      	b.n	80064f8 <_vfiprintf_r+0x48>
 80066ba:	ab03      	add	r3, sp, #12
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	462a      	mov	r2, r5
 80066c0:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <_vfiprintf_r+0x228>)
 80066c2:	a904      	add	r1, sp, #16
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 f879 	bl	80067bc <_printf_i>
 80066ca:	e7e4      	b.n	8006696 <_vfiprintf_r+0x1e6>
 80066cc:	08008619 	.word	0x08008619
 80066d0:	08008623 	.word	0x08008623
 80066d4:	00000000 	.word	0x00000000
 80066d8:	0800648b 	.word	0x0800648b
 80066dc:	0800861f 	.word	0x0800861f

080066e0 <_printf_common>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	4616      	mov	r6, r2
 80066e6:	4698      	mov	r8, r3
 80066e8:	688a      	ldr	r2, [r1, #8]
 80066ea:	690b      	ldr	r3, [r1, #16]
 80066ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	bfb8      	it	lt
 80066f4:	4613      	movlt	r3, r2
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066fc:	4607      	mov	r7, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	b10a      	cbz	r2, 8006706 <_printf_common+0x26>
 8006702:	3301      	adds	r3, #1
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	0699      	lsls	r1, r3, #26
 800670a:	bf42      	ittt	mi
 800670c:	6833      	ldrmi	r3, [r6, #0]
 800670e:	3302      	addmi	r3, #2
 8006710:	6033      	strmi	r3, [r6, #0]
 8006712:	6825      	ldr	r5, [r4, #0]
 8006714:	f015 0506 	ands.w	r5, r5, #6
 8006718:	d106      	bne.n	8006728 <_printf_common+0x48>
 800671a:	f104 0a19 	add.w	sl, r4, #25
 800671e:	68e3      	ldr	r3, [r4, #12]
 8006720:	6832      	ldr	r2, [r6, #0]
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	42ab      	cmp	r3, r5
 8006726:	dc26      	bgt.n	8006776 <_printf_common+0x96>
 8006728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	3b00      	subs	r3, #0
 8006730:	bf18      	it	ne
 8006732:	2301      	movne	r3, #1
 8006734:	0692      	lsls	r2, r2, #26
 8006736:	d42b      	bmi.n	8006790 <_printf_common+0xb0>
 8006738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800673c:	4641      	mov	r1, r8
 800673e:	4638      	mov	r0, r7
 8006740:	47c8      	blx	r9
 8006742:	3001      	adds	r0, #1
 8006744:	d01e      	beq.n	8006784 <_printf_common+0xa4>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	6922      	ldr	r2, [r4, #16]
 800674a:	f003 0306 	and.w	r3, r3, #6
 800674e:	2b04      	cmp	r3, #4
 8006750:	bf02      	ittt	eq
 8006752:	68e5      	ldreq	r5, [r4, #12]
 8006754:	6833      	ldreq	r3, [r6, #0]
 8006756:	1aed      	subeq	r5, r5, r3
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	bf0c      	ite	eq
 800675c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006760:	2500      	movne	r5, #0
 8006762:	4293      	cmp	r3, r2
 8006764:	bfc4      	itt	gt
 8006766:	1a9b      	subgt	r3, r3, r2
 8006768:	18ed      	addgt	r5, r5, r3
 800676a:	2600      	movs	r6, #0
 800676c:	341a      	adds	r4, #26
 800676e:	42b5      	cmp	r5, r6
 8006770:	d11a      	bne.n	80067a8 <_printf_common+0xc8>
 8006772:	2000      	movs	r0, #0
 8006774:	e008      	b.n	8006788 <_printf_common+0xa8>
 8006776:	2301      	movs	r3, #1
 8006778:	4652      	mov	r2, sl
 800677a:	4641      	mov	r1, r8
 800677c:	4638      	mov	r0, r7
 800677e:	47c8      	blx	r9
 8006780:	3001      	adds	r0, #1
 8006782:	d103      	bne.n	800678c <_printf_common+0xac>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678c:	3501      	adds	r5, #1
 800678e:	e7c6      	b.n	800671e <_printf_common+0x3e>
 8006790:	18e1      	adds	r1, r4, r3
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	2030      	movs	r0, #48	@ 0x30
 8006796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800679a:	4422      	add	r2, r4
 800679c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a4:	3302      	adds	r3, #2
 80067a6:	e7c7      	b.n	8006738 <_printf_common+0x58>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4622      	mov	r2, r4
 80067ac:	4641      	mov	r1, r8
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c8      	blx	r9
 80067b2:	3001      	adds	r0, #1
 80067b4:	d0e6      	beq.n	8006784 <_printf_common+0xa4>
 80067b6:	3601      	adds	r6, #1
 80067b8:	e7d9      	b.n	800676e <_printf_common+0x8e>
	...

080067bc <_printf_i>:
 80067bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	7e0f      	ldrb	r7, [r1, #24]
 80067c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c4:	2f78      	cmp	r7, #120	@ 0x78
 80067c6:	4691      	mov	r9, r2
 80067c8:	4680      	mov	r8, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	469a      	mov	sl, r3
 80067ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067d2:	d807      	bhi.n	80067e4 <_printf_i+0x28>
 80067d4:	2f62      	cmp	r7, #98	@ 0x62
 80067d6:	d80a      	bhi.n	80067ee <_printf_i+0x32>
 80067d8:	2f00      	cmp	r7, #0
 80067da:	f000 80d2 	beq.w	8006982 <_printf_i+0x1c6>
 80067de:	2f58      	cmp	r7, #88	@ 0x58
 80067e0:	f000 80b9 	beq.w	8006956 <_printf_i+0x19a>
 80067e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067ec:	e03a      	b.n	8006864 <_printf_i+0xa8>
 80067ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067f2:	2b15      	cmp	r3, #21
 80067f4:	d8f6      	bhi.n	80067e4 <_printf_i+0x28>
 80067f6:	a101      	add	r1, pc, #4	@ (adr r1, 80067fc <_printf_i+0x40>)
 80067f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067fc:	08006855 	.word	0x08006855
 8006800:	08006869 	.word	0x08006869
 8006804:	080067e5 	.word	0x080067e5
 8006808:	080067e5 	.word	0x080067e5
 800680c:	080067e5 	.word	0x080067e5
 8006810:	080067e5 	.word	0x080067e5
 8006814:	08006869 	.word	0x08006869
 8006818:	080067e5 	.word	0x080067e5
 800681c:	080067e5 	.word	0x080067e5
 8006820:	080067e5 	.word	0x080067e5
 8006824:	080067e5 	.word	0x080067e5
 8006828:	08006969 	.word	0x08006969
 800682c:	08006893 	.word	0x08006893
 8006830:	08006923 	.word	0x08006923
 8006834:	080067e5 	.word	0x080067e5
 8006838:	080067e5 	.word	0x080067e5
 800683c:	0800698b 	.word	0x0800698b
 8006840:	080067e5 	.word	0x080067e5
 8006844:	08006893 	.word	0x08006893
 8006848:	080067e5 	.word	0x080067e5
 800684c:	080067e5 	.word	0x080067e5
 8006850:	0800692b 	.word	0x0800692b
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	1d1a      	adds	r2, r3, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6032      	str	r2, [r6, #0]
 800685c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006864:	2301      	movs	r3, #1
 8006866:	e09d      	b.n	80069a4 <_printf_i+0x1e8>
 8006868:	6833      	ldr	r3, [r6, #0]
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	1d19      	adds	r1, r3, #4
 800686e:	6031      	str	r1, [r6, #0]
 8006870:	0606      	lsls	r6, r0, #24
 8006872:	d501      	bpl.n	8006878 <_printf_i+0xbc>
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	e003      	b.n	8006880 <_printf_i+0xc4>
 8006878:	0645      	lsls	r5, r0, #25
 800687a:	d5fb      	bpl.n	8006874 <_printf_i+0xb8>
 800687c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006880:	2d00      	cmp	r5, #0
 8006882:	da03      	bge.n	800688c <_printf_i+0xd0>
 8006884:	232d      	movs	r3, #45	@ 0x2d
 8006886:	426d      	negs	r5, r5
 8006888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800688c:	4859      	ldr	r0, [pc, #356]	@ (80069f4 <_printf_i+0x238>)
 800688e:	230a      	movs	r3, #10
 8006890:	e011      	b.n	80068b6 <_printf_i+0xfa>
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	0608      	lsls	r0, r1, #24
 8006898:	f853 5b04 	ldr.w	r5, [r3], #4
 800689c:	d402      	bmi.n	80068a4 <_printf_i+0xe8>
 800689e:	0649      	lsls	r1, r1, #25
 80068a0:	bf48      	it	mi
 80068a2:	b2ad      	uxthmi	r5, r5
 80068a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068a6:	4853      	ldr	r0, [pc, #332]	@ (80069f4 <_printf_i+0x238>)
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	bf14      	ite	ne
 80068ac:	230a      	movne	r3, #10
 80068ae:	2308      	moveq	r3, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068b6:	6866      	ldr	r6, [r4, #4]
 80068b8:	60a6      	str	r6, [r4, #8]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	bfa2      	ittt	ge
 80068be:	6821      	ldrge	r1, [r4, #0]
 80068c0:	f021 0104 	bicge.w	r1, r1, #4
 80068c4:	6021      	strge	r1, [r4, #0]
 80068c6:	b90d      	cbnz	r5, 80068cc <_printf_i+0x110>
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d04b      	beq.n	8006964 <_printf_i+0x1a8>
 80068cc:	4616      	mov	r6, r2
 80068ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d2:	fb03 5711 	mls	r7, r3, r1, r5
 80068d6:	5dc7      	ldrb	r7, [r0, r7]
 80068d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068dc:	462f      	mov	r7, r5
 80068de:	42bb      	cmp	r3, r7
 80068e0:	460d      	mov	r5, r1
 80068e2:	d9f4      	bls.n	80068ce <_printf_i+0x112>
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d10b      	bne.n	8006900 <_printf_i+0x144>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	07df      	lsls	r7, r3, #31
 80068ec:	d508      	bpl.n	8006900 <_printf_i+0x144>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	4299      	cmp	r1, r3
 80068f4:	bfde      	ittt	le
 80068f6:	2330      	movle	r3, #48	@ 0x30
 80068f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006900:	1b92      	subs	r2, r2, r6
 8006902:	6122      	str	r2, [r4, #16]
 8006904:	f8cd a000 	str.w	sl, [sp]
 8006908:	464b      	mov	r3, r9
 800690a:	aa03      	add	r2, sp, #12
 800690c:	4621      	mov	r1, r4
 800690e:	4640      	mov	r0, r8
 8006910:	f7ff fee6 	bl	80066e0 <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	d14a      	bne.n	80069ae <_printf_i+0x1f2>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	b004      	add	sp, #16
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f043 0320 	orr.w	r3, r3, #32
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	4833      	ldr	r0, [pc, #204]	@ (80069f8 <_printf_i+0x23c>)
 800692c:	2778      	movs	r7, #120	@ 0x78
 800692e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	6831      	ldr	r1, [r6, #0]
 8006936:	061f      	lsls	r7, r3, #24
 8006938:	f851 5b04 	ldr.w	r5, [r1], #4
 800693c:	d402      	bmi.n	8006944 <_printf_i+0x188>
 800693e:	065f      	lsls	r7, r3, #25
 8006940:	bf48      	it	mi
 8006942:	b2ad      	uxthmi	r5, r5
 8006944:	6031      	str	r1, [r6, #0]
 8006946:	07d9      	lsls	r1, r3, #31
 8006948:	bf44      	itt	mi
 800694a:	f043 0320 	orrmi.w	r3, r3, #32
 800694e:	6023      	strmi	r3, [r4, #0]
 8006950:	b11d      	cbz	r5, 800695a <_printf_i+0x19e>
 8006952:	2310      	movs	r3, #16
 8006954:	e7ac      	b.n	80068b0 <_printf_i+0xf4>
 8006956:	4827      	ldr	r0, [pc, #156]	@ (80069f4 <_printf_i+0x238>)
 8006958:	e7e9      	b.n	800692e <_printf_i+0x172>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	f023 0320 	bic.w	r3, r3, #32
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	e7f6      	b.n	8006952 <_printf_i+0x196>
 8006964:	4616      	mov	r6, r2
 8006966:	e7bd      	b.n	80068e4 <_printf_i+0x128>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	6825      	ldr	r5, [r4, #0]
 800696c:	6961      	ldr	r1, [r4, #20]
 800696e:	1d18      	adds	r0, r3, #4
 8006970:	6030      	str	r0, [r6, #0]
 8006972:	062e      	lsls	r6, r5, #24
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	d501      	bpl.n	800697c <_printf_i+0x1c0>
 8006978:	6019      	str	r1, [r3, #0]
 800697a:	e002      	b.n	8006982 <_printf_i+0x1c6>
 800697c:	0668      	lsls	r0, r5, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0x1bc>
 8006980:	8019      	strh	r1, [r3, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	4616      	mov	r6, r2
 8006988:	e7bc      	b.n	8006904 <_printf_i+0x148>
 800698a:	6833      	ldr	r3, [r6, #0]
 800698c:	1d1a      	adds	r2, r3, #4
 800698e:	6032      	str	r2, [r6, #0]
 8006990:	681e      	ldr	r6, [r3, #0]
 8006992:	6862      	ldr	r2, [r4, #4]
 8006994:	2100      	movs	r1, #0
 8006996:	4630      	mov	r0, r6
 8006998:	f7f9 fc22 	bl	80001e0 <memchr>
 800699c:	b108      	cbz	r0, 80069a2 <_printf_i+0x1e6>
 800699e:	1b80      	subs	r0, r0, r6
 80069a0:	6060      	str	r0, [r4, #4]
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	2300      	movs	r3, #0
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ac:	e7aa      	b.n	8006904 <_printf_i+0x148>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	4632      	mov	r2, r6
 80069b2:	4649      	mov	r1, r9
 80069b4:	4640      	mov	r0, r8
 80069b6:	47d0      	blx	sl
 80069b8:	3001      	adds	r0, #1
 80069ba:	d0ad      	beq.n	8006918 <_printf_i+0x15c>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	079b      	lsls	r3, r3, #30
 80069c0:	d413      	bmi.n	80069ea <_printf_i+0x22e>
 80069c2:	68e0      	ldr	r0, [r4, #12]
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	4298      	cmp	r0, r3
 80069c8:	bfb8      	it	lt
 80069ca:	4618      	movlt	r0, r3
 80069cc:	e7a6      	b.n	800691c <_printf_i+0x160>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4632      	mov	r2, r6
 80069d2:	4649      	mov	r1, r9
 80069d4:	4640      	mov	r0, r8
 80069d6:	47d0      	blx	sl
 80069d8:	3001      	adds	r0, #1
 80069da:	d09d      	beq.n	8006918 <_printf_i+0x15c>
 80069dc:	3501      	adds	r5, #1
 80069de:	68e3      	ldr	r3, [r4, #12]
 80069e0:	9903      	ldr	r1, [sp, #12]
 80069e2:	1a5b      	subs	r3, r3, r1
 80069e4:	42ab      	cmp	r3, r5
 80069e6:	dcf2      	bgt.n	80069ce <_printf_i+0x212>
 80069e8:	e7eb      	b.n	80069c2 <_printf_i+0x206>
 80069ea:	2500      	movs	r5, #0
 80069ec:	f104 0619 	add.w	r6, r4, #25
 80069f0:	e7f5      	b.n	80069de <_printf_i+0x222>
 80069f2:	bf00      	nop
 80069f4:	0800862a 	.word	0x0800862a
 80069f8:	0800863b 	.word	0x0800863b

080069fc <_scanf_chars>:
 80069fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a00:	4615      	mov	r5, r2
 8006a02:	688a      	ldr	r2, [r1, #8]
 8006a04:	4680      	mov	r8, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	b932      	cbnz	r2, 8006a18 <_scanf_chars+0x1c>
 8006a0a:	698a      	ldr	r2, [r1, #24]
 8006a0c:	2a00      	cmp	r2, #0
 8006a0e:	bf14      	ite	ne
 8006a10:	f04f 32ff 	movne.w	r2, #4294967295
 8006a14:	2201      	moveq	r2, #1
 8006a16:	608a      	str	r2, [r1, #8]
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006aac <_scanf_chars+0xb0>
 8006a1e:	06d1      	lsls	r1, r2, #27
 8006a20:	bf5f      	itttt	pl
 8006a22:	681a      	ldrpl	r2, [r3, #0]
 8006a24:	1d11      	addpl	r1, r2, #4
 8006a26:	6019      	strpl	r1, [r3, #0]
 8006a28:	6816      	ldrpl	r6, [r2, #0]
 8006a2a:	2700      	movs	r7, #0
 8006a2c:	69a0      	ldr	r0, [r4, #24]
 8006a2e:	b188      	cbz	r0, 8006a54 <_scanf_chars+0x58>
 8006a30:	2801      	cmp	r0, #1
 8006a32:	d107      	bne.n	8006a44 <_scanf_chars+0x48>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	781a      	ldrb	r2, [r3, #0]
 8006a38:	6963      	ldr	r3, [r4, #20]
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	b953      	cbnz	r3, 8006a54 <_scanf_chars+0x58>
 8006a3e:	2f00      	cmp	r7, #0
 8006a40:	d031      	beq.n	8006aa6 <_scanf_chars+0xaa>
 8006a42:	e022      	b.n	8006a8a <_scanf_chars+0x8e>
 8006a44:	2802      	cmp	r0, #2
 8006a46:	d120      	bne.n	8006a8a <_scanf_chars+0x8e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006a50:	071b      	lsls	r3, r3, #28
 8006a52:	d41a      	bmi.n	8006a8a <_scanf_chars+0x8e>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	06da      	lsls	r2, r3, #27
 8006a58:	bf5e      	ittt	pl
 8006a5a:	682b      	ldrpl	r3, [r5, #0]
 8006a5c:	781b      	ldrbpl	r3, [r3, #0]
 8006a5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006a62:	682a      	ldr	r2, [r5, #0]
 8006a64:	686b      	ldr	r3, [r5, #4]
 8006a66:	3201      	adds	r2, #1
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	68a2      	ldr	r2, [r4, #8]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	3a01      	subs	r2, #1
 8006a70:	606b      	str	r3, [r5, #4]
 8006a72:	3701      	adds	r7, #1
 8006a74:	60a2      	str	r2, [r4, #8]
 8006a76:	b142      	cbz	r2, 8006a8a <_scanf_chars+0x8e>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dcd7      	bgt.n	8006a2c <_scanf_chars+0x30>
 8006a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a80:	4629      	mov	r1, r5
 8006a82:	4640      	mov	r0, r8
 8006a84:	4798      	blx	r3
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0d0      	beq.n	8006a2c <_scanf_chars+0x30>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	f013 0310 	ands.w	r3, r3, #16
 8006a90:	d105      	bne.n	8006a9e <_scanf_chars+0xa2>
 8006a92:	68e2      	ldr	r2, [r4, #12]
 8006a94:	3201      	adds	r2, #1
 8006a96:	60e2      	str	r2, [r4, #12]
 8006a98:	69a2      	ldr	r2, [r4, #24]
 8006a9a:	b102      	cbz	r2, 8006a9e <_scanf_chars+0xa2>
 8006a9c:	7033      	strb	r3, [r6, #0]
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	443b      	add	r3, r7
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aaa:	bf00      	nop
 8006aac:	08008519 	.word	0x08008519

08006ab0 <_scanf_i>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	4698      	mov	r8, r3
 8006ab6:	4b74      	ldr	r3, [pc, #464]	@ (8006c88 <_scanf_i+0x1d8>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	4682      	mov	sl, r0
 8006abc:	4616      	mov	r6, r2
 8006abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006aca:	4b70      	ldr	r3, [pc, #448]	@ (8006c8c <_scanf_i+0x1dc>)
 8006acc:	69a1      	ldr	r1, [r4, #24]
 8006ace:	4a70      	ldr	r2, [pc, #448]	@ (8006c90 <_scanf_i+0x1e0>)
 8006ad0:	2903      	cmp	r1, #3
 8006ad2:	bf08      	it	eq
 8006ad4:	461a      	moveq	r2, r3
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	9201      	str	r2, [sp, #4]
 8006ada:	1e5a      	subs	r2, r3, #1
 8006adc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ae0:	bf88      	it	hi
 8006ae2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ae6:	4627      	mov	r7, r4
 8006ae8:	bf82      	ittt	hi
 8006aea:	eb03 0905 	addhi.w	r9, r3, r5
 8006aee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006af2:	60a3      	strhi	r3, [r4, #8]
 8006af4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006af8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006afc:	bf98      	it	ls
 8006afe:	f04f 0900 	movls.w	r9, #0
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	463d      	mov	r5, r7
 8006b06:	f04f 0b00 	mov.w	fp, #0
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	7809      	ldrb	r1, [r1, #0]
 8006b10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f7f9 fb63 	bl	80001e0 <memchr>
 8006b1a:	b328      	cbz	r0, 8006b68 <_scanf_i+0xb8>
 8006b1c:	f1bb 0f01 	cmp.w	fp, #1
 8006b20:	d159      	bne.n	8006bd6 <_scanf_i+0x126>
 8006b22:	6862      	ldr	r2, [r4, #4]
 8006b24:	b92a      	cbnz	r2, 8006b32 <_scanf_i+0x82>
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	2108      	movs	r1, #8
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b2e:	6061      	str	r1, [r4, #4]
 8006b30:	6022      	str	r2, [r4, #0]
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	68a2      	ldr	r2, [r4, #8]
 8006b3c:	1e51      	subs	r1, r2, #1
 8006b3e:	60a1      	str	r1, [r4, #8]
 8006b40:	b192      	cbz	r2, 8006b68 <_scanf_i+0xb8>
 8006b42:	6832      	ldr	r2, [r6, #0]
 8006b44:	1c51      	adds	r1, r2, #1
 8006b46:	6031      	str	r1, [r6, #0]
 8006b48:	7812      	ldrb	r2, [r2, #0]
 8006b4a:	f805 2b01 	strb.w	r2, [r5], #1
 8006b4e:	6872      	ldr	r2, [r6, #4]
 8006b50:	3a01      	subs	r2, #1
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	6072      	str	r2, [r6, #4]
 8006b56:	dc07      	bgt.n	8006b68 <_scanf_i+0xb8>
 8006b58:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4650      	mov	r0, sl
 8006b60:	4790      	blx	r2
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f040 8085 	bne.w	8006c72 <_scanf_i+0x1c2>
 8006b68:	f10b 0b01 	add.w	fp, fp, #1
 8006b6c:	f1bb 0f03 	cmp.w	fp, #3
 8006b70:	d1cb      	bne.n	8006b0a <_scanf_i+0x5a>
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	b90b      	cbnz	r3, 8006b7a <_scanf_i+0xca>
 8006b76:	230a      	movs	r3, #10
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	4945      	ldr	r1, [pc, #276]	@ (8006c94 <_scanf_i+0x1e4>)
 8006b7e:	6960      	ldr	r0, [r4, #20]
 8006b80:	1ac9      	subs	r1, r1, r3
 8006b82:	f000 f935 	bl	8006df0 <__sccl>
 8006b86:	f04f 0b00 	mov.w	fp, #0
 8006b8a:	68a3      	ldr	r3, [r4, #8]
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d03d      	beq.n	8006c0e <_scanf_i+0x15e>
 8006b92:	6831      	ldr	r1, [r6, #0]
 8006b94:	6960      	ldr	r0, [r4, #20]
 8006b96:	f891 c000 	ldrb.w	ip, [r1]
 8006b9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d035      	beq.n	8006c0e <_scanf_i+0x15e>
 8006ba2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006ba6:	d124      	bne.n	8006bf2 <_scanf_i+0x142>
 8006ba8:	0510      	lsls	r0, r2, #20
 8006baa:	d522      	bpl.n	8006bf2 <_scanf_i+0x142>
 8006bac:	f10b 0b01 	add.w	fp, fp, #1
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	d003      	beq.n	8006bbe <_scanf_i+0x10e>
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006bbc:	60a3      	str	r3, [r4, #8]
 8006bbe:	6873      	ldr	r3, [r6, #4]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	6073      	str	r3, [r6, #4]
 8006bc6:	dd1b      	ble.n	8006c00 <_scanf_i+0x150>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	60a3      	str	r3, [r4, #8]
 8006bd4:	e7d9      	b.n	8006b8a <_scanf_i+0xda>
 8006bd6:	f1bb 0f02 	cmp.w	fp, #2
 8006bda:	d1ae      	bne.n	8006b3a <_scanf_i+0x8a>
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006be2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006be6:	d1bf      	bne.n	8006b68 <_scanf_i+0xb8>
 8006be8:	2110      	movs	r1, #16
 8006bea:	6061      	str	r1, [r4, #4]
 8006bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bf0:	e7a2      	b.n	8006b38 <_scanf_i+0x88>
 8006bf2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	780b      	ldrb	r3, [r1, #0]
 8006bfa:	f805 3b01 	strb.w	r3, [r5], #1
 8006bfe:	e7de      	b.n	8006bbe <_scanf_i+0x10e>
 8006c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c04:	4631      	mov	r1, r6
 8006c06:	4650      	mov	r0, sl
 8006c08:	4798      	blx	r3
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d0df      	beq.n	8006bce <_scanf_i+0x11e>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	05d9      	lsls	r1, r3, #23
 8006c12:	d50d      	bpl.n	8006c30 <_scanf_i+0x180>
 8006c14:	42bd      	cmp	r5, r7
 8006c16:	d909      	bls.n	8006c2c <_scanf_i+0x17c>
 8006c18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c20:	4632      	mov	r2, r6
 8006c22:	4650      	mov	r0, sl
 8006c24:	4798      	blx	r3
 8006c26:	f105 39ff 	add.w	r9, r5, #4294967295
 8006c2a:	464d      	mov	r5, r9
 8006c2c:	42bd      	cmp	r5, r7
 8006c2e:	d028      	beq.n	8006c82 <_scanf_i+0x1d2>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	f012 0210 	ands.w	r2, r2, #16
 8006c36:	d113      	bne.n	8006c60 <_scanf_i+0x1b0>
 8006c38:	702a      	strb	r2, [r5, #0]
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	9e01      	ldr	r6, [sp, #4]
 8006c3e:	4639      	mov	r1, r7
 8006c40:	4650      	mov	r0, sl
 8006c42:	47b0      	blx	r6
 8006c44:	f8d8 3000 	ldr.w	r3, [r8]
 8006c48:	6821      	ldr	r1, [r4, #0]
 8006c4a:	1d1a      	adds	r2, r3, #4
 8006c4c:	f8c8 2000 	str.w	r2, [r8]
 8006c50:	f011 0f20 	tst.w	r1, #32
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	d00f      	beq.n	8006c78 <_scanf_i+0x1c8>
 8006c58:	6018      	str	r0, [r3, #0]
 8006c5a:	68e3      	ldr	r3, [r4, #12]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	60e3      	str	r3, [r4, #12]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	1bed      	subs	r5, r5, r7
 8006c64:	445d      	add	r5, fp
 8006c66:	442b      	add	r3, r5
 8006c68:	6123      	str	r3, [r4, #16]
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	b007      	add	sp, #28
 8006c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c72:	f04f 0b00 	mov.w	fp, #0
 8006c76:	e7ca      	b.n	8006c0e <_scanf_i+0x15e>
 8006c78:	07ca      	lsls	r2, r1, #31
 8006c7a:	bf4c      	ite	mi
 8006c7c:	8018      	strhmi	r0, [r3, #0]
 8006c7e:	6018      	strpl	r0, [r3, #0]
 8006c80:	e7eb      	b.n	8006c5a <_scanf_i+0x1aa>
 8006c82:	2001      	movs	r0, #1
 8006c84:	e7f2      	b.n	8006c6c <_scanf_i+0x1bc>
 8006c86:	bf00      	nop
 8006c88:	08008490 	.word	0x08008490
 8006c8c:	08005e11 	.word	0x08005e11
 8006c90:	080081dd 	.word	0x080081dd
 8006c94:	0800865c 	.word	0x0800865c

08006c98 <__sflush_r>:
 8006c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca0:	0716      	lsls	r6, r2, #28
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	d454      	bmi.n	8006d52 <__sflush_r+0xba>
 8006ca8:	684b      	ldr	r3, [r1, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dc02      	bgt.n	8006cb4 <__sflush_r+0x1c>
 8006cae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dd48      	ble.n	8006d46 <__sflush_r+0xae>
 8006cb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	d045      	beq.n	8006d46 <__sflush_r+0xae>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cc0:	682f      	ldr	r7, [r5, #0]
 8006cc2:	6a21      	ldr	r1, [r4, #32]
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	d030      	beq.n	8006d2a <__sflush_r+0x92>
 8006cc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	0759      	lsls	r1, r3, #29
 8006cce:	d505      	bpl.n	8006cdc <__sflush_r+0x44>
 8006cd0:	6863      	ldr	r3, [r4, #4]
 8006cd2:	1ad2      	subs	r2, r2, r3
 8006cd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cd6:	b10b      	cbz	r3, 8006cdc <__sflush_r+0x44>
 8006cd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	2300      	movs	r3, #0
 8006cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ce0:	6a21      	ldr	r1, [r4, #32]
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	47b0      	blx	r6
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	d106      	bne.n	8006cfa <__sflush_r+0x62>
 8006cec:	6829      	ldr	r1, [r5, #0]
 8006cee:	291d      	cmp	r1, #29
 8006cf0:	d82b      	bhi.n	8006d4a <__sflush_r+0xb2>
 8006cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d9c <__sflush_r+0x104>)
 8006cf4:	410a      	asrs	r2, r1
 8006cf6:	07d6      	lsls	r6, r2, #31
 8006cf8:	d427      	bmi.n	8006d4a <__sflush_r+0xb2>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	6062      	str	r2, [r4, #4]
 8006cfe:	04d9      	lsls	r1, r3, #19
 8006d00:	6922      	ldr	r2, [r4, #16]
 8006d02:	6022      	str	r2, [r4, #0]
 8006d04:	d504      	bpl.n	8006d10 <__sflush_r+0x78>
 8006d06:	1c42      	adds	r2, r0, #1
 8006d08:	d101      	bne.n	8006d0e <__sflush_r+0x76>
 8006d0a:	682b      	ldr	r3, [r5, #0]
 8006d0c:	b903      	cbnz	r3, 8006d10 <__sflush_r+0x78>
 8006d0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d12:	602f      	str	r7, [r5, #0]
 8006d14:	b1b9      	cbz	r1, 8006d46 <__sflush_r+0xae>
 8006d16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	d002      	beq.n	8006d24 <__sflush_r+0x8c>
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f7fe f8fa 	bl	8004f18 <_free_r>
 8006d24:	2300      	movs	r3, #0
 8006d26:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d28:	e00d      	b.n	8006d46 <__sflush_r+0xae>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b0      	blx	r6
 8006d30:	4602      	mov	r2, r0
 8006d32:	1c50      	adds	r0, r2, #1
 8006d34:	d1c9      	bne.n	8006cca <__sflush_r+0x32>
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0c6      	beq.n	8006cca <__sflush_r+0x32>
 8006d3c:	2b1d      	cmp	r3, #29
 8006d3e:	d001      	beq.n	8006d44 <__sflush_r+0xac>
 8006d40:	2b16      	cmp	r3, #22
 8006d42:	d11e      	bne.n	8006d82 <__sflush_r+0xea>
 8006d44:	602f      	str	r7, [r5, #0]
 8006d46:	2000      	movs	r0, #0
 8006d48:	e022      	b.n	8006d90 <__sflush_r+0xf8>
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4e:	b21b      	sxth	r3, r3
 8006d50:	e01b      	b.n	8006d8a <__sflush_r+0xf2>
 8006d52:	690f      	ldr	r7, [r1, #16]
 8006d54:	2f00      	cmp	r7, #0
 8006d56:	d0f6      	beq.n	8006d46 <__sflush_r+0xae>
 8006d58:	0793      	lsls	r3, r2, #30
 8006d5a:	680e      	ldr	r6, [r1, #0]
 8006d5c:	bf08      	it	eq
 8006d5e:	694b      	ldreq	r3, [r1, #20]
 8006d60:	600f      	str	r7, [r1, #0]
 8006d62:	bf18      	it	ne
 8006d64:	2300      	movne	r3, #0
 8006d66:	eba6 0807 	sub.w	r8, r6, r7
 8006d6a:	608b      	str	r3, [r1, #8]
 8006d6c:	f1b8 0f00 	cmp.w	r8, #0
 8006d70:	dde9      	ble.n	8006d46 <__sflush_r+0xae>
 8006d72:	6a21      	ldr	r1, [r4, #32]
 8006d74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d76:	4643      	mov	r3, r8
 8006d78:	463a      	mov	r2, r7
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b0      	blx	r6
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	dc08      	bgt.n	8006d94 <__sflush_r+0xfc>
 8006d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	4407      	add	r7, r0
 8006d96:	eba8 0800 	sub.w	r8, r8, r0
 8006d9a:	e7e7      	b.n	8006d6c <__sflush_r+0xd4>
 8006d9c:	dfbffffe 	.word	0xdfbffffe

08006da0 <_fflush_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	690b      	ldr	r3, [r1, #16]
 8006da4:	4605      	mov	r5, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	b913      	cbnz	r3, 8006db0 <_fflush_r+0x10>
 8006daa:	2500      	movs	r5, #0
 8006dac:	4628      	mov	r0, r5
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	b118      	cbz	r0, 8006dba <_fflush_r+0x1a>
 8006db2:	6a03      	ldr	r3, [r0, #32]
 8006db4:	b90b      	cbnz	r3, 8006dba <_fflush_r+0x1a>
 8006db6:	f7fd ff67 	bl	8004c88 <__sinit>
 8006dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f3      	beq.n	8006daa <_fflush_r+0xa>
 8006dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dc4:	07d0      	lsls	r0, r2, #31
 8006dc6:	d404      	bmi.n	8006dd2 <_fflush_r+0x32>
 8006dc8:	0599      	lsls	r1, r3, #22
 8006dca:	d402      	bmi.n	8006dd2 <_fflush_r+0x32>
 8006dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dce:	f7fe f89a 	bl	8004f06 <__retarget_lock_acquire_recursive>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	f7ff ff5f 	bl	8006c98 <__sflush_r>
 8006dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ddc:	07da      	lsls	r2, r3, #31
 8006dde:	4605      	mov	r5, r0
 8006de0:	d4e4      	bmi.n	8006dac <_fflush_r+0xc>
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	059b      	lsls	r3, r3, #22
 8006de6:	d4e1      	bmi.n	8006dac <_fflush_r+0xc>
 8006de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dea:	f7fe f88d 	bl	8004f08 <__retarget_lock_release_recursive>
 8006dee:	e7dd      	b.n	8006dac <_fflush_r+0xc>

08006df0 <__sccl>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	780b      	ldrb	r3, [r1, #0]
 8006df4:	4604      	mov	r4, r0
 8006df6:	2b5e      	cmp	r3, #94	@ 0x5e
 8006df8:	bf0b      	itete	eq
 8006dfa:	784b      	ldrbeq	r3, [r1, #1]
 8006dfc:	1c4a      	addne	r2, r1, #1
 8006dfe:	1c8a      	addeq	r2, r1, #2
 8006e00:	2100      	movne	r1, #0
 8006e02:	bf08      	it	eq
 8006e04:	2101      	moveq	r1, #1
 8006e06:	3801      	subs	r0, #1
 8006e08:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006e0c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006e10:	42a8      	cmp	r0, r5
 8006e12:	d1fb      	bne.n	8006e0c <__sccl+0x1c>
 8006e14:	b90b      	cbnz	r3, 8006e1a <__sccl+0x2a>
 8006e16:	1e50      	subs	r0, r2, #1
 8006e18:	bd70      	pop	{r4, r5, r6, pc}
 8006e1a:	f081 0101 	eor.w	r1, r1, #1
 8006e1e:	54e1      	strb	r1, [r4, r3]
 8006e20:	4610      	mov	r0, r2
 8006e22:	4602      	mov	r2, r0
 8006e24:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e28:	2d2d      	cmp	r5, #45	@ 0x2d
 8006e2a:	d005      	beq.n	8006e38 <__sccl+0x48>
 8006e2c:	2d5d      	cmp	r5, #93	@ 0x5d
 8006e2e:	d016      	beq.n	8006e5e <__sccl+0x6e>
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	d0f1      	beq.n	8006e18 <__sccl+0x28>
 8006e34:	462b      	mov	r3, r5
 8006e36:	e7f2      	b.n	8006e1e <__sccl+0x2e>
 8006e38:	7846      	ldrb	r6, [r0, #1]
 8006e3a:	2e5d      	cmp	r6, #93	@ 0x5d
 8006e3c:	d0fa      	beq.n	8006e34 <__sccl+0x44>
 8006e3e:	42b3      	cmp	r3, r6
 8006e40:	dcf8      	bgt.n	8006e34 <__sccl+0x44>
 8006e42:	3002      	adds	r0, #2
 8006e44:	461a      	mov	r2, r3
 8006e46:	3201      	adds	r2, #1
 8006e48:	4296      	cmp	r6, r2
 8006e4a:	54a1      	strb	r1, [r4, r2]
 8006e4c:	dcfb      	bgt.n	8006e46 <__sccl+0x56>
 8006e4e:	1af2      	subs	r2, r6, r3
 8006e50:	3a01      	subs	r2, #1
 8006e52:	1c5d      	adds	r5, r3, #1
 8006e54:	42b3      	cmp	r3, r6
 8006e56:	bfa8      	it	ge
 8006e58:	2200      	movge	r2, #0
 8006e5a:	18ab      	adds	r3, r5, r2
 8006e5c:	e7e1      	b.n	8006e22 <__sccl+0x32>
 8006e5e:	4610      	mov	r0, r2
 8006e60:	e7da      	b.n	8006e18 <__sccl+0x28>

08006e62 <__submore>:
 8006e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	460c      	mov	r4, r1
 8006e68:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	d11d      	bne.n	8006eae <__submore+0x4c>
 8006e72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e76:	f7fe f8bb 	bl	8004ff0 <_malloc_r>
 8006e7a:	b918      	cbnz	r0, 8006e84 <__submore+0x22>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e88:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006e8a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006e8e:	6360      	str	r0, [r4, #52]	@ 0x34
 8006e90:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006e94:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006e98:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006e9c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006ea0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006ea4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006ea8:	6020      	str	r0, [r4, #0]
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e7e8      	b.n	8006e80 <__submore+0x1e>
 8006eae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006eb0:	0077      	lsls	r7, r6, #1
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	f001 f8f6 	bl	80080a4 <_realloc_r>
 8006eb8:	4605      	mov	r5, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0de      	beq.n	8006e7c <__submore+0x1a>
 8006ebe:	eb00 0806 	add.w	r8, r0, r6
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	f000 f8d6 	bl	8007078 <memcpy>
 8006ecc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006ed0:	f8c4 8000 	str.w	r8, [r4]
 8006ed4:	e7e9      	b.n	8006eaa <__submore+0x48>

08006ed6 <__swbuf_r>:
 8006ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed8:	460e      	mov	r6, r1
 8006eda:	4614      	mov	r4, r2
 8006edc:	4605      	mov	r5, r0
 8006ede:	b118      	cbz	r0, 8006ee8 <__swbuf_r+0x12>
 8006ee0:	6a03      	ldr	r3, [r0, #32]
 8006ee2:	b90b      	cbnz	r3, 8006ee8 <__swbuf_r+0x12>
 8006ee4:	f7fd fed0 	bl	8004c88 <__sinit>
 8006ee8:	69a3      	ldr	r3, [r4, #24]
 8006eea:	60a3      	str	r3, [r4, #8]
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	071a      	lsls	r2, r3, #28
 8006ef0:	d501      	bpl.n	8006ef6 <__swbuf_r+0x20>
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	b943      	cbnz	r3, 8006f08 <__swbuf_r+0x32>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f000 f82b 	bl	8006f54 <__swsetup_r>
 8006efe:	b118      	cbz	r0, 8006f08 <__swbuf_r+0x32>
 8006f00:	f04f 37ff 	mov.w	r7, #4294967295
 8006f04:	4638      	mov	r0, r7
 8006f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	6922      	ldr	r2, [r4, #16]
 8006f0c:	1a98      	subs	r0, r3, r2
 8006f0e:	6963      	ldr	r3, [r4, #20]
 8006f10:	b2f6      	uxtb	r6, r6
 8006f12:	4283      	cmp	r3, r0
 8006f14:	4637      	mov	r7, r6
 8006f16:	dc05      	bgt.n	8006f24 <__swbuf_r+0x4e>
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f7ff ff40 	bl	8006da0 <_fflush_r>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d1ed      	bne.n	8006f00 <__swbuf_r+0x2a>
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	60a3      	str	r3, [r4, #8]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	701e      	strb	r6, [r3, #0]
 8006f32:	6962      	ldr	r2, [r4, #20]
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d004      	beq.n	8006f44 <__swbuf_r+0x6e>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	07db      	lsls	r3, r3, #31
 8006f3e:	d5e1      	bpl.n	8006f04 <__swbuf_r+0x2e>
 8006f40:	2e0a      	cmp	r6, #10
 8006f42:	d1df      	bne.n	8006f04 <__swbuf_r+0x2e>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7ff ff2a 	bl	8006da0 <_fflush_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d0d9      	beq.n	8006f04 <__swbuf_r+0x2e>
 8006f50:	e7d6      	b.n	8006f00 <__swbuf_r+0x2a>
	...

08006f54 <__swsetup_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4b29      	ldr	r3, [pc, #164]	@ (8006ffc <__swsetup_r+0xa8>)
 8006f58:	4605      	mov	r5, r0
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	b118      	cbz	r0, 8006f68 <__swsetup_r+0x14>
 8006f60:	6a03      	ldr	r3, [r0, #32]
 8006f62:	b90b      	cbnz	r3, 8006f68 <__swsetup_r+0x14>
 8006f64:	f7fd fe90 	bl	8004c88 <__sinit>
 8006f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6c:	0719      	lsls	r1, r3, #28
 8006f6e:	d422      	bmi.n	8006fb6 <__swsetup_r+0x62>
 8006f70:	06da      	lsls	r2, r3, #27
 8006f72:	d407      	bmi.n	8006f84 <__swsetup_r+0x30>
 8006f74:	2209      	movs	r2, #9
 8006f76:	602a      	str	r2, [r5, #0]
 8006f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f82:	e033      	b.n	8006fec <__swsetup_r+0x98>
 8006f84:	0758      	lsls	r0, r3, #29
 8006f86:	d512      	bpl.n	8006fae <__swsetup_r+0x5a>
 8006f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f8a:	b141      	cbz	r1, 8006f9e <__swsetup_r+0x4a>
 8006f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f90:	4299      	cmp	r1, r3
 8006f92:	d002      	beq.n	8006f9a <__swsetup_r+0x46>
 8006f94:	4628      	mov	r0, r5
 8006f96:	f7fd ffbf 	bl	8004f18 <_free_r>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fa4:	81a3      	strh	r3, [r4, #12]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f043 0308 	orr.w	r3, r3, #8
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	b94b      	cbnz	r3, 8006fce <__swsetup_r+0x7a>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc4:	d003      	beq.n	8006fce <__swsetup_r+0x7a>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f001 f93c 	bl	8008246 <__smakebuf_r>
 8006fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd2:	f013 0201 	ands.w	r2, r3, #1
 8006fd6:	d00a      	beq.n	8006fee <__swsetup_r+0x9a>
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60a2      	str	r2, [r4, #8]
 8006fdc:	6962      	ldr	r2, [r4, #20]
 8006fde:	4252      	negs	r2, r2
 8006fe0:	61a2      	str	r2, [r4, #24]
 8006fe2:	6922      	ldr	r2, [r4, #16]
 8006fe4:	b942      	cbnz	r2, 8006ff8 <__swsetup_r+0xa4>
 8006fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fea:	d1c5      	bne.n	8006f78 <__swsetup_r+0x24>
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	0799      	lsls	r1, r3, #30
 8006ff0:	bf58      	it	pl
 8006ff2:	6962      	ldrpl	r2, [r4, #20]
 8006ff4:	60a2      	str	r2, [r4, #8]
 8006ff6:	e7f4      	b.n	8006fe2 <__swsetup_r+0x8e>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e7f7      	b.n	8006fec <__swsetup_r+0x98>
 8006ffc:	20000018 	.word	0x20000018

08007000 <memmove>:
 8007000:	4288      	cmp	r0, r1
 8007002:	b510      	push	{r4, lr}
 8007004:	eb01 0402 	add.w	r4, r1, r2
 8007008:	d902      	bls.n	8007010 <memmove+0x10>
 800700a:	4284      	cmp	r4, r0
 800700c:	4623      	mov	r3, r4
 800700e:	d807      	bhi.n	8007020 <memmove+0x20>
 8007010:	1e43      	subs	r3, r0, #1
 8007012:	42a1      	cmp	r1, r4
 8007014:	d008      	beq.n	8007028 <memmove+0x28>
 8007016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800701a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800701e:	e7f8      	b.n	8007012 <memmove+0x12>
 8007020:	4402      	add	r2, r0
 8007022:	4601      	mov	r1, r0
 8007024:	428a      	cmp	r2, r1
 8007026:	d100      	bne.n	800702a <memmove+0x2a>
 8007028:	bd10      	pop	{r4, pc}
 800702a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800702e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007032:	e7f7      	b.n	8007024 <memmove+0x24>

08007034 <strncmp>:
 8007034:	b510      	push	{r4, lr}
 8007036:	b16a      	cbz	r2, 8007054 <strncmp+0x20>
 8007038:	3901      	subs	r1, #1
 800703a:	1884      	adds	r4, r0, r2
 800703c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007040:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007044:	429a      	cmp	r2, r3
 8007046:	d103      	bne.n	8007050 <strncmp+0x1c>
 8007048:	42a0      	cmp	r0, r4
 800704a:	d001      	beq.n	8007050 <strncmp+0x1c>
 800704c:	2a00      	cmp	r2, #0
 800704e:	d1f5      	bne.n	800703c <strncmp+0x8>
 8007050:	1ad0      	subs	r0, r2, r3
 8007052:	bd10      	pop	{r4, pc}
 8007054:	4610      	mov	r0, r2
 8007056:	e7fc      	b.n	8007052 <strncmp+0x1e>

08007058 <_sbrk_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d06      	ldr	r5, [pc, #24]	@ (8007074 <_sbrk_r+0x1c>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7fa fa06 	bl	8001474 <_sbrk>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_sbrk_r+0x1a>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_sbrk_r+0x1a>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	200004fc 	.word	0x200004fc

08007078 <memcpy>:
 8007078:	440a      	add	r2, r1
 800707a:	4291      	cmp	r1, r2
 800707c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007080:	d100      	bne.n	8007084 <memcpy+0xc>
 8007082:	4770      	bx	lr
 8007084:	b510      	push	{r4, lr}
 8007086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708e:	4291      	cmp	r1, r2
 8007090:	d1f9      	bne.n	8007086 <memcpy+0xe>
 8007092:	bd10      	pop	{r4, pc}
 8007094:	0000      	movs	r0, r0
	...

08007098 <nan>:
 8007098:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80070a0 <nan+0x8>
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	00000000 	.word	0x00000000
 80070a4:	7ff80000 	.word	0x7ff80000

080070a8 <rshift>:
 80070a8:	6903      	ldr	r3, [r0, #16]
 80070aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070b6:	f100 0414 	add.w	r4, r0, #20
 80070ba:	dd45      	ble.n	8007148 <rshift+0xa0>
 80070bc:	f011 011f 	ands.w	r1, r1, #31
 80070c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070c8:	d10c      	bne.n	80070e4 <rshift+0x3c>
 80070ca:	f100 0710 	add.w	r7, r0, #16
 80070ce:	4629      	mov	r1, r5
 80070d0:	42b1      	cmp	r1, r6
 80070d2:	d334      	bcc.n	800713e <rshift+0x96>
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	1eea      	subs	r2, r5, #3
 80070da:	4296      	cmp	r6, r2
 80070dc:	bf38      	it	cc
 80070de:	2300      	movcc	r3, #0
 80070e0:	4423      	add	r3, r4
 80070e2:	e015      	b.n	8007110 <rshift+0x68>
 80070e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070e8:	f1c1 0820 	rsb	r8, r1, #32
 80070ec:	40cf      	lsrs	r7, r1
 80070ee:	f105 0e04 	add.w	lr, r5, #4
 80070f2:	46a1      	mov	r9, r4
 80070f4:	4576      	cmp	r6, lr
 80070f6:	46f4      	mov	ip, lr
 80070f8:	d815      	bhi.n	8007126 <rshift+0x7e>
 80070fa:	1a9a      	subs	r2, r3, r2
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	3a04      	subs	r2, #4
 8007100:	3501      	adds	r5, #1
 8007102:	42ae      	cmp	r6, r5
 8007104:	bf38      	it	cc
 8007106:	2200      	movcc	r2, #0
 8007108:	18a3      	adds	r3, r4, r2
 800710a:	50a7      	str	r7, [r4, r2]
 800710c:	b107      	cbz	r7, 8007110 <rshift+0x68>
 800710e:	3304      	adds	r3, #4
 8007110:	1b1a      	subs	r2, r3, r4
 8007112:	42a3      	cmp	r3, r4
 8007114:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007118:	bf08      	it	eq
 800711a:	2300      	moveq	r3, #0
 800711c:	6102      	str	r2, [r0, #16]
 800711e:	bf08      	it	eq
 8007120:	6143      	streq	r3, [r0, #20]
 8007122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007126:	f8dc c000 	ldr.w	ip, [ip]
 800712a:	fa0c fc08 	lsl.w	ip, ip, r8
 800712e:	ea4c 0707 	orr.w	r7, ip, r7
 8007132:	f849 7b04 	str.w	r7, [r9], #4
 8007136:	f85e 7b04 	ldr.w	r7, [lr], #4
 800713a:	40cf      	lsrs	r7, r1
 800713c:	e7da      	b.n	80070f4 <rshift+0x4c>
 800713e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007142:	f847 cf04 	str.w	ip, [r7, #4]!
 8007146:	e7c3      	b.n	80070d0 <rshift+0x28>
 8007148:	4623      	mov	r3, r4
 800714a:	e7e1      	b.n	8007110 <rshift+0x68>

0800714c <__hexdig_fun>:
 800714c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007150:	2b09      	cmp	r3, #9
 8007152:	d802      	bhi.n	800715a <__hexdig_fun+0xe>
 8007154:	3820      	subs	r0, #32
 8007156:	b2c0      	uxtb	r0, r0
 8007158:	4770      	bx	lr
 800715a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800715e:	2b05      	cmp	r3, #5
 8007160:	d801      	bhi.n	8007166 <__hexdig_fun+0x1a>
 8007162:	3847      	subs	r0, #71	@ 0x47
 8007164:	e7f7      	b.n	8007156 <__hexdig_fun+0xa>
 8007166:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800716a:	2b05      	cmp	r3, #5
 800716c:	d801      	bhi.n	8007172 <__hexdig_fun+0x26>
 800716e:	3827      	subs	r0, #39	@ 0x27
 8007170:	e7f1      	b.n	8007156 <__hexdig_fun+0xa>
 8007172:	2000      	movs	r0, #0
 8007174:	4770      	bx	lr
	...

08007178 <__gethex>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	b085      	sub	sp, #20
 800717e:	468a      	mov	sl, r1
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	680b      	ldr	r3, [r1, #0]
 8007184:	9001      	str	r0, [sp, #4]
 8007186:	4690      	mov	r8, r2
 8007188:	1c9c      	adds	r4, r3, #2
 800718a:	46a1      	mov	r9, r4
 800718c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007190:	2830      	cmp	r0, #48	@ 0x30
 8007192:	d0fa      	beq.n	800718a <__gethex+0x12>
 8007194:	eba9 0303 	sub.w	r3, r9, r3
 8007198:	f1a3 0b02 	sub.w	fp, r3, #2
 800719c:	f7ff ffd6 	bl	800714c <__hexdig_fun>
 80071a0:	4605      	mov	r5, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d168      	bne.n	8007278 <__gethex+0x100>
 80071a6:	49a0      	ldr	r1, [pc, #640]	@ (8007428 <__gethex+0x2b0>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	4648      	mov	r0, r9
 80071ac:	f7ff ff42 	bl	8007034 <strncmp>
 80071b0:	4607      	mov	r7, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d167      	bne.n	8007286 <__gethex+0x10e>
 80071b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80071ba:	4626      	mov	r6, r4
 80071bc:	f7ff ffc6 	bl	800714c <__hexdig_fun>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d062      	beq.n	800728a <__gethex+0x112>
 80071c4:	4623      	mov	r3, r4
 80071c6:	7818      	ldrb	r0, [r3, #0]
 80071c8:	2830      	cmp	r0, #48	@ 0x30
 80071ca:	4699      	mov	r9, r3
 80071cc:	f103 0301 	add.w	r3, r3, #1
 80071d0:	d0f9      	beq.n	80071c6 <__gethex+0x4e>
 80071d2:	f7ff ffbb 	bl	800714c <__hexdig_fun>
 80071d6:	fab0 f580 	clz	r5, r0
 80071da:	096d      	lsrs	r5, r5, #5
 80071dc:	f04f 0b01 	mov.w	fp, #1
 80071e0:	464a      	mov	r2, r9
 80071e2:	4616      	mov	r6, r2
 80071e4:	3201      	adds	r2, #1
 80071e6:	7830      	ldrb	r0, [r6, #0]
 80071e8:	f7ff ffb0 	bl	800714c <__hexdig_fun>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d1f8      	bne.n	80071e2 <__gethex+0x6a>
 80071f0:	498d      	ldr	r1, [pc, #564]	@ (8007428 <__gethex+0x2b0>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7ff ff1d 	bl	8007034 <strncmp>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d13f      	bne.n	800727e <__gethex+0x106>
 80071fe:	b944      	cbnz	r4, 8007212 <__gethex+0x9a>
 8007200:	1c74      	adds	r4, r6, #1
 8007202:	4622      	mov	r2, r4
 8007204:	4616      	mov	r6, r2
 8007206:	3201      	adds	r2, #1
 8007208:	7830      	ldrb	r0, [r6, #0]
 800720a:	f7ff ff9f 	bl	800714c <__hexdig_fun>
 800720e:	2800      	cmp	r0, #0
 8007210:	d1f8      	bne.n	8007204 <__gethex+0x8c>
 8007212:	1ba4      	subs	r4, r4, r6
 8007214:	00a7      	lsls	r7, r4, #2
 8007216:	7833      	ldrb	r3, [r6, #0]
 8007218:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800721c:	2b50      	cmp	r3, #80	@ 0x50
 800721e:	d13e      	bne.n	800729e <__gethex+0x126>
 8007220:	7873      	ldrb	r3, [r6, #1]
 8007222:	2b2b      	cmp	r3, #43	@ 0x2b
 8007224:	d033      	beq.n	800728e <__gethex+0x116>
 8007226:	2b2d      	cmp	r3, #45	@ 0x2d
 8007228:	d034      	beq.n	8007294 <__gethex+0x11c>
 800722a:	1c71      	adds	r1, r6, #1
 800722c:	2400      	movs	r4, #0
 800722e:	7808      	ldrb	r0, [r1, #0]
 8007230:	f7ff ff8c 	bl	800714c <__hexdig_fun>
 8007234:	1e43      	subs	r3, r0, #1
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b18      	cmp	r3, #24
 800723a:	d830      	bhi.n	800729e <__gethex+0x126>
 800723c:	f1a0 0210 	sub.w	r2, r0, #16
 8007240:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007244:	f7ff ff82 	bl	800714c <__hexdig_fun>
 8007248:	f100 3cff 	add.w	ip, r0, #4294967295
 800724c:	fa5f fc8c 	uxtb.w	ip, ip
 8007250:	f1bc 0f18 	cmp.w	ip, #24
 8007254:	f04f 030a 	mov.w	r3, #10
 8007258:	d91e      	bls.n	8007298 <__gethex+0x120>
 800725a:	b104      	cbz	r4, 800725e <__gethex+0xe6>
 800725c:	4252      	negs	r2, r2
 800725e:	4417      	add	r7, r2
 8007260:	f8ca 1000 	str.w	r1, [sl]
 8007264:	b1ed      	cbz	r5, 80072a2 <__gethex+0x12a>
 8007266:	f1bb 0f00 	cmp.w	fp, #0
 800726a:	bf0c      	ite	eq
 800726c:	2506      	moveq	r5, #6
 800726e:	2500      	movne	r5, #0
 8007270:	4628      	mov	r0, r5
 8007272:	b005      	add	sp, #20
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007278:	2500      	movs	r5, #0
 800727a:	462c      	mov	r4, r5
 800727c:	e7b0      	b.n	80071e0 <__gethex+0x68>
 800727e:	2c00      	cmp	r4, #0
 8007280:	d1c7      	bne.n	8007212 <__gethex+0x9a>
 8007282:	4627      	mov	r7, r4
 8007284:	e7c7      	b.n	8007216 <__gethex+0x9e>
 8007286:	464e      	mov	r6, r9
 8007288:	462f      	mov	r7, r5
 800728a:	2501      	movs	r5, #1
 800728c:	e7c3      	b.n	8007216 <__gethex+0x9e>
 800728e:	2400      	movs	r4, #0
 8007290:	1cb1      	adds	r1, r6, #2
 8007292:	e7cc      	b.n	800722e <__gethex+0xb6>
 8007294:	2401      	movs	r4, #1
 8007296:	e7fb      	b.n	8007290 <__gethex+0x118>
 8007298:	fb03 0002 	mla	r0, r3, r2, r0
 800729c:	e7ce      	b.n	800723c <__gethex+0xc4>
 800729e:	4631      	mov	r1, r6
 80072a0:	e7de      	b.n	8007260 <__gethex+0xe8>
 80072a2:	eba6 0309 	sub.w	r3, r6, r9
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4629      	mov	r1, r5
 80072aa:	2b07      	cmp	r3, #7
 80072ac:	dc0a      	bgt.n	80072c4 <__gethex+0x14c>
 80072ae:	9801      	ldr	r0, [sp, #4]
 80072b0:	f000 fa46 	bl	8007740 <_Balloc>
 80072b4:	4604      	mov	r4, r0
 80072b6:	b940      	cbnz	r0, 80072ca <__gethex+0x152>
 80072b8:	4b5c      	ldr	r3, [pc, #368]	@ (800742c <__gethex+0x2b4>)
 80072ba:	4602      	mov	r2, r0
 80072bc:	21e4      	movs	r1, #228	@ 0xe4
 80072be:	485c      	ldr	r0, [pc, #368]	@ (8007430 <__gethex+0x2b8>)
 80072c0:	f001 f820 	bl	8008304 <__assert_func>
 80072c4:	3101      	adds	r1, #1
 80072c6:	105b      	asrs	r3, r3, #1
 80072c8:	e7ef      	b.n	80072aa <__gethex+0x132>
 80072ca:	f100 0a14 	add.w	sl, r0, #20
 80072ce:	2300      	movs	r3, #0
 80072d0:	4655      	mov	r5, sl
 80072d2:	469b      	mov	fp, r3
 80072d4:	45b1      	cmp	r9, r6
 80072d6:	d337      	bcc.n	8007348 <__gethex+0x1d0>
 80072d8:	f845 bb04 	str.w	fp, [r5], #4
 80072dc:	eba5 050a 	sub.w	r5, r5, sl
 80072e0:	10ad      	asrs	r5, r5, #2
 80072e2:	6125      	str	r5, [r4, #16]
 80072e4:	4658      	mov	r0, fp
 80072e6:	f000 fb1d 	bl	8007924 <__hi0bits>
 80072ea:	016d      	lsls	r5, r5, #5
 80072ec:	f8d8 6000 	ldr.w	r6, [r8]
 80072f0:	1a2d      	subs	r5, r5, r0
 80072f2:	42b5      	cmp	r5, r6
 80072f4:	dd54      	ble.n	80073a0 <__gethex+0x228>
 80072f6:	1bad      	subs	r5, r5, r6
 80072f8:	4629      	mov	r1, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 feb1 	bl	8008062 <__any_on>
 8007300:	4681      	mov	r9, r0
 8007302:	b178      	cbz	r0, 8007324 <__gethex+0x1ac>
 8007304:	1e6b      	subs	r3, r5, #1
 8007306:	1159      	asrs	r1, r3, #5
 8007308:	f003 021f 	and.w	r2, r3, #31
 800730c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007310:	f04f 0901 	mov.w	r9, #1
 8007314:	fa09 f202 	lsl.w	r2, r9, r2
 8007318:	420a      	tst	r2, r1
 800731a:	d003      	beq.n	8007324 <__gethex+0x1ac>
 800731c:	454b      	cmp	r3, r9
 800731e:	dc36      	bgt.n	800738e <__gethex+0x216>
 8007320:	f04f 0902 	mov.w	r9, #2
 8007324:	4629      	mov	r1, r5
 8007326:	4620      	mov	r0, r4
 8007328:	f7ff febe 	bl	80070a8 <rshift>
 800732c:	442f      	add	r7, r5
 800732e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007332:	42bb      	cmp	r3, r7
 8007334:	da42      	bge.n	80073bc <__gethex+0x244>
 8007336:	9801      	ldr	r0, [sp, #4]
 8007338:	4621      	mov	r1, r4
 800733a:	f000 fa41 	bl	80077c0 <_Bfree>
 800733e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007340:	2300      	movs	r3, #0
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	25a3      	movs	r5, #163	@ 0xa3
 8007346:	e793      	b.n	8007270 <__gethex+0xf8>
 8007348:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800734c:	2a2e      	cmp	r2, #46	@ 0x2e
 800734e:	d012      	beq.n	8007376 <__gethex+0x1fe>
 8007350:	2b20      	cmp	r3, #32
 8007352:	d104      	bne.n	800735e <__gethex+0x1e6>
 8007354:	f845 bb04 	str.w	fp, [r5], #4
 8007358:	f04f 0b00 	mov.w	fp, #0
 800735c:	465b      	mov	r3, fp
 800735e:	7830      	ldrb	r0, [r6, #0]
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	f7ff fef3 	bl	800714c <__hexdig_fun>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	f000 000f 	and.w	r0, r0, #15
 800736c:	4098      	lsls	r0, r3
 800736e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007372:	3304      	adds	r3, #4
 8007374:	e7ae      	b.n	80072d4 <__gethex+0x15c>
 8007376:	45b1      	cmp	r9, r6
 8007378:	d8ea      	bhi.n	8007350 <__gethex+0x1d8>
 800737a:	492b      	ldr	r1, [pc, #172]	@ (8007428 <__gethex+0x2b0>)
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff fe57 	bl	8007034 <strncmp>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	2800      	cmp	r0, #0
 800738a:	d1e1      	bne.n	8007350 <__gethex+0x1d8>
 800738c:	e7a2      	b.n	80072d4 <__gethex+0x15c>
 800738e:	1ea9      	subs	r1, r5, #2
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fe66 	bl	8008062 <__any_on>
 8007396:	2800      	cmp	r0, #0
 8007398:	d0c2      	beq.n	8007320 <__gethex+0x1a8>
 800739a:	f04f 0903 	mov.w	r9, #3
 800739e:	e7c1      	b.n	8007324 <__gethex+0x1ac>
 80073a0:	da09      	bge.n	80073b6 <__gethex+0x23e>
 80073a2:	1b75      	subs	r5, r6, r5
 80073a4:	4621      	mov	r1, r4
 80073a6:	9801      	ldr	r0, [sp, #4]
 80073a8:	462a      	mov	r2, r5
 80073aa:	f000 fc21 	bl	8007bf0 <__lshift>
 80073ae:	1b7f      	subs	r7, r7, r5
 80073b0:	4604      	mov	r4, r0
 80073b2:	f100 0a14 	add.w	sl, r0, #20
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	e7b8      	b.n	800732e <__gethex+0x1b6>
 80073bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80073c0:	42bd      	cmp	r5, r7
 80073c2:	dd6f      	ble.n	80074a4 <__gethex+0x32c>
 80073c4:	1bed      	subs	r5, r5, r7
 80073c6:	42ae      	cmp	r6, r5
 80073c8:	dc34      	bgt.n	8007434 <__gethex+0x2bc>
 80073ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d022      	beq.n	8007418 <__gethex+0x2a0>
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d024      	beq.n	8007420 <__gethex+0x2a8>
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d115      	bne.n	8007406 <__gethex+0x28e>
 80073da:	42ae      	cmp	r6, r5
 80073dc:	d113      	bne.n	8007406 <__gethex+0x28e>
 80073de:	2e01      	cmp	r6, #1
 80073e0:	d10b      	bne.n	80073fa <__gethex+0x282>
 80073e2:	9a02      	ldr	r2, [sp, #8]
 80073e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	2301      	movs	r3, #1
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	f8ca 3000 	str.w	r3, [sl]
 80073f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073f4:	2562      	movs	r5, #98	@ 0x62
 80073f6:	601c      	str	r4, [r3, #0]
 80073f8:	e73a      	b.n	8007270 <__gethex+0xf8>
 80073fa:	1e71      	subs	r1, r6, #1
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 fe30 	bl	8008062 <__any_on>
 8007402:	2800      	cmp	r0, #0
 8007404:	d1ed      	bne.n	80073e2 <__gethex+0x26a>
 8007406:	9801      	ldr	r0, [sp, #4]
 8007408:	4621      	mov	r1, r4
 800740a:	f000 f9d9 	bl	80077c0 <_Bfree>
 800740e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007410:	2300      	movs	r3, #0
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	2550      	movs	r5, #80	@ 0x50
 8007416:	e72b      	b.n	8007270 <__gethex+0xf8>
 8007418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f3      	bne.n	8007406 <__gethex+0x28e>
 800741e:	e7e0      	b.n	80073e2 <__gethex+0x26a>
 8007420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1dd      	bne.n	80073e2 <__gethex+0x26a>
 8007426:	e7ee      	b.n	8007406 <__gethex+0x28e>
 8007428:	080084b9 	.word	0x080084b9
 800742c:	0800866f 	.word	0x0800866f
 8007430:	08008680 	.word	0x08008680
 8007434:	1e6f      	subs	r7, r5, #1
 8007436:	f1b9 0f00 	cmp.w	r9, #0
 800743a:	d130      	bne.n	800749e <__gethex+0x326>
 800743c:	b127      	cbz	r7, 8007448 <__gethex+0x2d0>
 800743e:	4639      	mov	r1, r7
 8007440:	4620      	mov	r0, r4
 8007442:	f000 fe0e 	bl	8008062 <__any_on>
 8007446:	4681      	mov	r9, r0
 8007448:	117a      	asrs	r2, r7, #5
 800744a:	2301      	movs	r3, #1
 800744c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007450:	f007 071f 	and.w	r7, r7, #31
 8007454:	40bb      	lsls	r3, r7
 8007456:	4213      	tst	r3, r2
 8007458:	4629      	mov	r1, r5
 800745a:	4620      	mov	r0, r4
 800745c:	bf18      	it	ne
 800745e:	f049 0902 	orrne.w	r9, r9, #2
 8007462:	f7ff fe21 	bl	80070a8 <rshift>
 8007466:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800746a:	1b76      	subs	r6, r6, r5
 800746c:	2502      	movs	r5, #2
 800746e:	f1b9 0f00 	cmp.w	r9, #0
 8007472:	d047      	beq.n	8007504 <__gethex+0x38c>
 8007474:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d015      	beq.n	80074a8 <__gethex+0x330>
 800747c:	2b03      	cmp	r3, #3
 800747e:	d017      	beq.n	80074b0 <__gethex+0x338>
 8007480:	2b01      	cmp	r3, #1
 8007482:	d109      	bne.n	8007498 <__gethex+0x320>
 8007484:	f019 0f02 	tst.w	r9, #2
 8007488:	d006      	beq.n	8007498 <__gethex+0x320>
 800748a:	f8da 3000 	ldr.w	r3, [sl]
 800748e:	ea49 0903 	orr.w	r9, r9, r3
 8007492:	f019 0f01 	tst.w	r9, #1
 8007496:	d10e      	bne.n	80074b6 <__gethex+0x33e>
 8007498:	f045 0510 	orr.w	r5, r5, #16
 800749c:	e032      	b.n	8007504 <__gethex+0x38c>
 800749e:	f04f 0901 	mov.w	r9, #1
 80074a2:	e7d1      	b.n	8007448 <__gethex+0x2d0>
 80074a4:	2501      	movs	r5, #1
 80074a6:	e7e2      	b.n	800746e <__gethex+0x2f6>
 80074a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074aa:	f1c3 0301 	rsb	r3, r3, #1
 80074ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0f0      	beq.n	8007498 <__gethex+0x320>
 80074b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074ba:	f104 0314 	add.w	r3, r4, #20
 80074be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80074c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80074c6:	f04f 0c00 	mov.w	ip, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074d4:	d01b      	beq.n	800750e <__gethex+0x396>
 80074d6:	3201      	adds	r2, #1
 80074d8:	6002      	str	r2, [r0, #0]
 80074da:	2d02      	cmp	r5, #2
 80074dc:	f104 0314 	add.w	r3, r4, #20
 80074e0:	d13c      	bne.n	800755c <__gethex+0x3e4>
 80074e2:	f8d8 2000 	ldr.w	r2, [r8]
 80074e6:	3a01      	subs	r2, #1
 80074e8:	42b2      	cmp	r2, r6
 80074ea:	d109      	bne.n	8007500 <__gethex+0x388>
 80074ec:	1171      	asrs	r1, r6, #5
 80074ee:	2201      	movs	r2, #1
 80074f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074f4:	f006 061f 	and.w	r6, r6, #31
 80074f8:	fa02 f606 	lsl.w	r6, r2, r6
 80074fc:	421e      	tst	r6, r3
 80074fe:	d13a      	bne.n	8007576 <__gethex+0x3fe>
 8007500:	f045 0520 	orr.w	r5, r5, #32
 8007504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007506:	601c      	str	r4, [r3, #0]
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	601f      	str	r7, [r3, #0]
 800750c:	e6b0      	b.n	8007270 <__gethex+0xf8>
 800750e:	4299      	cmp	r1, r3
 8007510:	f843 cc04 	str.w	ip, [r3, #-4]
 8007514:	d8d9      	bhi.n	80074ca <__gethex+0x352>
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	459b      	cmp	fp, r3
 800751a:	db17      	blt.n	800754c <__gethex+0x3d4>
 800751c:	6861      	ldr	r1, [r4, #4]
 800751e:	9801      	ldr	r0, [sp, #4]
 8007520:	3101      	adds	r1, #1
 8007522:	f000 f90d 	bl	8007740 <_Balloc>
 8007526:	4681      	mov	r9, r0
 8007528:	b918      	cbnz	r0, 8007532 <__gethex+0x3ba>
 800752a:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <__gethex+0x41c>)
 800752c:	4602      	mov	r2, r0
 800752e:	2184      	movs	r1, #132	@ 0x84
 8007530:	e6c5      	b.n	80072be <__gethex+0x146>
 8007532:	6922      	ldr	r2, [r4, #16]
 8007534:	3202      	adds	r2, #2
 8007536:	f104 010c 	add.w	r1, r4, #12
 800753a:	0092      	lsls	r2, r2, #2
 800753c:	300c      	adds	r0, #12
 800753e:	f7ff fd9b 	bl	8007078 <memcpy>
 8007542:	4621      	mov	r1, r4
 8007544:	9801      	ldr	r0, [sp, #4]
 8007546:	f000 f93b 	bl	80077c0 <_Bfree>
 800754a:	464c      	mov	r4, r9
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007554:	6122      	str	r2, [r4, #16]
 8007556:	2201      	movs	r2, #1
 8007558:	615a      	str	r2, [r3, #20]
 800755a:	e7be      	b.n	80074da <__gethex+0x362>
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	455a      	cmp	r2, fp
 8007560:	dd0b      	ble.n	800757a <__gethex+0x402>
 8007562:	2101      	movs	r1, #1
 8007564:	4620      	mov	r0, r4
 8007566:	f7ff fd9f 	bl	80070a8 <rshift>
 800756a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800756e:	3701      	adds	r7, #1
 8007570:	42bb      	cmp	r3, r7
 8007572:	f6ff aee0 	blt.w	8007336 <__gethex+0x1be>
 8007576:	2501      	movs	r5, #1
 8007578:	e7c2      	b.n	8007500 <__gethex+0x388>
 800757a:	f016 061f 	ands.w	r6, r6, #31
 800757e:	d0fa      	beq.n	8007576 <__gethex+0x3fe>
 8007580:	4453      	add	r3, sl
 8007582:	f1c6 0620 	rsb	r6, r6, #32
 8007586:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800758a:	f000 f9cb 	bl	8007924 <__hi0bits>
 800758e:	42b0      	cmp	r0, r6
 8007590:	dbe7      	blt.n	8007562 <__gethex+0x3ea>
 8007592:	e7f0      	b.n	8007576 <__gethex+0x3fe>
 8007594:	0800866f 	.word	0x0800866f

08007598 <L_shift>:
 8007598:	f1c2 0208 	rsb	r2, r2, #8
 800759c:	0092      	lsls	r2, r2, #2
 800759e:	b570      	push	{r4, r5, r6, lr}
 80075a0:	f1c2 0620 	rsb	r6, r2, #32
 80075a4:	6843      	ldr	r3, [r0, #4]
 80075a6:	6804      	ldr	r4, [r0, #0]
 80075a8:	fa03 f506 	lsl.w	r5, r3, r6
 80075ac:	432c      	orrs	r4, r5
 80075ae:	40d3      	lsrs	r3, r2
 80075b0:	6004      	str	r4, [r0, #0]
 80075b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80075b6:	4288      	cmp	r0, r1
 80075b8:	d3f4      	bcc.n	80075a4 <L_shift+0xc>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}

080075bc <__match>:
 80075bc:	b530      	push	{r4, r5, lr}
 80075be:	6803      	ldr	r3, [r0, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c6:	b914      	cbnz	r4, 80075ce <__match+0x12>
 80075c8:	6003      	str	r3, [r0, #0]
 80075ca:	2001      	movs	r0, #1
 80075cc:	bd30      	pop	{r4, r5, pc}
 80075ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80075d6:	2d19      	cmp	r5, #25
 80075d8:	bf98      	it	ls
 80075da:	3220      	addls	r2, #32
 80075dc:	42a2      	cmp	r2, r4
 80075de:	d0f0      	beq.n	80075c2 <__match+0x6>
 80075e0:	2000      	movs	r0, #0
 80075e2:	e7f3      	b.n	80075cc <__match+0x10>

080075e4 <__hexnan>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	680b      	ldr	r3, [r1, #0]
 80075ea:	6801      	ldr	r1, [r0, #0]
 80075ec:	115e      	asrs	r6, r3, #5
 80075ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075f2:	f013 031f 	ands.w	r3, r3, #31
 80075f6:	b087      	sub	sp, #28
 80075f8:	bf18      	it	ne
 80075fa:	3604      	addne	r6, #4
 80075fc:	2500      	movs	r5, #0
 80075fe:	1f37      	subs	r7, r6, #4
 8007600:	4682      	mov	sl, r0
 8007602:	4690      	mov	r8, r2
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	f846 5c04 	str.w	r5, [r6, #-4]
 800760a:	46b9      	mov	r9, r7
 800760c:	463c      	mov	r4, r7
 800760e:	9502      	str	r5, [sp, #8]
 8007610:	46ab      	mov	fp, r5
 8007612:	784a      	ldrb	r2, [r1, #1]
 8007614:	1c4b      	adds	r3, r1, #1
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	b342      	cbz	r2, 800766c <__hexnan+0x88>
 800761a:	4610      	mov	r0, r2
 800761c:	9105      	str	r1, [sp, #20]
 800761e:	9204      	str	r2, [sp, #16]
 8007620:	f7ff fd94 	bl	800714c <__hexdig_fun>
 8007624:	2800      	cmp	r0, #0
 8007626:	d151      	bne.n	80076cc <__hexnan+0xe8>
 8007628:	9a04      	ldr	r2, [sp, #16]
 800762a:	9905      	ldr	r1, [sp, #20]
 800762c:	2a20      	cmp	r2, #32
 800762e:	d818      	bhi.n	8007662 <__hexnan+0x7e>
 8007630:	9b02      	ldr	r3, [sp, #8]
 8007632:	459b      	cmp	fp, r3
 8007634:	dd13      	ble.n	800765e <__hexnan+0x7a>
 8007636:	454c      	cmp	r4, r9
 8007638:	d206      	bcs.n	8007648 <__hexnan+0x64>
 800763a:	2d07      	cmp	r5, #7
 800763c:	dc04      	bgt.n	8007648 <__hexnan+0x64>
 800763e:	462a      	mov	r2, r5
 8007640:	4649      	mov	r1, r9
 8007642:	4620      	mov	r0, r4
 8007644:	f7ff ffa8 	bl	8007598 <L_shift>
 8007648:	4544      	cmp	r4, r8
 800764a:	d952      	bls.n	80076f2 <__hexnan+0x10e>
 800764c:	2300      	movs	r3, #0
 800764e:	f1a4 0904 	sub.w	r9, r4, #4
 8007652:	f844 3c04 	str.w	r3, [r4, #-4]
 8007656:	f8cd b008 	str.w	fp, [sp, #8]
 800765a:	464c      	mov	r4, r9
 800765c:	461d      	mov	r5, r3
 800765e:	9903      	ldr	r1, [sp, #12]
 8007660:	e7d7      	b.n	8007612 <__hexnan+0x2e>
 8007662:	2a29      	cmp	r2, #41	@ 0x29
 8007664:	d157      	bne.n	8007716 <__hexnan+0x132>
 8007666:	3102      	adds	r1, #2
 8007668:	f8ca 1000 	str.w	r1, [sl]
 800766c:	f1bb 0f00 	cmp.w	fp, #0
 8007670:	d051      	beq.n	8007716 <__hexnan+0x132>
 8007672:	454c      	cmp	r4, r9
 8007674:	d206      	bcs.n	8007684 <__hexnan+0xa0>
 8007676:	2d07      	cmp	r5, #7
 8007678:	dc04      	bgt.n	8007684 <__hexnan+0xa0>
 800767a:	462a      	mov	r2, r5
 800767c:	4649      	mov	r1, r9
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff ff8a 	bl	8007598 <L_shift>
 8007684:	4544      	cmp	r4, r8
 8007686:	d936      	bls.n	80076f6 <__hexnan+0x112>
 8007688:	f1a8 0204 	sub.w	r2, r8, #4
 800768c:	4623      	mov	r3, r4
 800768e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007692:	f842 1f04 	str.w	r1, [r2, #4]!
 8007696:	429f      	cmp	r7, r3
 8007698:	d2f9      	bcs.n	800768e <__hexnan+0xaa>
 800769a:	1b3b      	subs	r3, r7, r4
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	3304      	adds	r3, #4
 80076a2:	3401      	adds	r4, #1
 80076a4:	3e03      	subs	r6, #3
 80076a6:	42b4      	cmp	r4, r6
 80076a8:	bf88      	it	hi
 80076aa:	2304      	movhi	r3, #4
 80076ac:	4443      	add	r3, r8
 80076ae:	2200      	movs	r2, #0
 80076b0:	f843 2b04 	str.w	r2, [r3], #4
 80076b4:	429f      	cmp	r7, r3
 80076b6:	d2fb      	bcs.n	80076b0 <__hexnan+0xcc>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	b91b      	cbnz	r3, 80076c4 <__hexnan+0xe0>
 80076bc:	4547      	cmp	r7, r8
 80076be:	d128      	bne.n	8007712 <__hexnan+0x12e>
 80076c0:	2301      	movs	r3, #1
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	2005      	movs	r0, #5
 80076c6:	b007      	add	sp, #28
 80076c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	3501      	adds	r5, #1
 80076ce:	2d08      	cmp	r5, #8
 80076d0:	f10b 0b01 	add.w	fp, fp, #1
 80076d4:	dd06      	ble.n	80076e4 <__hexnan+0x100>
 80076d6:	4544      	cmp	r4, r8
 80076d8:	d9c1      	bls.n	800765e <__hexnan+0x7a>
 80076da:	2300      	movs	r3, #0
 80076dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80076e0:	2501      	movs	r5, #1
 80076e2:	3c04      	subs	r4, #4
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	f000 000f 	and.w	r0, r0, #15
 80076ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80076ee:	6020      	str	r0, [r4, #0]
 80076f0:	e7b5      	b.n	800765e <__hexnan+0x7a>
 80076f2:	2508      	movs	r5, #8
 80076f4:	e7b3      	b.n	800765e <__hexnan+0x7a>
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0dd      	beq.n	80076b8 <__hexnan+0xd4>
 80076fc:	f1c3 0320 	rsb	r3, r3, #32
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	40da      	lsrs	r2, r3
 8007706:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800770a:	4013      	ands	r3, r2
 800770c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007710:	e7d2      	b.n	80076b8 <__hexnan+0xd4>
 8007712:	3f04      	subs	r7, #4
 8007714:	e7d0      	b.n	80076b8 <__hexnan+0xd4>
 8007716:	2004      	movs	r0, #4
 8007718:	e7d5      	b.n	80076c6 <__hexnan+0xe2>

0800771a <__ascii_mbtowc>:
 800771a:	b082      	sub	sp, #8
 800771c:	b901      	cbnz	r1, 8007720 <__ascii_mbtowc+0x6>
 800771e:	a901      	add	r1, sp, #4
 8007720:	b142      	cbz	r2, 8007734 <__ascii_mbtowc+0x1a>
 8007722:	b14b      	cbz	r3, 8007738 <__ascii_mbtowc+0x1e>
 8007724:	7813      	ldrb	r3, [r2, #0]
 8007726:	600b      	str	r3, [r1, #0]
 8007728:	7812      	ldrb	r2, [r2, #0]
 800772a:	1e10      	subs	r0, r2, #0
 800772c:	bf18      	it	ne
 800772e:	2001      	movne	r0, #1
 8007730:	b002      	add	sp, #8
 8007732:	4770      	bx	lr
 8007734:	4610      	mov	r0, r2
 8007736:	e7fb      	b.n	8007730 <__ascii_mbtowc+0x16>
 8007738:	f06f 0001 	mvn.w	r0, #1
 800773c:	e7f8      	b.n	8007730 <__ascii_mbtowc+0x16>
	...

08007740 <_Balloc>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	69c6      	ldr	r6, [r0, #28]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Balloc+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f000 fe0c 	bl	8008368 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e0      	str	r0, [r4, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_Balloc+0x20>
 8007756:	4b18      	ldr	r3, [pc, #96]	@ (80077b8 <_Balloc+0x78>)
 8007758:	4818      	ldr	r0, [pc, #96]	@ (80077bc <_Balloc+0x7c>)
 800775a:	216b      	movs	r1, #107	@ 0x6b
 800775c:	f000 fdd2 	bl	8008304 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	69e6      	ldr	r6, [r4, #28]
 800776a:	68f3      	ldr	r3, [r6, #12]
 800776c:	b183      	cbz	r3, 8007790 <_Balloc+0x50>
 800776e:	69e3      	ldr	r3, [r4, #28]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007776:	b9b8      	cbnz	r0, 80077a8 <_Balloc+0x68>
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f605 	lsl.w	r6, r1, r5
 800777e:	1d72      	adds	r2, r6, #5
 8007780:	0092      	lsls	r2, r2, #2
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fddc 	bl	8008340 <_calloc_r>
 8007788:	b160      	cbz	r0, 80077a4 <_Balloc+0x64>
 800778a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800778e:	e00e      	b.n	80077ae <_Balloc+0x6e>
 8007790:	2221      	movs	r2, #33	@ 0x21
 8007792:	2104      	movs	r1, #4
 8007794:	4620      	mov	r0, r4
 8007796:	f000 fdd3 	bl	8008340 <_calloc_r>
 800779a:	69e3      	ldr	r3, [r4, #28]
 800779c:	60f0      	str	r0, [r6, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e4      	bne.n	800776e <_Balloc+0x2e>
 80077a4:	2000      	movs	r0, #0
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	6802      	ldr	r2, [r0, #0]
 80077aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ae:	2300      	movs	r3, #0
 80077b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077b4:	e7f7      	b.n	80077a6 <_Balloc+0x66>
 80077b6:	bf00      	nop
 80077b8:	080086e0 	.word	0x080086e0
 80077bc:	080086f7 	.word	0x080086f7

080077c0 <_Bfree>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	69c6      	ldr	r6, [r0, #28]
 80077c4:	4605      	mov	r5, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	b976      	cbnz	r6, 80077e8 <_Bfree+0x28>
 80077ca:	2010      	movs	r0, #16
 80077cc:	f000 fdcc 	bl	8008368 <malloc>
 80077d0:	4602      	mov	r2, r0
 80077d2:	61e8      	str	r0, [r5, #28]
 80077d4:	b920      	cbnz	r0, 80077e0 <_Bfree+0x20>
 80077d6:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <_Bfree+0x3c>)
 80077d8:	4809      	ldr	r0, [pc, #36]	@ (8007800 <_Bfree+0x40>)
 80077da:	218f      	movs	r1, #143	@ 0x8f
 80077dc:	f000 fd92 	bl	8008304 <__assert_func>
 80077e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e4:	6006      	str	r6, [r0, #0]
 80077e6:	60c6      	str	r6, [r0, #12]
 80077e8:	b13c      	cbz	r4, 80077fa <_Bfree+0x3a>
 80077ea:	69eb      	ldr	r3, [r5, #28]
 80077ec:	6862      	ldr	r2, [r4, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077f4:	6021      	str	r1, [r4, #0]
 80077f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	080086e0 	.word	0x080086e0
 8007800:	080086f7 	.word	0x080086f7

08007804 <__multadd>:
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	690d      	ldr	r5, [r1, #16]
 800780a:	4607      	mov	r7, r0
 800780c:	460c      	mov	r4, r1
 800780e:	461e      	mov	r6, r3
 8007810:	f101 0c14 	add.w	ip, r1, #20
 8007814:	2000      	movs	r0, #0
 8007816:	f8dc 3000 	ldr.w	r3, [ip]
 800781a:	b299      	uxth	r1, r3
 800781c:	fb02 6101 	mla	r1, r2, r1, r6
 8007820:	0c1e      	lsrs	r6, r3, #16
 8007822:	0c0b      	lsrs	r3, r1, #16
 8007824:	fb02 3306 	mla	r3, r2, r6, r3
 8007828:	b289      	uxth	r1, r1
 800782a:	3001      	adds	r0, #1
 800782c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007830:	4285      	cmp	r5, r0
 8007832:	f84c 1b04 	str.w	r1, [ip], #4
 8007836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800783a:	dcec      	bgt.n	8007816 <__multadd+0x12>
 800783c:	b30e      	cbz	r6, 8007882 <__multadd+0x7e>
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc19      	bgt.n	8007878 <__multadd+0x74>
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4638      	mov	r0, r7
 8007848:	3101      	adds	r1, #1
 800784a:	f7ff ff79 	bl	8007740 <_Balloc>
 800784e:	4680      	mov	r8, r0
 8007850:	b928      	cbnz	r0, 800785e <__multadd+0x5a>
 8007852:	4602      	mov	r2, r0
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <__multadd+0x84>)
 8007856:	480d      	ldr	r0, [pc, #52]	@ (800788c <__multadd+0x88>)
 8007858:	21ba      	movs	r1, #186	@ 0xba
 800785a:	f000 fd53 	bl	8008304 <__assert_func>
 800785e:	6922      	ldr	r2, [r4, #16]
 8007860:	3202      	adds	r2, #2
 8007862:	f104 010c 	add.w	r1, r4, #12
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	300c      	adds	r0, #12
 800786a:	f7ff fc05 	bl	8007078 <memcpy>
 800786e:	4621      	mov	r1, r4
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa5 	bl	80077c0 <_Bfree>
 8007876:	4644      	mov	r4, r8
 8007878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800787c:	3501      	adds	r5, #1
 800787e:	615e      	str	r6, [r3, #20]
 8007880:	6125      	str	r5, [r4, #16]
 8007882:	4620      	mov	r0, r4
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	0800866f 	.word	0x0800866f
 800788c:	080086f7 	.word	0x080086f7

08007890 <__s2b>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	4615      	mov	r5, r2
 8007898:	461f      	mov	r7, r3
 800789a:	2209      	movs	r2, #9
 800789c:	3308      	adds	r3, #8
 800789e:	4606      	mov	r6, r0
 80078a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078a4:	2100      	movs	r1, #0
 80078a6:	2201      	movs	r2, #1
 80078a8:	429a      	cmp	r2, r3
 80078aa:	db09      	blt.n	80078c0 <__s2b+0x30>
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ff47 	bl	8007740 <_Balloc>
 80078b2:	b940      	cbnz	r0, 80078c6 <__s2b+0x36>
 80078b4:	4602      	mov	r2, r0
 80078b6:	4b19      	ldr	r3, [pc, #100]	@ (800791c <__s2b+0x8c>)
 80078b8:	4819      	ldr	r0, [pc, #100]	@ (8007920 <__s2b+0x90>)
 80078ba:	21d3      	movs	r1, #211	@ 0xd3
 80078bc:	f000 fd22 	bl	8008304 <__assert_func>
 80078c0:	0052      	lsls	r2, r2, #1
 80078c2:	3101      	adds	r1, #1
 80078c4:	e7f0      	b.n	80078a8 <__s2b+0x18>
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	6143      	str	r3, [r0, #20]
 80078ca:	2d09      	cmp	r5, #9
 80078cc:	f04f 0301 	mov.w	r3, #1
 80078d0:	6103      	str	r3, [r0, #16]
 80078d2:	dd16      	ble.n	8007902 <__s2b+0x72>
 80078d4:	f104 0909 	add.w	r9, r4, #9
 80078d8:	46c8      	mov	r8, r9
 80078da:	442c      	add	r4, r5
 80078dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078e0:	4601      	mov	r1, r0
 80078e2:	3b30      	subs	r3, #48	@ 0x30
 80078e4:	220a      	movs	r2, #10
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7ff ff8c 	bl	8007804 <__multadd>
 80078ec:	45a0      	cmp	r8, r4
 80078ee:	d1f5      	bne.n	80078dc <__s2b+0x4c>
 80078f0:	f1a5 0408 	sub.w	r4, r5, #8
 80078f4:	444c      	add	r4, r9
 80078f6:	1b2d      	subs	r5, r5, r4
 80078f8:	1963      	adds	r3, r4, r5
 80078fa:	42bb      	cmp	r3, r7
 80078fc:	db04      	blt.n	8007908 <__s2b+0x78>
 80078fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007902:	340a      	adds	r4, #10
 8007904:	2509      	movs	r5, #9
 8007906:	e7f6      	b.n	80078f6 <__s2b+0x66>
 8007908:	f814 3b01 	ldrb.w	r3, [r4], #1
 800790c:	4601      	mov	r1, r0
 800790e:	3b30      	subs	r3, #48	@ 0x30
 8007910:	220a      	movs	r2, #10
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff ff76 	bl	8007804 <__multadd>
 8007918:	e7ee      	b.n	80078f8 <__s2b+0x68>
 800791a:	bf00      	nop
 800791c:	0800866f 	.word	0x0800866f
 8007920:	080086f7 	.word	0x080086f7

08007924 <__hi0bits>:
 8007924:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007928:	4603      	mov	r3, r0
 800792a:	bf36      	itet	cc
 800792c:	0403      	lslcc	r3, r0, #16
 800792e:	2000      	movcs	r0, #0
 8007930:	2010      	movcc	r0, #16
 8007932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007936:	bf3c      	itt	cc
 8007938:	021b      	lslcc	r3, r3, #8
 800793a:	3008      	addcc	r0, #8
 800793c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007940:	bf3c      	itt	cc
 8007942:	011b      	lslcc	r3, r3, #4
 8007944:	3004      	addcc	r0, #4
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794a:	bf3c      	itt	cc
 800794c:	009b      	lslcc	r3, r3, #2
 800794e:	3002      	addcc	r0, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	db05      	blt.n	8007960 <__hi0bits+0x3c>
 8007954:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007958:	f100 0001 	add.w	r0, r0, #1
 800795c:	bf08      	it	eq
 800795e:	2020      	moveq	r0, #32
 8007960:	4770      	bx	lr

08007962 <__lo0bits>:
 8007962:	6803      	ldr	r3, [r0, #0]
 8007964:	4602      	mov	r2, r0
 8007966:	f013 0007 	ands.w	r0, r3, #7
 800796a:	d00b      	beq.n	8007984 <__lo0bits+0x22>
 800796c:	07d9      	lsls	r1, r3, #31
 800796e:	d421      	bmi.n	80079b4 <__lo0bits+0x52>
 8007970:	0798      	lsls	r0, r3, #30
 8007972:	bf49      	itett	mi
 8007974:	085b      	lsrmi	r3, r3, #1
 8007976:	089b      	lsrpl	r3, r3, #2
 8007978:	2001      	movmi	r0, #1
 800797a:	6013      	strmi	r3, [r2, #0]
 800797c:	bf5c      	itt	pl
 800797e:	6013      	strpl	r3, [r2, #0]
 8007980:	2002      	movpl	r0, #2
 8007982:	4770      	bx	lr
 8007984:	b299      	uxth	r1, r3
 8007986:	b909      	cbnz	r1, 800798c <__lo0bits+0x2a>
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	2010      	movs	r0, #16
 800798c:	b2d9      	uxtb	r1, r3
 800798e:	b909      	cbnz	r1, 8007994 <__lo0bits+0x32>
 8007990:	3008      	adds	r0, #8
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	0719      	lsls	r1, r3, #28
 8007996:	bf04      	itt	eq
 8007998:	091b      	lsreq	r3, r3, #4
 800799a:	3004      	addeq	r0, #4
 800799c:	0799      	lsls	r1, r3, #30
 800799e:	bf04      	itt	eq
 80079a0:	089b      	lsreq	r3, r3, #2
 80079a2:	3002      	addeq	r0, #2
 80079a4:	07d9      	lsls	r1, r3, #31
 80079a6:	d403      	bmi.n	80079b0 <__lo0bits+0x4e>
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	f100 0001 	add.w	r0, r0, #1
 80079ae:	d003      	beq.n	80079b8 <__lo0bits+0x56>
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	4770      	bx	lr
 80079b4:	2000      	movs	r0, #0
 80079b6:	4770      	bx	lr
 80079b8:	2020      	movs	r0, #32
 80079ba:	4770      	bx	lr

080079bc <__i2b>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	460c      	mov	r4, r1
 80079c0:	2101      	movs	r1, #1
 80079c2:	f7ff febd 	bl	8007740 <_Balloc>
 80079c6:	4602      	mov	r2, r0
 80079c8:	b928      	cbnz	r0, 80079d6 <__i2b+0x1a>
 80079ca:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <__i2b+0x24>)
 80079cc:	4805      	ldr	r0, [pc, #20]	@ (80079e4 <__i2b+0x28>)
 80079ce:	f240 1145 	movw	r1, #325	@ 0x145
 80079d2:	f000 fc97 	bl	8008304 <__assert_func>
 80079d6:	2301      	movs	r3, #1
 80079d8:	6144      	str	r4, [r0, #20]
 80079da:	6103      	str	r3, [r0, #16]
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	0800866f 	.word	0x0800866f
 80079e4:	080086f7 	.word	0x080086f7

080079e8 <__multiply>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	4614      	mov	r4, r2
 80079ee:	690a      	ldr	r2, [r1, #16]
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	bfa8      	it	ge
 80079f6:	4623      	movge	r3, r4
 80079f8:	460f      	mov	r7, r1
 80079fa:	bfa4      	itt	ge
 80079fc:	460c      	movge	r4, r1
 80079fe:	461f      	movge	r7, r3
 8007a00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	6861      	ldr	r1, [r4, #4]
 8007a0c:	eb0a 0609 	add.w	r6, sl, r9
 8007a10:	42b3      	cmp	r3, r6
 8007a12:	b085      	sub	sp, #20
 8007a14:	bfb8      	it	lt
 8007a16:	3101      	addlt	r1, #1
 8007a18:	f7ff fe92 	bl	8007740 <_Balloc>
 8007a1c:	b930      	cbnz	r0, 8007a2c <__multiply+0x44>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4b44      	ldr	r3, [pc, #272]	@ (8007b34 <__multiply+0x14c>)
 8007a22:	4845      	ldr	r0, [pc, #276]	@ (8007b38 <__multiply+0x150>)
 8007a24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a28:	f000 fc6c 	bl	8008304 <__assert_func>
 8007a2c:	f100 0514 	add.w	r5, r0, #20
 8007a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a34:	462b      	mov	r3, r5
 8007a36:	2200      	movs	r2, #0
 8007a38:	4543      	cmp	r3, r8
 8007a3a:	d321      	bcc.n	8007a80 <__multiply+0x98>
 8007a3c:	f107 0114 	add.w	r1, r7, #20
 8007a40:	f104 0214 	add.w	r2, r4, #20
 8007a44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	1b13      	subs	r3, r2, r4
 8007a50:	3b15      	subs	r3, #21
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	3304      	adds	r3, #4
 8007a58:	f104 0715 	add.w	r7, r4, #21
 8007a5c:	42ba      	cmp	r2, r7
 8007a5e:	bf38      	it	cc
 8007a60:	2304      	movcc	r3, #4
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	9b02      	ldr	r3, [sp, #8]
 8007a66:	9103      	str	r1, [sp, #12]
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	d80c      	bhi.n	8007a86 <__multiply+0x9e>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	dd03      	ble.n	8007a78 <__multiply+0x90>
 8007a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d05b      	beq.n	8007b30 <__multiply+0x148>
 8007a78:	6106      	str	r6, [r0, #16]
 8007a7a:	b005      	add	sp, #20
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	f843 2b04 	str.w	r2, [r3], #4
 8007a84:	e7d8      	b.n	8007a38 <__multiply+0x50>
 8007a86:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a8a:	f1ba 0f00 	cmp.w	sl, #0
 8007a8e:	d024      	beq.n	8007ada <__multiply+0xf2>
 8007a90:	f104 0e14 	add.w	lr, r4, #20
 8007a94:	46a9      	mov	r9, r5
 8007a96:	f04f 0c00 	mov.w	ip, #0
 8007a9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a9e:	f8d9 3000 	ldr.w	r3, [r9]
 8007aa2:	fa1f fb87 	uxth.w	fp, r7
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ab0:	f8d9 7000 	ldr.w	r7, [r9]
 8007ab4:	4463      	add	r3, ip
 8007ab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007aba:	fb0a c70b 	mla	r7, sl, fp, ip
 8007abe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ac8:	4572      	cmp	r2, lr
 8007aca:	f849 3b04 	str.w	r3, [r9], #4
 8007ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ad2:	d8e2      	bhi.n	8007a9a <__multiply+0xb2>
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	f845 c003 	str.w	ip, [r5, r3]
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ae0:	3104      	adds	r1, #4
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	d021      	beq.n	8007b2c <__multiply+0x144>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	f104 0c14 	add.w	ip, r4, #20
 8007aee:	46ae      	mov	lr, r5
 8007af0:	f04f 0a00 	mov.w	sl, #0
 8007af4:	f8bc b000 	ldrh.w	fp, [ip]
 8007af8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007afc:	fb09 770b 	mla	r7, r9, fp, r7
 8007b00:	4457      	add	r7, sl
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b08:	f84e 3b04 	str.w	r3, [lr], #4
 8007b0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b14:	f8be 3000 	ldrh.w	r3, [lr]
 8007b18:	fb09 330a 	mla	r3, r9, sl, r3
 8007b1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b20:	4562      	cmp	r2, ip
 8007b22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b26:	d8e5      	bhi.n	8007af4 <__multiply+0x10c>
 8007b28:	9f01      	ldr	r7, [sp, #4]
 8007b2a:	51eb      	str	r3, [r5, r7]
 8007b2c:	3504      	adds	r5, #4
 8007b2e:	e799      	b.n	8007a64 <__multiply+0x7c>
 8007b30:	3e01      	subs	r6, #1
 8007b32:	e79b      	b.n	8007a6c <__multiply+0x84>
 8007b34:	0800866f 	.word	0x0800866f
 8007b38:	080086f7 	.word	0x080086f7

08007b3c <__pow5mult>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	4615      	mov	r5, r2
 8007b42:	f012 0203 	ands.w	r2, r2, #3
 8007b46:	4607      	mov	r7, r0
 8007b48:	460e      	mov	r6, r1
 8007b4a:	d007      	beq.n	8007b5c <__pow5mult+0x20>
 8007b4c:	4c25      	ldr	r4, [pc, #148]	@ (8007be4 <__pow5mult+0xa8>)
 8007b4e:	3a01      	subs	r2, #1
 8007b50:	2300      	movs	r3, #0
 8007b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b56:	f7ff fe55 	bl	8007804 <__multadd>
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	10ad      	asrs	r5, r5, #2
 8007b5e:	d03d      	beq.n	8007bdc <__pow5mult+0xa0>
 8007b60:	69fc      	ldr	r4, [r7, #28]
 8007b62:	b97c      	cbnz	r4, 8007b84 <__pow5mult+0x48>
 8007b64:	2010      	movs	r0, #16
 8007b66:	f000 fbff 	bl	8008368 <malloc>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	61f8      	str	r0, [r7, #28]
 8007b6e:	b928      	cbnz	r0, 8007b7c <__pow5mult+0x40>
 8007b70:	4b1d      	ldr	r3, [pc, #116]	@ (8007be8 <__pow5mult+0xac>)
 8007b72:	481e      	ldr	r0, [pc, #120]	@ (8007bec <__pow5mult+0xb0>)
 8007b74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b78:	f000 fbc4 	bl	8008304 <__assert_func>
 8007b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b80:	6004      	str	r4, [r0, #0]
 8007b82:	60c4      	str	r4, [r0, #12]
 8007b84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b8c:	b94c      	cbnz	r4, 8007ba2 <__pow5mult+0x66>
 8007b8e:	f240 2171 	movw	r1, #625	@ 0x271
 8007b92:	4638      	mov	r0, r7
 8007b94:	f7ff ff12 	bl	80079bc <__i2b>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	f04f 0900 	mov.w	r9, #0
 8007ba6:	07eb      	lsls	r3, r5, #31
 8007ba8:	d50a      	bpl.n	8007bc0 <__pow5mult+0x84>
 8007baa:	4631      	mov	r1, r6
 8007bac:	4622      	mov	r2, r4
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f7ff ff1a 	bl	80079e8 <__multiply>
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff fe01 	bl	80077c0 <_Bfree>
 8007bbe:	4646      	mov	r6, r8
 8007bc0:	106d      	asrs	r5, r5, #1
 8007bc2:	d00b      	beq.n	8007bdc <__pow5mult+0xa0>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	b938      	cbnz	r0, 8007bd8 <__pow5mult+0x9c>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7ff ff0b 	bl	80079e8 <__multiply>
 8007bd2:	6020      	str	r0, [r4, #0]
 8007bd4:	f8c0 9000 	str.w	r9, [r0]
 8007bd8:	4604      	mov	r4, r0
 8007bda:	e7e4      	b.n	8007ba6 <__pow5mult+0x6a>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be2:	bf00      	nop
 8007be4:	08008750 	.word	0x08008750
 8007be8:	080086e0 	.word	0x080086e0
 8007bec:	080086f7 	.word	0x080086f7

08007bf0 <__lshift>:
 8007bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	6849      	ldr	r1, [r1, #4]
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	4607      	mov	r7, r0
 8007c02:	4691      	mov	r9, r2
 8007c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c08:	f108 0601 	add.w	r6, r8, #1
 8007c0c:	42b3      	cmp	r3, r6
 8007c0e:	db0b      	blt.n	8007c28 <__lshift+0x38>
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff fd95 	bl	8007740 <_Balloc>
 8007c16:	4605      	mov	r5, r0
 8007c18:	b948      	cbnz	r0, 8007c2e <__lshift+0x3e>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4b28      	ldr	r3, [pc, #160]	@ (8007cc0 <__lshift+0xd0>)
 8007c1e:	4829      	ldr	r0, [pc, #164]	@ (8007cc4 <__lshift+0xd4>)
 8007c20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c24:	f000 fb6e 	bl	8008304 <__assert_func>
 8007c28:	3101      	adds	r1, #1
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	e7ee      	b.n	8007c0c <__lshift+0x1c>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f100 0114 	add.w	r1, r0, #20
 8007c34:	f100 0210 	add.w	r2, r0, #16
 8007c38:	4618      	mov	r0, r3
 8007c3a:	4553      	cmp	r3, sl
 8007c3c:	db33      	blt.n	8007ca6 <__lshift+0xb6>
 8007c3e:	6920      	ldr	r0, [r4, #16]
 8007c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c44:	f104 0314 	add.w	r3, r4, #20
 8007c48:	f019 091f 	ands.w	r9, r9, #31
 8007c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c54:	d02b      	beq.n	8007cae <__lshift+0xbe>
 8007c56:	f1c9 0e20 	rsb	lr, r9, #32
 8007c5a:	468a      	mov	sl, r1
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	fa00 f009 	lsl.w	r0, r0, r9
 8007c64:	4310      	orrs	r0, r2
 8007c66:	f84a 0b04 	str.w	r0, [sl], #4
 8007c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6e:	459c      	cmp	ip, r3
 8007c70:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c74:	d8f3      	bhi.n	8007c5e <__lshift+0x6e>
 8007c76:	ebac 0304 	sub.w	r3, ip, r4
 8007c7a:	3b15      	subs	r3, #21
 8007c7c:	f023 0303 	bic.w	r3, r3, #3
 8007c80:	3304      	adds	r3, #4
 8007c82:	f104 0015 	add.w	r0, r4, #21
 8007c86:	4584      	cmp	ip, r0
 8007c88:	bf38      	it	cc
 8007c8a:	2304      	movcc	r3, #4
 8007c8c:	50ca      	str	r2, [r1, r3]
 8007c8e:	b10a      	cbz	r2, 8007c94 <__lshift+0xa4>
 8007c90:	f108 0602 	add.w	r6, r8, #2
 8007c94:	3e01      	subs	r6, #1
 8007c96:	4638      	mov	r0, r7
 8007c98:	612e      	str	r6, [r5, #16]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	f7ff fd90 	bl	80077c0 <_Bfree>
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007caa:	3301      	adds	r3, #1
 8007cac:	e7c5      	b.n	8007c3a <__lshift+0x4a>
 8007cae:	3904      	subs	r1, #4
 8007cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cb8:	459c      	cmp	ip, r3
 8007cba:	d8f9      	bhi.n	8007cb0 <__lshift+0xc0>
 8007cbc:	e7ea      	b.n	8007c94 <__lshift+0xa4>
 8007cbe:	bf00      	nop
 8007cc0:	0800866f 	.word	0x0800866f
 8007cc4:	080086f7 	.word	0x080086f7

08007cc8 <__mcmp>:
 8007cc8:	690a      	ldr	r2, [r1, #16]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6900      	ldr	r0, [r0, #16]
 8007cce:	1a80      	subs	r0, r0, r2
 8007cd0:	b530      	push	{r4, r5, lr}
 8007cd2:	d10e      	bne.n	8007cf2 <__mcmp+0x2a>
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	3114      	adds	r1, #20
 8007cd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ce0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ce4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ce8:	4295      	cmp	r5, r2
 8007cea:	d003      	beq.n	8007cf4 <__mcmp+0x2c>
 8007cec:	d205      	bcs.n	8007cfa <__mcmp+0x32>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	bd30      	pop	{r4, r5, pc}
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d3f3      	bcc.n	8007ce0 <__mcmp+0x18>
 8007cf8:	e7fb      	b.n	8007cf2 <__mcmp+0x2a>
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	e7f9      	b.n	8007cf2 <__mcmp+0x2a>
	...

08007d00 <__mdiff>:
 8007d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	4689      	mov	r9, r1
 8007d06:	4606      	mov	r6, r0
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4648      	mov	r0, r9
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	f7ff ffdb 	bl	8007cc8 <__mcmp>
 8007d12:	1e05      	subs	r5, r0, #0
 8007d14:	d112      	bne.n	8007d3c <__mdiff+0x3c>
 8007d16:	4629      	mov	r1, r5
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7ff fd11 	bl	8007740 <_Balloc>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__mdiff+0x2e>
 8007d22:	4b3f      	ldr	r3, [pc, #252]	@ (8007e20 <__mdiff+0x120>)
 8007d24:	f240 2137 	movw	r1, #567	@ 0x237
 8007d28:	483e      	ldr	r0, [pc, #248]	@ (8007e24 <__mdiff+0x124>)
 8007d2a:	f000 faeb 	bl	8008304 <__assert_func>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d34:	4610      	mov	r0, r2
 8007d36:	b003      	add	sp, #12
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	bfbc      	itt	lt
 8007d3e:	464b      	movlt	r3, r9
 8007d40:	46a1      	movlt	r9, r4
 8007d42:	4630      	mov	r0, r6
 8007d44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d48:	bfba      	itte	lt
 8007d4a:	461c      	movlt	r4, r3
 8007d4c:	2501      	movlt	r5, #1
 8007d4e:	2500      	movge	r5, #0
 8007d50:	f7ff fcf6 	bl	8007740 <_Balloc>
 8007d54:	4602      	mov	r2, r0
 8007d56:	b918      	cbnz	r0, 8007d60 <__mdiff+0x60>
 8007d58:	4b31      	ldr	r3, [pc, #196]	@ (8007e20 <__mdiff+0x120>)
 8007d5a:	f240 2145 	movw	r1, #581	@ 0x245
 8007d5e:	e7e3      	b.n	8007d28 <__mdiff+0x28>
 8007d60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d64:	6926      	ldr	r6, [r4, #16]
 8007d66:	60c5      	str	r5, [r0, #12]
 8007d68:	f109 0310 	add.w	r3, r9, #16
 8007d6c:	f109 0514 	add.w	r5, r9, #20
 8007d70:	f104 0e14 	add.w	lr, r4, #20
 8007d74:	f100 0b14 	add.w	fp, r0, #20
 8007d78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	46d9      	mov	r9, fp
 8007d84:	f04f 0c00 	mov.w	ip, #0
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	fa1f f38a 	uxth.w	r3, sl
 8007d98:	4619      	mov	r1, r3
 8007d9a:	b283      	uxth	r3, r0
 8007d9c:	1acb      	subs	r3, r1, r3
 8007d9e:	0c00      	lsrs	r0, r0, #16
 8007da0:	4463      	add	r3, ip
 8007da2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007da6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007db0:	4576      	cmp	r6, lr
 8007db2:	f849 3b04 	str.w	r3, [r9], #4
 8007db6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dba:	d8e5      	bhi.n	8007d88 <__mdiff+0x88>
 8007dbc:	1b33      	subs	r3, r6, r4
 8007dbe:	3b15      	subs	r3, #21
 8007dc0:	f023 0303 	bic.w	r3, r3, #3
 8007dc4:	3415      	adds	r4, #21
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	42a6      	cmp	r6, r4
 8007dca:	bf38      	it	cc
 8007dcc:	2304      	movcc	r3, #4
 8007dce:	441d      	add	r5, r3
 8007dd0:	445b      	add	r3, fp
 8007dd2:	461e      	mov	r6, r3
 8007dd4:	462c      	mov	r4, r5
 8007dd6:	4544      	cmp	r4, r8
 8007dd8:	d30e      	bcc.n	8007df8 <__mdiff+0xf8>
 8007dda:	f108 0103 	add.w	r1, r8, #3
 8007dde:	1b49      	subs	r1, r1, r5
 8007de0:	f021 0103 	bic.w	r1, r1, #3
 8007de4:	3d03      	subs	r5, #3
 8007de6:	45a8      	cmp	r8, r5
 8007de8:	bf38      	it	cc
 8007dea:	2100      	movcc	r1, #0
 8007dec:	440b      	add	r3, r1
 8007dee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007df2:	b191      	cbz	r1, 8007e1a <__mdiff+0x11a>
 8007df4:	6117      	str	r7, [r2, #16]
 8007df6:	e79d      	b.n	8007d34 <__mdiff+0x34>
 8007df8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007dfc:	46e6      	mov	lr, ip
 8007dfe:	0c08      	lsrs	r0, r1, #16
 8007e00:	fa1c fc81 	uxtah	ip, ip, r1
 8007e04:	4471      	add	r1, lr
 8007e06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e0a:	b289      	uxth	r1, r1
 8007e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e10:	f846 1b04 	str.w	r1, [r6], #4
 8007e14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e18:	e7dd      	b.n	8007dd6 <__mdiff+0xd6>
 8007e1a:	3f01      	subs	r7, #1
 8007e1c:	e7e7      	b.n	8007dee <__mdiff+0xee>
 8007e1e:	bf00      	nop
 8007e20:	0800866f 	.word	0x0800866f
 8007e24:	080086f7 	.word	0x080086f7

08007e28 <__ulp>:
 8007e28:	b082      	sub	sp, #8
 8007e2a:	ed8d 0b00 	vstr	d0, [sp]
 8007e2e:	9a01      	ldr	r2, [sp, #4]
 8007e30:	4b0f      	ldr	r3, [pc, #60]	@ (8007e70 <__ulp+0x48>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc08      	bgt.n	8007e4e <__ulp+0x26>
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e46:	da04      	bge.n	8007e52 <__ulp+0x2a>
 8007e48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e4c:	4113      	asrs	r3, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	e008      	b.n	8007e64 <__ulp+0x3c>
 8007e52:	f1a2 0314 	sub.w	r3, r2, #20
 8007e56:	2b1e      	cmp	r3, #30
 8007e58:	bfda      	itte	le
 8007e5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e5e:	40da      	lsrle	r2, r3
 8007e60:	2201      	movgt	r2, #1
 8007e62:	2300      	movs	r3, #0
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	ec41 0b10 	vmov	d0, r0, r1
 8007e6c:	b002      	add	sp, #8
 8007e6e:	4770      	bx	lr
 8007e70:	7ff00000 	.word	0x7ff00000

08007e74 <__b2d>:
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	6906      	ldr	r6, [r0, #16]
 8007e7a:	f100 0814 	add.w	r8, r0, #20
 8007e7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e82:	1f37      	subs	r7, r6, #4
 8007e84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7ff fd4b 	bl	8007924 <__hi0bits>
 8007e8e:	f1c0 0320 	rsb	r3, r0, #32
 8007e92:	280a      	cmp	r0, #10
 8007e94:	600b      	str	r3, [r1, #0]
 8007e96:	491b      	ldr	r1, [pc, #108]	@ (8007f04 <__b2d+0x90>)
 8007e98:	dc15      	bgt.n	8007ec6 <__b2d+0x52>
 8007e9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ea2:	45b8      	cmp	r8, r7
 8007ea4:	ea43 0501 	orr.w	r5, r3, r1
 8007ea8:	bf34      	ite	cc
 8007eaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007eae:	2300      	movcs	r3, #0
 8007eb0:	3015      	adds	r0, #21
 8007eb2:	fa02 f000 	lsl.w	r0, r2, r0
 8007eb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007eba:	4303      	orrs	r3, r0
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	ec45 4b10 	vmov	d0, r4, r5
 8007ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec6:	45b8      	cmp	r8, r7
 8007ec8:	bf3a      	itte	cc
 8007eca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ece:	f1a6 0708 	subcc.w	r7, r6, #8
 8007ed2:	2300      	movcs	r3, #0
 8007ed4:	380b      	subs	r0, #11
 8007ed6:	d012      	beq.n	8007efe <__b2d+0x8a>
 8007ed8:	f1c0 0120 	rsb	r1, r0, #32
 8007edc:	fa23 f401 	lsr.w	r4, r3, r1
 8007ee0:	4082      	lsls	r2, r0
 8007ee2:	4322      	orrs	r2, r4
 8007ee4:	4547      	cmp	r7, r8
 8007ee6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007eea:	bf8c      	ite	hi
 8007eec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007ef0:	2200      	movls	r2, #0
 8007ef2:	4083      	lsls	r3, r0
 8007ef4:	40ca      	lsrs	r2, r1
 8007ef6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007efa:	4313      	orrs	r3, r2
 8007efc:	e7de      	b.n	8007ebc <__b2d+0x48>
 8007efe:	ea42 0501 	orr.w	r5, r2, r1
 8007f02:	e7db      	b.n	8007ebc <__b2d+0x48>
 8007f04:	3ff00000 	.word	0x3ff00000

08007f08 <__d2b>:
 8007f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	2101      	movs	r1, #1
 8007f10:	ec59 8b10 	vmov	r8, r9, d0
 8007f14:	4616      	mov	r6, r2
 8007f16:	f7ff fc13 	bl	8007740 <_Balloc>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	b930      	cbnz	r0, 8007f2c <__d2b+0x24>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	4b23      	ldr	r3, [pc, #140]	@ (8007fb0 <__d2b+0xa8>)
 8007f22:	4824      	ldr	r0, [pc, #144]	@ (8007fb4 <__d2b+0xac>)
 8007f24:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f28:	f000 f9ec 	bl	8008304 <__assert_func>
 8007f2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f34:	b10d      	cbz	r5, 8007f3a <__d2b+0x32>
 8007f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f40:	d023      	beq.n	8007f8a <__d2b+0x82>
 8007f42:	4668      	mov	r0, sp
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	f7ff fd0c 	bl	8007962 <__lo0bits>
 8007f4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f4e:	b1d0      	cbz	r0, 8007f86 <__d2b+0x7e>
 8007f50:	f1c0 0320 	rsb	r3, r0, #32
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	40c2      	lsrs	r2, r0
 8007f5c:	6163      	str	r3, [r4, #20]
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	61a3      	str	r3, [r4, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bf0c      	ite	eq
 8007f68:	2201      	moveq	r2, #1
 8007f6a:	2202      	movne	r2, #2
 8007f6c:	6122      	str	r2, [r4, #16]
 8007f6e:	b1a5      	cbz	r5, 8007f9a <__d2b+0x92>
 8007f70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f74:	4405      	add	r5, r0
 8007f76:	603d      	str	r5, [r7, #0]
 8007f78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f7c:	6030      	str	r0, [r6, #0]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	b003      	add	sp, #12
 8007f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f86:	6161      	str	r1, [r4, #20]
 8007f88:	e7ea      	b.n	8007f60 <__d2b+0x58>
 8007f8a:	a801      	add	r0, sp, #4
 8007f8c:	f7ff fce9 	bl	8007962 <__lo0bits>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	6163      	str	r3, [r4, #20]
 8007f94:	3020      	adds	r0, #32
 8007f96:	2201      	movs	r2, #1
 8007f98:	e7e8      	b.n	8007f6c <__d2b+0x64>
 8007f9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fa2:	6038      	str	r0, [r7, #0]
 8007fa4:	6918      	ldr	r0, [r3, #16]
 8007fa6:	f7ff fcbd 	bl	8007924 <__hi0bits>
 8007faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fae:	e7e5      	b.n	8007f7c <__d2b+0x74>
 8007fb0:	0800866f 	.word	0x0800866f
 8007fb4:	080086f7 	.word	0x080086f7

08007fb8 <__ratio>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	e9cd 1000 	strd	r1, r0, [sp]
 8007fc2:	a902      	add	r1, sp, #8
 8007fc4:	f7ff ff56 	bl	8007e74 <__b2d>
 8007fc8:	9800      	ldr	r0, [sp, #0]
 8007fca:	a903      	add	r1, sp, #12
 8007fcc:	ec55 4b10 	vmov	r4, r5, d0
 8007fd0:	f7ff ff50 	bl	8007e74 <__b2d>
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	6919      	ldr	r1, [r3, #16]
 8007fd8:	9b00      	ldr	r3, [sp, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	1ac9      	subs	r1, r1, r3
 8007fde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	ec5b ab10 	vmov	sl, fp, d0
 8007fe8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfce      	itee	gt
 8007ff0:	462a      	movgt	r2, r5
 8007ff2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ff6:	465a      	movle	r2, fp
 8007ff8:	462f      	mov	r7, r5
 8007ffa:	46d9      	mov	r9, fp
 8007ffc:	bfcc      	ite	gt
 8007ffe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008002:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008006:	464b      	mov	r3, r9
 8008008:	4652      	mov	r2, sl
 800800a:	4620      	mov	r0, r4
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 fc1d 	bl	800084c <__aeabi_ddiv>
 8008012:	ec41 0b10 	vmov	d0, r0, r1
 8008016:	b005      	add	sp, #20
 8008018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800801c <__copybits>:
 800801c:	3901      	subs	r1, #1
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	1149      	asrs	r1, r1, #5
 8008022:	6914      	ldr	r4, [r2, #16]
 8008024:	3101      	adds	r1, #1
 8008026:	f102 0314 	add.w	r3, r2, #20
 800802a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800802e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008032:	1f05      	subs	r5, r0, #4
 8008034:	42a3      	cmp	r3, r4
 8008036:	d30c      	bcc.n	8008052 <__copybits+0x36>
 8008038:	1aa3      	subs	r3, r4, r2
 800803a:	3b11      	subs	r3, #17
 800803c:	f023 0303 	bic.w	r3, r3, #3
 8008040:	3211      	adds	r2, #17
 8008042:	42a2      	cmp	r2, r4
 8008044:	bf88      	it	hi
 8008046:	2300      	movhi	r3, #0
 8008048:	4418      	add	r0, r3
 800804a:	2300      	movs	r3, #0
 800804c:	4288      	cmp	r0, r1
 800804e:	d305      	bcc.n	800805c <__copybits+0x40>
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	f853 6b04 	ldr.w	r6, [r3], #4
 8008056:	f845 6f04 	str.w	r6, [r5, #4]!
 800805a:	e7eb      	b.n	8008034 <__copybits+0x18>
 800805c:	f840 3b04 	str.w	r3, [r0], #4
 8008060:	e7f4      	b.n	800804c <__copybits+0x30>

08008062 <__any_on>:
 8008062:	f100 0214 	add.w	r2, r0, #20
 8008066:	6900      	ldr	r0, [r0, #16]
 8008068:	114b      	asrs	r3, r1, #5
 800806a:	4298      	cmp	r0, r3
 800806c:	b510      	push	{r4, lr}
 800806e:	db11      	blt.n	8008094 <__any_on+0x32>
 8008070:	dd0a      	ble.n	8008088 <__any_on+0x26>
 8008072:	f011 011f 	ands.w	r1, r1, #31
 8008076:	d007      	beq.n	8008088 <__any_on+0x26>
 8008078:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800807c:	fa24 f001 	lsr.w	r0, r4, r1
 8008080:	fa00 f101 	lsl.w	r1, r0, r1
 8008084:	428c      	cmp	r4, r1
 8008086:	d10b      	bne.n	80080a0 <__any_on+0x3e>
 8008088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800808c:	4293      	cmp	r3, r2
 800808e:	d803      	bhi.n	8008098 <__any_on+0x36>
 8008090:	2000      	movs	r0, #0
 8008092:	bd10      	pop	{r4, pc}
 8008094:	4603      	mov	r3, r0
 8008096:	e7f7      	b.n	8008088 <__any_on+0x26>
 8008098:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800809c:	2900      	cmp	r1, #0
 800809e:	d0f5      	beq.n	800808c <__any_on+0x2a>
 80080a0:	2001      	movs	r0, #1
 80080a2:	e7f6      	b.n	8008092 <__any_on+0x30>

080080a4 <_realloc_r>:
 80080a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a8:	4680      	mov	r8, r0
 80080aa:	4615      	mov	r5, r2
 80080ac:	460c      	mov	r4, r1
 80080ae:	b921      	cbnz	r1, 80080ba <_realloc_r+0x16>
 80080b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	4611      	mov	r1, r2
 80080b6:	f7fc bf9b 	b.w	8004ff0 <_malloc_r>
 80080ba:	b92a      	cbnz	r2, 80080c8 <_realloc_r+0x24>
 80080bc:	f7fc ff2c 	bl	8004f18 <_free_r>
 80080c0:	2400      	movs	r4, #0
 80080c2:	4620      	mov	r0, r4
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	f000 f956 	bl	8008378 <_malloc_usable_size_r>
 80080cc:	4285      	cmp	r5, r0
 80080ce:	4606      	mov	r6, r0
 80080d0:	d802      	bhi.n	80080d8 <_realloc_r+0x34>
 80080d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080d6:	d8f4      	bhi.n	80080c2 <_realloc_r+0x1e>
 80080d8:	4629      	mov	r1, r5
 80080da:	4640      	mov	r0, r8
 80080dc:	f7fc ff88 	bl	8004ff0 <_malloc_r>
 80080e0:	4607      	mov	r7, r0
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d0ec      	beq.n	80080c0 <_realloc_r+0x1c>
 80080e6:	42b5      	cmp	r5, r6
 80080e8:	462a      	mov	r2, r5
 80080ea:	4621      	mov	r1, r4
 80080ec:	bf28      	it	cs
 80080ee:	4632      	movcs	r2, r6
 80080f0:	f7fe ffc2 	bl	8007078 <memcpy>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4640      	mov	r0, r8
 80080f8:	f7fc ff0e 	bl	8004f18 <_free_r>
 80080fc:	463c      	mov	r4, r7
 80080fe:	e7e0      	b.n	80080c2 <_realloc_r+0x1e>

08008100 <_strtoul_l.constprop.0>:
 8008100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008104:	4e34      	ldr	r6, [pc, #208]	@ (80081d8 <_strtoul_l.constprop.0+0xd8>)
 8008106:	4686      	mov	lr, r0
 8008108:	460d      	mov	r5, r1
 800810a:	4628      	mov	r0, r5
 800810c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008110:	5d37      	ldrb	r7, [r6, r4]
 8008112:	f017 0708 	ands.w	r7, r7, #8
 8008116:	d1f8      	bne.n	800810a <_strtoul_l.constprop.0+0xa>
 8008118:	2c2d      	cmp	r4, #45	@ 0x2d
 800811a:	d12f      	bne.n	800817c <_strtoul_l.constprop.0+0x7c>
 800811c:	782c      	ldrb	r4, [r5, #0]
 800811e:	2701      	movs	r7, #1
 8008120:	1c85      	adds	r5, r0, #2
 8008122:	f033 0010 	bics.w	r0, r3, #16
 8008126:	d109      	bne.n	800813c <_strtoul_l.constprop.0+0x3c>
 8008128:	2c30      	cmp	r4, #48	@ 0x30
 800812a:	d12c      	bne.n	8008186 <_strtoul_l.constprop.0+0x86>
 800812c:	7828      	ldrb	r0, [r5, #0]
 800812e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008132:	2858      	cmp	r0, #88	@ 0x58
 8008134:	d127      	bne.n	8008186 <_strtoul_l.constprop.0+0x86>
 8008136:	786c      	ldrb	r4, [r5, #1]
 8008138:	2310      	movs	r3, #16
 800813a:	3502      	adds	r5, #2
 800813c:	f04f 38ff 	mov.w	r8, #4294967295
 8008140:	2600      	movs	r6, #0
 8008142:	fbb8 f8f3 	udiv	r8, r8, r3
 8008146:	fb03 f908 	mul.w	r9, r3, r8
 800814a:	ea6f 0909 	mvn.w	r9, r9
 800814e:	4630      	mov	r0, r6
 8008150:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008154:	f1bc 0f09 	cmp.w	ip, #9
 8008158:	d81c      	bhi.n	8008194 <_strtoul_l.constprop.0+0x94>
 800815a:	4664      	mov	r4, ip
 800815c:	42a3      	cmp	r3, r4
 800815e:	dd2a      	ble.n	80081b6 <_strtoul_l.constprop.0+0xb6>
 8008160:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008164:	d007      	beq.n	8008176 <_strtoul_l.constprop.0+0x76>
 8008166:	4580      	cmp	r8, r0
 8008168:	d322      	bcc.n	80081b0 <_strtoul_l.constprop.0+0xb0>
 800816a:	d101      	bne.n	8008170 <_strtoul_l.constprop.0+0x70>
 800816c:	45a1      	cmp	r9, r4
 800816e:	db1f      	blt.n	80081b0 <_strtoul_l.constprop.0+0xb0>
 8008170:	fb00 4003 	mla	r0, r0, r3, r4
 8008174:	2601      	movs	r6, #1
 8008176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800817a:	e7e9      	b.n	8008150 <_strtoul_l.constprop.0+0x50>
 800817c:	2c2b      	cmp	r4, #43	@ 0x2b
 800817e:	bf04      	itt	eq
 8008180:	782c      	ldrbeq	r4, [r5, #0]
 8008182:	1c85      	addeq	r5, r0, #2
 8008184:	e7cd      	b.n	8008122 <_strtoul_l.constprop.0+0x22>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1d8      	bne.n	800813c <_strtoul_l.constprop.0+0x3c>
 800818a:	2c30      	cmp	r4, #48	@ 0x30
 800818c:	bf0c      	ite	eq
 800818e:	2308      	moveq	r3, #8
 8008190:	230a      	movne	r3, #10
 8008192:	e7d3      	b.n	800813c <_strtoul_l.constprop.0+0x3c>
 8008194:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008198:	f1bc 0f19 	cmp.w	ip, #25
 800819c:	d801      	bhi.n	80081a2 <_strtoul_l.constprop.0+0xa2>
 800819e:	3c37      	subs	r4, #55	@ 0x37
 80081a0:	e7dc      	b.n	800815c <_strtoul_l.constprop.0+0x5c>
 80081a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80081a6:	f1bc 0f19 	cmp.w	ip, #25
 80081aa:	d804      	bhi.n	80081b6 <_strtoul_l.constprop.0+0xb6>
 80081ac:	3c57      	subs	r4, #87	@ 0x57
 80081ae:	e7d5      	b.n	800815c <_strtoul_l.constprop.0+0x5c>
 80081b0:	f04f 36ff 	mov.w	r6, #4294967295
 80081b4:	e7df      	b.n	8008176 <_strtoul_l.constprop.0+0x76>
 80081b6:	1c73      	adds	r3, r6, #1
 80081b8:	d106      	bne.n	80081c8 <_strtoul_l.constprop.0+0xc8>
 80081ba:	2322      	movs	r3, #34	@ 0x22
 80081bc:	f8ce 3000 	str.w	r3, [lr]
 80081c0:	4630      	mov	r0, r6
 80081c2:	b932      	cbnz	r2, 80081d2 <_strtoul_l.constprop.0+0xd2>
 80081c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081c8:	b107      	cbz	r7, 80081cc <_strtoul_l.constprop.0+0xcc>
 80081ca:	4240      	negs	r0, r0
 80081cc:	2a00      	cmp	r2, #0
 80081ce:	d0f9      	beq.n	80081c4 <_strtoul_l.constprop.0+0xc4>
 80081d0:	b106      	cbz	r6, 80081d4 <_strtoul_l.constprop.0+0xd4>
 80081d2:	1e69      	subs	r1, r5, #1
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	e7f5      	b.n	80081c4 <_strtoul_l.constprop.0+0xc4>
 80081d8:	08008519 	.word	0x08008519

080081dc <_strtoul_r>:
 80081dc:	f7ff bf90 	b.w	8008100 <_strtoul_l.constprop.0>

080081e0 <__ascii_wctomb>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	4608      	mov	r0, r1
 80081e4:	b141      	cbz	r1, 80081f8 <__ascii_wctomb+0x18>
 80081e6:	2aff      	cmp	r2, #255	@ 0xff
 80081e8:	d904      	bls.n	80081f4 <__ascii_wctomb+0x14>
 80081ea:	228a      	movs	r2, #138	@ 0x8a
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	4770      	bx	lr
 80081f4:	700a      	strb	r2, [r1, #0]
 80081f6:	2001      	movs	r0, #1
 80081f8:	4770      	bx	lr

080081fa <__swhatbuf_r>:
 80081fa:	b570      	push	{r4, r5, r6, lr}
 80081fc:	460c      	mov	r4, r1
 80081fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008202:	2900      	cmp	r1, #0
 8008204:	b096      	sub	sp, #88	@ 0x58
 8008206:	4615      	mov	r5, r2
 8008208:	461e      	mov	r6, r3
 800820a:	da0d      	bge.n	8008228 <__swhatbuf_r+0x2e>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008212:	f04f 0100 	mov.w	r1, #0
 8008216:	bf14      	ite	ne
 8008218:	2340      	movne	r3, #64	@ 0x40
 800821a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800821e:	2000      	movs	r0, #0
 8008220:	6031      	str	r1, [r6, #0]
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	b016      	add	sp, #88	@ 0x58
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	466a      	mov	r2, sp
 800822a:	f000 f849 	bl	80082c0 <_fstat_r>
 800822e:	2800      	cmp	r0, #0
 8008230:	dbec      	blt.n	800820c <__swhatbuf_r+0x12>
 8008232:	9901      	ldr	r1, [sp, #4]
 8008234:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008238:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800823c:	4259      	negs	r1, r3
 800823e:	4159      	adcs	r1, r3
 8008240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008244:	e7eb      	b.n	800821e <__swhatbuf_r+0x24>

08008246 <__smakebuf_r>:
 8008246:	898b      	ldrh	r3, [r1, #12]
 8008248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800824a:	079d      	lsls	r5, r3, #30
 800824c:	4606      	mov	r6, r0
 800824e:	460c      	mov	r4, r1
 8008250:	d507      	bpl.n	8008262 <__smakebuf_r+0x1c>
 8008252:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	2301      	movs	r3, #1
 800825c:	6163      	str	r3, [r4, #20]
 800825e:	b003      	add	sp, #12
 8008260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008262:	ab01      	add	r3, sp, #4
 8008264:	466a      	mov	r2, sp
 8008266:	f7ff ffc8 	bl	80081fa <__swhatbuf_r>
 800826a:	9f00      	ldr	r7, [sp, #0]
 800826c:	4605      	mov	r5, r0
 800826e:	4639      	mov	r1, r7
 8008270:	4630      	mov	r0, r6
 8008272:	f7fc febd 	bl	8004ff0 <_malloc_r>
 8008276:	b948      	cbnz	r0, 800828c <__smakebuf_r+0x46>
 8008278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827c:	059a      	lsls	r2, r3, #22
 800827e:	d4ee      	bmi.n	800825e <__smakebuf_r+0x18>
 8008280:	f023 0303 	bic.w	r3, r3, #3
 8008284:	f043 0302 	orr.w	r3, r3, #2
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	e7e2      	b.n	8008252 <__smakebuf_r+0xc>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	6020      	str	r0, [r4, #0]
 8008290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800829c:	b15b      	cbz	r3, 80082b6 <__smakebuf_r+0x70>
 800829e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 f81e 	bl	80082e4 <_isatty_r>
 80082a8:	b128      	cbz	r0, 80082b6 <__smakebuf_r+0x70>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f023 0303 	bic.w	r3, r3, #3
 80082b0:	f043 0301 	orr.w	r3, r3, #1
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	431d      	orrs	r5, r3
 80082ba:	81a5      	strh	r5, [r4, #12]
 80082bc:	e7cf      	b.n	800825e <__smakebuf_r+0x18>
	...

080082c0 <_fstat_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d07      	ldr	r5, [pc, #28]	@ (80082e0 <_fstat_r+0x20>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	f7f9 f8a9 	bl	8001424 <_fstat>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d102      	bne.n	80082dc <_fstat_r+0x1c>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b103      	cbz	r3, 80082dc <_fstat_r+0x1c>
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	bf00      	nop
 80082e0:	200004fc 	.word	0x200004fc

080082e4 <_isatty_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d06      	ldr	r5, [pc, #24]	@ (8008300 <_isatty_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7f9 f8a8 	bl	8001444 <_isatty>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_isatty_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_isatty_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	200004fc 	.word	0x200004fc

08008304 <__assert_func>:
 8008304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008306:	4614      	mov	r4, r2
 8008308:	461a      	mov	r2, r3
 800830a:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <__assert_func+0x2c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4605      	mov	r5, r0
 8008310:	68d8      	ldr	r0, [r3, #12]
 8008312:	b954      	cbnz	r4, 800832a <__assert_func+0x26>
 8008314:	4b07      	ldr	r3, [pc, #28]	@ (8008334 <__assert_func+0x30>)
 8008316:	461c      	mov	r4, r3
 8008318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800831c:	9100      	str	r1, [sp, #0]
 800831e:	462b      	mov	r3, r5
 8008320:	4905      	ldr	r1, [pc, #20]	@ (8008338 <__assert_func+0x34>)
 8008322:	f000 f831 	bl	8008388 <fiprintf>
 8008326:	f000 f841 	bl	80083ac <abort>
 800832a:	4b04      	ldr	r3, [pc, #16]	@ (800833c <__assert_func+0x38>)
 800832c:	e7f4      	b.n	8008318 <__assert_func+0x14>
 800832e:	bf00      	nop
 8008330:	20000018 	.word	0x20000018
 8008334:	0800888b 	.word	0x0800888b
 8008338:	0800885d 	.word	0x0800885d
 800833c:	08008850 	.word	0x08008850

08008340 <_calloc_r>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	fba1 5402 	umull	r5, r4, r1, r2
 8008346:	b93c      	cbnz	r4, 8008358 <_calloc_r+0x18>
 8008348:	4629      	mov	r1, r5
 800834a:	f7fc fe51 	bl	8004ff0 <_malloc_r>
 800834e:	4606      	mov	r6, r0
 8008350:	b928      	cbnz	r0, 800835e <_calloc_r+0x1e>
 8008352:	2600      	movs	r6, #0
 8008354:	4630      	mov	r0, r6
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	220c      	movs	r2, #12
 800835a:	6002      	str	r2, [r0, #0]
 800835c:	e7f9      	b.n	8008352 <_calloc_r+0x12>
 800835e:	462a      	mov	r2, r5
 8008360:	4621      	mov	r1, r4
 8008362:	f7fc fd56 	bl	8004e12 <memset>
 8008366:	e7f5      	b.n	8008354 <_calloc_r+0x14>

08008368 <malloc>:
 8008368:	4b02      	ldr	r3, [pc, #8]	@ (8008374 <malloc+0xc>)
 800836a:	4601      	mov	r1, r0
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f7fc be3f 	b.w	8004ff0 <_malloc_r>
 8008372:	bf00      	nop
 8008374:	20000018 	.word	0x20000018

08008378 <_malloc_usable_size_r>:
 8008378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837c:	1f18      	subs	r0, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	bfbc      	itt	lt
 8008382:	580b      	ldrlt	r3, [r1, r0]
 8008384:	18c0      	addlt	r0, r0, r3
 8008386:	4770      	bx	lr

08008388 <fiprintf>:
 8008388:	b40e      	push	{r1, r2, r3}
 800838a:	b503      	push	{r0, r1, lr}
 800838c:	4601      	mov	r1, r0
 800838e:	ab03      	add	r3, sp, #12
 8008390:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <fiprintf+0x20>)
 8008392:	f853 2b04 	ldr.w	r2, [r3], #4
 8008396:	6800      	ldr	r0, [r0, #0]
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	f7fe f889 	bl	80064b0 <_vfiprintf_r>
 800839e:	b002      	add	sp, #8
 80083a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a4:	b003      	add	sp, #12
 80083a6:	4770      	bx	lr
 80083a8:	20000018 	.word	0x20000018

080083ac <abort>:
 80083ac:	b508      	push	{r3, lr}
 80083ae:	2006      	movs	r0, #6
 80083b0:	f000 f82c 	bl	800840c <raise>
 80083b4:	2001      	movs	r0, #1
 80083b6:	f7f8 ffe5 	bl	8001384 <_exit>

080083ba <_raise_r>:
 80083ba:	291f      	cmp	r1, #31
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4605      	mov	r5, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	d904      	bls.n	80083ce <_raise_r+0x14>
 80083c4:	2316      	movs	r3, #22
 80083c6:	6003      	str	r3, [r0, #0]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083d0:	b112      	cbz	r2, 80083d8 <_raise_r+0x1e>
 80083d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083d6:	b94b      	cbnz	r3, 80083ec <_raise_r+0x32>
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 f831 	bl	8008440 <_getpid_r>
 80083de:	4622      	mov	r2, r4
 80083e0:	4601      	mov	r1, r0
 80083e2:	4628      	mov	r0, r5
 80083e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e8:	f000 b818 	b.w	800841c <_kill_r>
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d00a      	beq.n	8008406 <_raise_r+0x4c>
 80083f0:	1c59      	adds	r1, r3, #1
 80083f2:	d103      	bne.n	80083fc <_raise_r+0x42>
 80083f4:	2316      	movs	r3, #22
 80083f6:	6003      	str	r3, [r0, #0]
 80083f8:	2001      	movs	r0, #1
 80083fa:	e7e7      	b.n	80083cc <_raise_r+0x12>
 80083fc:	2100      	movs	r1, #0
 80083fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008402:	4620      	mov	r0, r4
 8008404:	4798      	blx	r3
 8008406:	2000      	movs	r0, #0
 8008408:	e7e0      	b.n	80083cc <_raise_r+0x12>
	...

0800840c <raise>:
 800840c:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <raise+0xc>)
 800840e:	4601      	mov	r1, r0
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f7ff bfd2 	b.w	80083ba <_raise_r>
 8008416:	bf00      	nop
 8008418:	20000018 	.word	0x20000018

0800841c <_kill_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_kill_r+0x20>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f7f8 ff9b 	bl	8001364 <_kill>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d102      	bne.n	8008438 <_kill_r+0x1c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	b103      	cbz	r3, 8008438 <_kill_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	200004fc 	.word	0x200004fc

08008440 <_getpid_r>:
 8008440:	f7f8 bf88 	b.w	8001354 <_getpid>

08008444 <_init>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr

08008450 <_fini>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr
